# The proguard configuration file for the following section is /Users/fernandorauber/StudioProjects/iProov KMP/sdk/build/intermediates/default_proguard_files/global/proguard-android.txt-8.5.2
# This is a configuration file for ProGuard.
# http://proguard.sourceforge.net/index.html#manual/usage.html
#
# Starting with version 2.2 of the Android plugin for Gradle, this file is distributed together with
# the plugin and unpacked at build-time. The files in $ANDROID_HOME are no longer maintained and
# will be ignored by new version of the Android plugin for Gradle.

# Optimization is turned off by default. Dex does not like code run
# through the ProGuard optimize steps (and performs some
# of these optimizations on its own).
# Note that if you want to enable optimization, you cannot just
# include optimization flags in your own project configuration file;
# instead you will need to point to the
# "proguard-android-optimize.txt" file instead of this one from your
# project.properties file.
-dontoptimize

# Preserve some attributes that may be required for reflection.
-keepattributes AnnotationDefault,
                EnclosingMethod,
                InnerClasses,
                RuntimeVisibleAnnotations,
                RuntimeVisibleParameterAnnotations,
                RuntimeVisibleTypeAnnotations,
                Signature

-keep public class com.google.vending.licensing.ILicensingService
-keep public class com.android.vending.licensing.ILicensingService
-keep public class com.google.android.vending.licensing.ILicensingService
-dontnote com.android.vending.licensing.ILicensingService
-dontnote com.google.vending.licensing.ILicensingService
-dontnote com.google.android.vending.licensing.ILicensingService

# For native methods, see https://www.guardsquare.com/manual/configuration/examples#native
-keepclasseswithmembernames,includedescriptorclasses class * {
    native <methods>;
}

# Keep setters in Views so that animations can still work.
-keepclassmembers public class * extends android.view.View {
    void set*(***);
    *** get*();
}

# We want to keep methods in Activity that could be used in the XML attribute onClick.
-keepclassmembers class * extends android.app.Activity {
    public void *(android.view.View);
}

# For enumeration classes, see https://www.guardsquare.com/manual/configuration/examples#enumerations
-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

-keepclassmembers class * implements android.os.Parcelable {
    public static final ** CREATOR;
}

# Preserve annotated Javascript interface methods.
-keepclassmembers class * {
    @android.webkit.JavascriptInterface <methods>;
}

# The support libraries contains references to newer platform versions.
# Don't warn about those in case this app is linking against an older
# platform version. We know about them, and they are safe.
-dontnote android.support.**
-dontnote androidx.**
-dontwarn android.support.**
-dontwarn androidx.**

# Understand the @Keep support annotation.
-keep class android.support.annotation.Keep

-keep @android.support.annotation.Keep class * {*;}

-keepclasseswithmembers class * {
    @android.support.annotation.Keep <methods>;
}

-keepclasseswithmembers class * {
    @android.support.annotation.Keep <fields>;
}

-keepclasseswithmembers class * {
    @android.support.annotation.Keep <init>(...);
}

# These classes are duplicated between android.jar and org.apache.http.legacy.jar.
-dontnote org.apache.http.**
-dontnote android.net.http.**

# These classes are duplicated between android.jar and core-lambda-stubs.jar.
-dontnote java.lang.invoke.**

# End of content from /Users/fernandorauber/StudioProjects/iProov KMP/sdk/build/intermediates/default_proguard_files/global/proguard-android.txt-8.5.2
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/7ee3a78f51e4bc6854f3ba3383ff48f5/transformed/iproov-10.3.2/proguard.txt



-keeppackagenames com.iproov.sdk.core.t,com.iproov.sdk.core.try,com.iproov.sdk.core.for,com.iproov.sdk.core.new,com.iproov.sdk.api.exception,com.iproov.sdk.core.continue
-adaptresourcefilecontents !jni/arm64-v8a/libiproov-com-lib.so,!jni/armeabi-v7a/libiproov-com-lib.so,!jni/x86/libiproov-com-lib.so,!jni/x86_64/libiproov-com-lib.so,!jni/arm64-v8a/libd3845f.so,!jni/armeabi-v7a/libd3845f.so,!jni/x86/libd3845f.so,!jni/x86_64/libd3845f.so,!jni/arm64-v8a/libiproov-com-calcifer-lib.so,!jni/armeabi-v7a/libiproov-com-calcifer-lib.so,!jni/x86/libiproov-com-calcifer-lib.so,!jni/x86_64/libiproov-com-calcifer-lib.so,!lib/arm64-v8a/libiproov-com-lib.so,!lib/armeabi-v7a/libiproov-com-lib.so,!lib/x86/libiproov-com-lib.so,!lib/x86_64/libiproov-com-lib.so,!lib/arm64-v8a/libd3845f.so,!lib/armeabi-v7a/libd3845f.so,!lib/x86/libd3845f.so,!lib/x86_64/libd3845f.so,!lib/arm64-v8a/libiproov-com-calcifer-lib.so,!lib/armeabi-v7a/libiproov-com-calcifer-lib.so,!lib/x86/libiproov-com-calcifer-lib.so,!lib/x86_64/libiproov-com-calcifer-lib.so,dummyfile
-dontwarn com.google.protobuf.**,com.tinder.*,okhttp3.*,okio.*,org.conscrypt.**,org.bouncycastle.**,org.openjsse.**




# Proguard rules that are applied to library integrators source code
# This set of proguard rules should be applied to all iProov modules
# Keep all private iproov classes from being double obsfuscated
-keep class com.iproov.sdk.core.** {
    <fields>;    <methods>;
}

-keep class * extends com.google.protobuf.GeneratedMessageLite {
    <fields>;    <methods>;
}

-keep class com.google.protobuf.** {
    <fields>;    <methods>;
}

-keep class com.iproov.sdk.core.new.do {
    int char;    int void;    int goto;    int break;    com.iproov.sdk.core.new.new this;    byte[] long;    byte[] float;    byte[] final;    int[] class;    int catch;    int const;    int super;    int throw;    <init>(java.io.InputStream,int[],byte[],int,boolean,int);
    <init>(java.io.InputStream,int[],byte[],int,boolean,int,byte);
    int read();
    int read(byte[],int,int);
    long skip(long);
    int available();
    boolean markSupported();
    void int();
    int for();
}

-keep class com.iproov.sdk.core.new.for {
    byte[] short;    int[] double;    int[] while;    int[] native;    int[] public;    int static;    int[] import;    byte[][] return;    int[] throws;    byte[] switch;    byte[] extends;    int default;    int boolean;    int continue;    int throw;    int abstract;    int private;    <init>(java.io.InputStream,int,byte[],byte[][]);
    <init>(java.io.InputStream,int,byte[],byte[][],byte);
    int read();
    int read(byte[]);
    int read(byte[],int,int);
    long skip(long);
    int available();
    void close();
    boolean markSupported();
    void mark(int);
    void reset();
    int new();
    void for(byte[],byte[]);
    void <clinit>();
}

-keep class com.iproov.sdk.core.new.else {
    int volatile;    char instanceof;    <init>();
}

-keep class com.iproov.sdk.core.new.byte {
    int char;    int void;    <init>();
}

-keep class com.iproov.sdk.core.new.char {
    int char;    char a;    char synchronized;    int void;    int try;    int static;    int break;    <init>();
}

-keep class com.iproov.sdk.core.new.case {
    int char;    <init>();
}

-keep class com.iproov.sdk.core.new.break {
    int void;    int try;    int implements;    <init>();
    void if(int[]);
    int do(int);
}

-keep class com.iproov.sdk.core.new.void {
    int void;    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.int.for {
    <init>();
}

-keep class com.iproov.sdk.api.exception.IProovException {
    <init>(java.lang.String,java.lang.Exception);
}

-keep class com.iproov.sdk.core.for.for {
    byte[] int(java.lang.String,byte[],byte[]);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.for.for {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.for.int$1 {
    byte[] new(byte[]);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.for.case {
    com.iproov.sdk.core.for.case INSTANCE;}

-keep class com.iproov.sdk.core.for.break {
    int int(java.lang.Object);
    int new(int);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.for.this {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.for.void {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.for.goto {
    com.iproov.sdk.core.for.goto INSTANCE;}

-keep class com.iproov.sdk.core.for.short {
    com.iproov.sdk.core.for.short bT;    com.iproov.sdk.core.for.short bX;    com.iproov.sdk.core.for.short ca;    com.iproov.sdk.core.for.short bY;    com.iproov.sdk.core.for.short bZ;    long f();
    java.util.List j();
    com.iproov.sdk.core.for.short[] values();
}

-keep class com.iproov.sdk.core.for.while {
    java.lang.Object for(java.lang.Object[],int,int,int);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.new {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.new$if {
    com.iproov.sdk.core.if.new$if INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.new$for {
    com.iproov.sdk.core.if.new$for INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.do {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.try {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.try$do {
    <init>(com.iproov.sdk.core.case.this,boolean,int,android.graphics.RectF,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.else {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.else$new {
    com.iproov.sdk.core.if.else$new INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.else$int {
    com.iproov.sdk.core.if.else$int INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.if.void {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.void$int {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.void$int$new {
    com.iproov.sdk.core.if.void$int$new INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.void$int$do {
    com.iproov.sdk.core.if.void$int$do INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.void$int$int {
    com.iproov.sdk.core.if.void$int$int INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.void$if

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.void$do

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.class$do

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.public {
    com.iproov.sdk.core.if.public$int dz;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.if.default {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.default$for {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.default$for$if {
    com.iproov.sdk.core.if.default$for$if INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.default$for$for {
    com.iproov.sdk.core.if.default$for$for INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.default$for$new {
    com.iproov.sdk.core.if.default$for$new INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.default$if

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.extends {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.finally {
    <init>(com.iproov.sdk.core.case.this,android.graphics.Bitmap,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.private {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.transient {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.transient$case {
    com.iproov.sdk.core.if.transient$case INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.transient$long {
    com.iproov.sdk.core.if.transient$long INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.strictfp {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.strictfp$new {
    com.iproov.sdk.core.if.strictfp$new INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.strictfp$for {
    com.iproov.sdk.core.if.strictfp$for INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.strictfp$int {
    com.iproov.sdk.core.if.strictfp$int INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.strictfp$if {
    com.iproov.sdk.core.if.strictfp$if INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.strictfp$case {
    com.iproov.sdk.core.if.strictfp$case INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.instanceof {
    com.iproov.sdk.core.if.instanceof$new new;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.instanceof$new {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.a

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.synchronized

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.b {
    <init>(boolean,boolean,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.if.b {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.e {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.e$int {
    com.iproov.sdk.core.if.e$int INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.e$new {
    com.iproov.sdk.core.if.e$new INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.e$for {
    com.iproov.sdk.core.if.e$for INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.f {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.f$for {
    com.iproov.sdk.core.if.f$for INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.f$new {
    com.iproov.sdk.core.if.f$new INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.g {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.g$if {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.g$if$new {
    com.iproov.sdk.core.if.g$if$new INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.g$if$if {
    <init>(java.lang.Boolean,java.lang.Integer,com.iproov.sdk.core.if.a,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Long,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.if.g$if$if {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.g$new {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.g$new$new {
    com.iproov.sdk.core.if.g$new$new INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.g$new$do {
    com.iproov.sdk.core.if.g$new$do INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.g$new$case {
    com.iproov.sdk.core.if.g$new$case INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.g$new$try {
    com.iproov.sdk.core.if.g$new$try INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.g$new$byte {
    com.iproov.sdk.core.if.g$new$byte INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.g$new$char {
    com.iproov.sdk.core.if.g$new$char INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.g$do {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.if.g$do$new {
    com.iproov.sdk.core.if.g$do$new INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.do.int

-keep class com.iproov.sdk.core.try.new

-keep class com.iproov.sdk.core.try.new$new {
    com.iproov.sdk.core.try.new$new fU;    com.iproov.sdk.core.try.new$new fY;    com.iproov.sdk.core.try.new$new fV;    com.iproov.sdk.core.try.new$new ga;    com.iproov.sdk.core.try.new$new gc;    com.iproov.sdk.core.try.new$new gb;    com.iproov.sdk.core.try.new$new fZ;    com.iproov.sdk.core.try.new$new gd;    com.iproov.sdk.core.try.new$new gf;    com.iproov.sdk.core.try.new$new ge;    com.iproov.sdk.core.try.new$new gg;    com.iproov.sdk.core.try.new$new gh;    com.iproov.sdk.core.try.new$new gi;    com.iproov.sdk.core.try.new$new gj;    com.iproov.sdk.core.try.new$new gn;    com.iproov.sdk.core.try.new$new gm;    com.iproov.sdk.core.try.new$new gl;    com.iproov.sdk.core.try.new$new gk;    com.iproov.sdk.core.try.new$new gs;    com.iproov.sdk.core.try.new$new gp;    com.iproov.sdk.core.try.new$new gr;    com.iproov.sdk.core.try.new$new gq;    com.iproov.sdk.core.try.new$new go;    com.iproov.sdk.core.try.new$new gt;    com.iproov.sdk.core.try.new$new gw;    com.iproov.sdk.core.try.new$new gx;    com.iproov.sdk.core.try.new$new gu;    com.iproov.sdk.core.try.new$new gv;    com.iproov.sdk.core.try.new$new gz;    com.iproov.sdk.core.try.new$new gC;    com.iproov.sdk.core.try.new$new gB;    com.iproov.sdk.core.try.new$new gA;    com.iproov.sdk.core.try.new$new gy;    com.iproov.sdk.core.try.new$new gH;    com.iproov.sdk.core.try.new$new gE;    com.iproov.sdk.core.try.new$new gF;    com.iproov.sdk.core.try.new$new gD;    com.iproov.sdk.core.try.new$new gG;    com.iproov.sdk.core.try.new$new gL;    com.iproov.sdk.core.try.new$new gM;    com.iproov.sdk.core.try.new$new gK;    com.iproov.sdk.core.try.new$new gJ;    com.iproov.sdk.core.try.new$new gI;    com.iproov.sdk.core.try.new$new gP;    com.iproov.sdk.core.try.new$new gQ;    com.iproov.sdk.core.try.new$new gR;    com.iproov.sdk.core.try.new$new gO;    com.iproov.sdk.core.try.new$new gN;    com.iproov.sdk.core.try.new$new gV;    com.iproov.sdk.core.try.new$new gS;    com.iproov.sdk.core.try.new$new gT;    com.iproov.sdk.core.try.new$new gU;    com.iproov.sdk.core.try.new$new gW;    com.iproov.sdk.core.try.new$new hb;    com.iproov.sdk.core.try.new$new gY;    com.iproov.sdk.core.try.new$new gX;    com.iproov.sdk.core.try.new$new gZ;    com.iproov.sdk.core.try.new$new ha;    com.iproov.sdk.core.try.new$new hg;    com.iproov.sdk.core.try.new$new hc;    com.iproov.sdk.core.try.new$new he;    com.iproov.sdk.core.try.new$new hd;    com.iproov.sdk.core.try.new$new hf;    com.iproov.sdk.core.try.new$new hj;    com.iproov.sdk.core.try.new$new hh;    com.iproov.sdk.core.try.new$new hi;    com.iproov.sdk.core.try.new$new hl;    com.iproov.sdk.core.try.new$new hk;    com.iproov.sdk.core.try.new$new hp;    com.iproov.sdk.core.try.new$new ho;    com.iproov.sdk.core.try.new$new hq;    com.iproov.sdk.core.try.new$new hm;    com.iproov.sdk.core.try.new$new hn;    com.iproov.sdk.core.try.new$new ht;    com.iproov.sdk.core.try.new$new hv;    com.iproov.sdk.core.try.new$new hr;    com.iproov.sdk.core.try.new$new hs;    com.iproov.sdk.core.try.new$new hu;    com.iproov.sdk.core.try.new$new hy;    com.iproov.sdk.core.try.new$new hz;    com.iproov.sdk.core.try.new$new hw;    com.iproov.sdk.core.try.new$new hA;    com.iproov.sdk.core.try.new$new hx;    com.iproov.sdk.core.try.new$new hF;    com.iproov.sdk.core.try.new$new hE;    com.iproov.sdk.core.try.new$new hB;    com.iproov.sdk.core.try.new$new hD;    com.iproov.sdk.core.try.new$new hC;    com.iproov.sdk.core.try.new$new hJ;    com.iproov.sdk.core.try.new$new hI;    com.iproov.sdk.core.try.new$new hK;    com.iproov.sdk.core.try.new$new hH;    com.iproov.sdk.core.try.new$new hG;    com.iproov.sdk.core.try.new$new hM;    com.iproov.sdk.core.try.new$new hL;    com.iproov.sdk.core.try.new$new[] values();
}

-keep class com.iproov.sdk.core.try.do {
    com.iproov.sdk.core.try.do$for for;    int $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$d;    int $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$c;    <init>();
    java.util.Set if(java.util.Set,int);
    void <clinit>();
    java.lang.Object for(java.lang.Object[],int,int,int);
}

-keep class com.iproov.sdk.core.try.do$for {
    java.lang.String eg();
    int eh();
    java.lang.String else(java.lang.String);
    java.lang.Object for(java.lang.Object[],int,int,int);
}

-keepclassmembers,allowshrinking,allowobfuscation class com.iproov.sdk.core.try.do$for {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.case.else {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.case.void {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.case.float {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.case.catch

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.case.short {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.char.do

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.char.if

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.char.int {
    com.iproov.sdk.core.char.int INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.char.new

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.char.case {
    <init>(com.iproov.sdk.core.char.char,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.char.case$for {
    com.iproov.sdk.core.char.case$for INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.char.case$int {
    com.iproov.sdk.core.char.case$int INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.char.case$new {
    com.iproov.sdk.core.char.case$new INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.byte.int

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.byte.for {
    com.iproov.sdk.core.byte.for$new new;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.byte.for$new {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.long.else {
    com.iproov.sdk.core.long.else$new new;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.long.else$4 {
    java.lang.Boolean jA();
    java.lang.Object invoke();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.long.else$new {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.goto.if {
    <init>(com.iproov.sdk.core.if.super,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.goto.do {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.goto.new {
    <init>(java.lang.String,java.security.KeyStore,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.goto.for {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.goto.int {
    com.iproov.sdk.core.goto.int$do do;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.goto.int {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.goto.int$do {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.float.for {
    com.iproov.sdk.core.float.for$int int;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.float.for {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.float.for$int {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.float.int

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.float.if {
    com.iproov.sdk.core.float.if$int int;    <init>(com.iproov.sdk.core.catch.do,com.iproov.sdk.core.const.do,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.float.if$int {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.float.new$for {
    com.iproov.sdk.core.float.new$for$for for;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.float.new$for$for {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.float.case {
    com.iproov.sdk.core.float.case nd;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.float.else {
    com.iproov.sdk.core.float.else INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.class.do {
    com.iproov.sdk.core.class.do INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.class.if {
    com.iproov.sdk.core.class.if INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.const.int {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.while.if {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.throw.if

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.throw.new {
    com.iproov.sdk.core.throw.new$for for;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.throw.new$for {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.double.new {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.import.if$if

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.native.for {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.int {
    com.iproov.sdk.core.native.int$do do;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.native.int {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.int$do {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.new {
    com.iproov.sdk.core.native.new$int int;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.native.new {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.new$int {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.if {
    com.iproov.sdk.core.native.if$if if;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.native.if {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.if$if {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.do {
    com.iproov.sdk.core.native.do$do do;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.native.do {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.do$do {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.byte {
    com.iproov.sdk.core.native.byte$do do;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.byte$do {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.try {
    com.iproov.sdk.core.native.try$if if;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.native.try {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.try$if {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.case {
    com.iproov.sdk.core.native.case$int int;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.native.case {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.case$int {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.char {
    com.iproov.sdk.core.native.char$do do;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.native.char {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.char$do {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.native.break {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.long {
    com.iproov.sdk.core.native.long$do do;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.native.long {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.long$do {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.this {
    com.iproov.sdk.core.native.this$for for;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.native.this {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.this$for {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.goto {
    com.iproov.sdk.core.native.goto$do do;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.native.goto {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.goto$do {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.void {
    com.iproov.sdk.core.native.void$int int;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.native.void {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.native.void$int {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.static.int {
    com.iproov.sdk.core.static.int$int int;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.static.int$int {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.static.char {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.public.new {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.public.do {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.public.int {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.boolean.int {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.do {
    <init>(android.content.Context,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableStateFlow,com.iproov.sdk.core.e.if,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,com.iproov.sdk.core.boolean.extends$do,com.iproov.sdk.core.throws.if,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.if {
    com.iproov.sdk.core.boolean.if$new new;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.if$new {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.byte {
    <init>(kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.byte$if

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.try {
    com.iproov.sdk.core.boolean.try$if if;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.boolean.try {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.try$if {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.else {
    com.iproov.sdk.core.boolean.else$for for;    <init>(android.content.Context,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,com.iproov.sdk.core.e.int,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.else$for {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.else$int

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.case {
    <init>(android.content.Context,com.iproov.sdk.core.case.break,com.iproov.sdk.core.if.byte,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.break {
    com.iproov.sdk.core.boolean.break$do do;    <init>(android.content.Context,com.iproov.sdk.core.throw.do,com.iproov.sdk.core.throw.new,kotlinx.coroutines.flow.MutableSharedFlow,com.iproov.sdk.core.t.goto,kotlinx.coroutines.flow.MutableSharedFlow,com.iproov.sdk.core.e.if,com.iproov.sdk.core.e.else,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.break$do {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.goto {
    <init>(android.content.Context,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.this {
    com.iproov.sdk.core.boolean.this$do do;    <init>(android.content.Context,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,com.iproov.sdk.core.if.super,com.iproov.sdk.core.boolean.extends$break,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,com.iproov.sdk.core.e.else,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.StateFlow,com.iproov.sdk.core.if.interface,com.iproov.sdk.core.if.b,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.this$do {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.this$if

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.boolean.this$new$3 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long {
    com.iproov.sdk.core.boolean.long$if uE;    <init>(android.content.Context,com.iproov.sdk.core.if.super,com.iproov.sdk.core.if.public,com.iproov.sdk.core.if.while,com.iproov.sdk.core.if.throws,com.iproov.sdk.core.if.long,com.iproov.sdk.core.if.throw,com.iproov.sdk.core.if.break,com.iproov.sdk.core.if.synchronized,com.iproov.sdk.core.char.new,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.flow.SharedFlow,com.iproov.sdk.core.e.if,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.SharedFlow,com.iproov.sdk.core.t.goto,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$1 {
    void int(com.iproov.sdk.core.finally.if$int);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$if {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$new {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$new$new {
    com.iproov.sdk.core.boolean.long$new$new INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$for {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$for$for {
    com.iproov.sdk.core.boolean.long$for$for INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$do {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$do$int {
    com.iproov.sdk.core.boolean.long$do$int INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$do$for {
    com.iproov.sdk.core.boolean.long$do$for INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$8 {
    void if(com.tinder.StateMachine$GraphBuilder);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$8$1 {
    void new(com.tinder.StateMachine$GraphBuilder$StateDefinitionBuilder);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$8$1$1 {
    com.tinder.StateMachine$Graph$State$TransitionTo int(com.iproov.sdk.core.boolean.long$do$int,com.iproov.sdk.core.boolean.long$for$new);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$8$1$4 {
    com.tinder.StateMachine$Graph$State$TransitionTo for(com.iproov.sdk.core.boolean.long$do$int,com.iproov.sdk.core.boolean.long$for$int);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$8$1$5 {
    com.tinder.StateMachine$Graph$State$TransitionTo int(com.iproov.sdk.core.boolean.long$do$int,com.iproov.sdk.core.boolean.long$for$for);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$8$2 {
    void if(com.tinder.StateMachine$GraphBuilder$StateDefinitionBuilder);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.boolean.long$8$2 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$8$2$4 {
    com.tinder.StateMachine$Graph$State$TransitionTo do(com.iproov.sdk.core.boolean.long$do$for,com.iproov.sdk.core.boolean.long$for$do);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$8$2$3 {
    com.tinder.StateMachine$Graph$State$TransitionTo new(com.iproov.sdk.core.boolean.long$do$for,com.iproov.sdk.core.boolean.long$for$int);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.long$8$3 {
    void do(com.tinder.StateMachine$Transition);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.boolean.catch$for {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.float {
    <init>(android.content.Context,com.iproov.sdk.core.if.super,com.iproov.sdk.core.if.long,com.iproov.sdk.core.if.while,com.iproov.sdk.core.char.new,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.class {
    com.iproov.sdk.core.boolean.class$int int;    <init>(android.content.Context,com.iproov.sdk.core.if.super,com.iproov.sdk.core.if.public,com.iproov.sdk.core.e.case,com.iproov.sdk.core.if.float,com.iproov.sdk.core.if.static,com.iproov.sdk.core.if.const,com.iproov.sdk.core.if.catch,com.iproov.sdk.core.if.synchronized,com.iproov.sdk.core.char.new,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.class$int {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.final {
    com.iproov.sdk.core.boolean.final$new new;    <init>(android.content.Context,kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.SharedFlow,com.iproov.sdk.core.if.super,com.iproov.sdk.core.boolean.extends$break,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,com.iproov.sdk.core.e.else,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.StateFlow,com.iproov.sdk.core.if.interface,com.iproov.sdk.core.if.b,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.final$new {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.final$do

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.boolean.final$for$3 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.double {
    <init>(android.content.Context,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.SharedFlow,com.iproov.sdk.core.throws.if,com.iproov.sdk.core.boolean.extends$break,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.while {
    <init>(com.iproov.sdk.core.e.case,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.boolean.short {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.throw {
    <init>(android.content.Context,com.iproov.sdk.core.e.new,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.super {
    <init>(android.content.Context,com.iproov.sdk.core.final.if,com.iproov.sdk.core.boolean.extends$break,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.super$do {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.super$do$if {
    com.iproov.sdk.core.boolean.super$do$if INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.public

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.return {
    <init>(com.iproov.sdk.core.if.native,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.static {
    com.iproov.sdk.core.boolean.static$for for;    <init>(android.content.Context,com.iproov.sdk.core.boolean.native,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.static$for {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.boolean.static$if {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.boolean {
    <init>(com.iproov.sdk.core.final.int,com.iproov.sdk.api.IProov$Options,java.lang.String,java.lang.String,com.iproov.sdk.core.for.void,kotlinx.coroutines.flow.StateFlow,kotlinx.coroutines.flow.StateFlow,kotlin.jvm.functions.Function4,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.boolean$int$4 {
    void nM();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.extends

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.extends$int

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.extends$do

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.extends$for {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.extends$for$new {
    <init>(com.iproov.sdk.core.boolean.extends$char,int,int,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.boolean.extends$for$new {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.extends$for$int {
    <init>(com.iproov.sdk.core.boolean.extends$else,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.boolean.extends$for$int {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.extends$try {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.extends$case {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.extends$char

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.extends$else

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.extends$byte

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.extends$break

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.extends$break$for

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.extends$break$do

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.boolean.switch {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.default {
    <init>(android.content.Context,java.lang.String,java.lang.String,com.iproov.sdk.core.boolean.extends$byte,kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.StateFlow,com.iproov.sdk.core.if.super,com.iproov.sdk.core.e.char,com.iproov.sdk.core.e.new,kotlinx.coroutines.Job,com.iproov.sdk.core.abstract.case,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.boolean.default$5 {
    void new(com.iproov.sdk.core.continue.int);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.boolean.throws {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.do$2 {
    com.iproov.sdk.core.b.int oM();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.int$5 {
    com.iproov.sdk.core.boolean.char oX();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.int$2 {
    com.iproov.sdk.core.boolean.case pa();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.int$1 {
    com.iproov.sdk.core.boolean.break oZ();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.int$3 {
    com.iproov.sdk.core.boolean.float pd();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.int$4 {
    com.iproov.sdk.core.boolean.try pg();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.default.int$4 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.int$9 {
    com.iproov.sdk.core.boolean.double pf();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.int$6 {
    com.iproov.sdk.core.boolean.while pe();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.int$10 {
    com.iproov.sdk.core.boolean.throw pc();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.int$7 {
    com.iproov.sdk.core.boolean.throws pj();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.default.int$7 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.int$8 {
    com.iproov.sdk.core.switch.else ph();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.new$1 {
    com.iproov.sdk.core.boolean.do pz();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.new$5 {
    com.iproov.sdk.core.boolean.new pw();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.new$3 {
    android.content.Context px();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.new$4 {
    com.iproov.sdk.core.boolean.byte pA();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.new$2 {
    com.iproov.sdk.core.throws.if py();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.default.new$2 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.new$8 {
    com.iproov.sdk.core.boolean.else pB();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.new$9 {
    com.iproov.sdk.core.boolean.short pC();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.default.new$9 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.new$7 {
    com.iproov.sdk.core.boolean.super pD();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.new$6 {
    com.iproov.sdk.core.boolean.default pF();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.default.new$10 {
    com.iproov.sdk.core.m.for pE();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.switch.int {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.switch.do {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.switch.new {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.switch.if {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.switch.byte {
    com.iproov.sdk.core.switch.byte$if if;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.switch.byte {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.switch.byte$if {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.switch.byte$1 {
    void qt();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.extends.int {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.extends.break {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.private.new {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.continue.for {
    <init>();
}

-keep class com.iproov.sdk.core.continue.new {
    java.lang.Object for(java.lang.Object[],int,int,int);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.continue.int

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.continue.int$if

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.finally.new {
    <init>(com.iproov.sdk.core.if.native,kotlinx.coroutines.flow.MutableStateFlow,kotlinx.coroutines.flow.MutableSharedFlow,kotlinx.coroutines.flow.SharedFlow,kotlinx.coroutines.Job,com.iproov.sdk.core.package.if,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.finally.for {
    com.iproov.sdk.core.finally.for$new new;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.finally.for$new {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.finally.if

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.finally.if$for

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.finally.do

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.finally.try$new {
    com.iproov.sdk.core.finally.try$new$if if;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.finally.try$new$if {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.finally.goto {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.package.do {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.abstract.for {
    com.iproov.sdk.core.abstract.for INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.abstract.do {
    com.iproov.sdk.core.abstract.do INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.abstract.try {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.abstract.char {
    com.iproov.sdk.core.abstract.char$int int;    <init>(android.content.Context,com.iproov.sdk.core.if.super,java.lang.String,java.lang.String,com.iproov.sdk.core.boolean.extends$byte,com.iproov.sdk.core.e.char,com.iproov.sdk.core.abstract.byte$for,com.iproov.sdk.core.instanceof.int,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.abstract.char$int {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.abstract.char$3 {
    void rW();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.abstract.char$2 {
    void for(java.lang.Exception);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.abstract.char$if {
    void transient(java.lang.String);
    java.lang.Object invoke(java.lang.Object);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.abstract.char$5 {
    void int(com.iproov.sdk.core.transient.if);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.abstract.char$4 {
    void new(com.iproov.sdk.core.transient.if);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.abstract.char$1 {
    void do(com.iproov.sdk.core.transient.if);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.abstract.char$8 {
    void do(com.iproov.sdk.core.transient.if$int);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.abstract.char$8 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.abstract.char$7 {
    void new(com.iproov.sdk.core.transient.if$int);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.abstract.char$7 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.abstract.char$9 {
    void for(com.iproov.sdk.core.transient.if$int);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.abstract.char$6 {
    void do(java.lang.Exception);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.abstract.char$10 {
    void int(com.iproov.sdk.core.transient.if$int);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.abstract.char$10 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.abstract.char$15 {
    void if(com.iproov.sdk.core.transient.if$int);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.protected.for {
    com.iproov.sdk.core.protected.for$int int;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.protected.for$int {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.protected.new$do {
    com.iproov.sdk.core.protected.new$do INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.protected.new$int {
    com.iproov.sdk.core.protected.new$int INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.transient.for$int {
    com.iproov.sdk.core.transient.for$int INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.transient.int {
    com.iproov.sdk.core.transient.int$for for;    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.transient.int$for {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.transient.if$for {
    com.iproov.sdk.core.transient.if$for INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.AckMessageOuterClass$AckMessage$new

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientAbortOuterClass$ClientAbort$new

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientHandshakeOuterClass$ClientHandshake$for

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientLogOuterClass$ClientLog$int

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientLogOuterClass$if$3 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientLuxOuterClass$ClientLux$int

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientMetadataOuterClass$ClientMetadata$for

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientMotion$for$2 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientMotion$ClaimStateSample$new

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientMotion$if

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientMotion$ClaimStateSeries$if

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientMotion$ClientMotionPacket$int

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientMotion$new

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientMotion$TransactionClientMotion$for

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientMotion$VectorDataSample$if

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientMotion$int

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientMotion$VectorSeries$new

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientQualityFrameOuterClass$ClientQualityFrame$new

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientStartOuterClass$ClientStart$int

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientTelemetryOuterClass$ClientTelemetry$for

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientVideoOuterClass$ClientVideo$int

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientVideoOuterClass$RichterMotion$do

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.ClientVideoOuterClass$Vector3D$new

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.EdgeAbortOuterClass$EdgeAbort$for

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.EdgeProgressUpdateOuterClass$EdgeProgressUpdate$for

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.EdgeResultOuterClass$EdgeResult$if

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.EdgeVideoOuterClass$EdgeVideo$do

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.network.model.proto.EnvelopeOuterClass$Envelope$new

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.network.model.proto.EnvelopeOuterClass$if$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.network.model.proto.EnvelopeOuterClass$int$4 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.strictfp.int {
    com.iproov.sdk.core.strictfp.int INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.strictfp.for {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.interface.if {
    com.iproov.sdk.core.interface.if INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.interface.for {
    com.iproov.sdk.core.interface.for INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.volatile.if {
    com.iproov.sdk.core.volatile.if INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.a.if {
    <init>(com.iproov.sdk.core.boolean.extends$byte,int,kotlin.jvm.functions.Function1,com.iproov.sdk.core.strictfp.new,com.iproov.sdk.core.strictfp.if,com.iproov.sdk.core.synchronized.case,com.iproov.sdk.core.synchronized.byte,com.iproov.sdk.core.synchronized.do,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.a.if$2 {
    void if(com.iproov.sdk.core.transient.if);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.a.if$3 {
    void tb();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.a.int {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.instanceof.if {
    <init>(java.lang.String,com.iproov.sdk.core.boolean.extends$byte,com.iproov.sdk.core.implements.int,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.instanceof.do {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.synchronized.if {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.synchronized.int {
    <init>(long,com.iproov.sdk.core.synchronized.void,kotlin.jvm.functions.Function0,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.synchronized.int$do {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.synchronized.int$4 {
    void to();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.synchronized.new {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.synchronized.try {
    <init>(long,com.iproov.sdk.core.synchronized.this,com.iproov.sdk.core.synchronized.break,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.synchronized.try$int {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.synchronized.try$if {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.synchronized.goto {
    com.iproov.sdk.core.synchronized.goto INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.implements.int {
    com.iproov.sdk.core.implements.int$int int;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.implements.int$int {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.b.int {
    com.iproov.sdk.core.b.int$for Lt;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.b.int$for {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.b.int$1 {
    java.lang.CharSequence C(int);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.b.int$1 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.d.for

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.c.do

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.f.if

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.l.if {
    <init>(java.lang.Object,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.l.if {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.l.new {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.l.for {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.l.do {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.l.try {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.l.char {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.j.for

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.k.int {
    com.iproov.sdk.core.k.int$new new;    <init>(com.iproov.sdk.core.e.try,com.iproov.sdk.core.i.char,com.iproov.sdk.core.f.if,java.util.HashSet,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.k.int$new {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.h.if

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.q.case {
    com.iproov.sdk.core.q.case$int int;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.q.case$int {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.n.for {
    <init>(java.lang.String,java.util.Set,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.n.do {
    <init>(java.lang.String,com.iproov.sdk.core.l.if,java.util.Set,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.n.int {
    <init>(java.lang.String,com.iproov.sdk.core.l.for,com.iproov.sdk.core.c.do,com.iproov.sdk.core.c.do,java.util.Set,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.n.else {
    <init>(java.lang.String,com.iproov.sdk.core.l.do,java.util.Set,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.n.byte {
    <init>(java.lang.String,com.iproov.sdk.core.l.char,java.util.Set,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.n.char {
    <init>(java.lang.String,kotlinx.coroutines.flow.StateFlow,com.iproov.sdk.core.n.char$if,com.iproov.sdk.core.n.char$int,java.util.Set,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.n.char$if

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.n.char$int

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.n.long {
    <init>(java.lang.String,com.iproov.sdk.core.l.try,java.util.Set,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.p.do {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.p.new {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.p.new$1 {
    android.graphics.PathMeasure cC_();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.p.for {
    com.iproov.sdk.core.p.for$if if;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.p.for$if {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.p.for$for$1 {
    void I(int);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.p.for$for$5 {
    void double(float);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.p.for$for$2 {
    void cX_(android.graphics.PointF);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.p.for$for$3 {
    void super(float);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.p.for$for$4 {
    void K(int);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.p.for$for$7 {
    void short(float);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.p.for$2 {
    void throw(float);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.p.for$3 {
    void while(float);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.p.int {
    com.iproov.sdk.core.p.int$for for;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.p.int$for {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.p.int$4 {
    android.animation.ValueAnimator dm_();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for {
    <init>(android.content.Context,com.iproov.sdk.core.if.continue,java.lang.String,com.iproov.sdk.core.if.int,com.iproov.sdk.core.if.char,com.iproov.sdk.core.if.return,com.iproov.sdk.core.if.super,com.iproov.sdk.core.if.double,com.iproov.sdk.core.if.volatile,com.iproov.sdk.core.for.new,com.iproov.sdk.core.c.for,com.iproov.sdk.core.if.final,com.iproov.sdk.core.if.static,com.iproov.sdk.core.if.throw,com.iproov.sdk.core.if.goto,com.iproov.sdk.core.if.interface,kotlinx.coroutines.Job,kotlinx.coroutines.CoroutineDispatcher,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$int {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$int$new {
    com.iproov.sdk.core.m.for$int$new INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$int$byte {
    com.iproov.sdk.core.m.for$int$byte INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$int$goto {
    com.iproov.sdk.core.m.for$int$goto INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$int$break {
    com.iproov.sdk.core.m.for$int$break INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$int$void {
    com.iproov.sdk.core.m.for$int$void INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$int$this {
    com.iproov.sdk.core.m.for$int$this INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$new {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$new$new {
    com.iproov.sdk.core.m.for$new$new INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$new$do {
    com.iproov.sdk.core.m.for$new$do INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$new$char {
    com.iproov.sdk.core.m.for$new$char INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$new$try {
    com.iproov.sdk.core.m.for$new$try INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$new$else {
    com.iproov.sdk.core.m.for$new$else INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$new$this {
    com.iproov.sdk.core.m.for$new$this INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$if {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$if$for {
    com.iproov.sdk.core.m.for$if$for INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$if$new {
    com.iproov.sdk.core.m.for$if$new INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$if$if {
    com.iproov.sdk.core.m.for$if$if INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$if$int {
    com.iproov.sdk.core.m.for$if$int INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$if$do {
    com.iproov.sdk.core.m.for$if$do INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$if$byte {
    com.iproov.sdk.core.m.for$if$byte INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$if$char {
    com.iproov.sdk.core.m.for$if$char INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14 {
    void new(com.tinder.StateMachine$GraphBuilder);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$4 {
    void int(com.tinder.StateMachine$GraphBuilder$StateDefinitionBuilder);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.m.for$14$4 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$4$4 {
    com.tinder.StateMachine$Graph$State$TransitionTo new(com.iproov.sdk.core.m.for$if$do,com.iproov.sdk.core.m.for$new$char);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$4$2 {
    com.tinder.StateMachine$Graph$State$TransitionTo if(com.iproov.sdk.core.m.for$if$do,com.iproov.sdk.core.m.for$new$if);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$4$3 {
    com.tinder.StateMachine$Graph$State$TransitionTo int(com.iproov.sdk.core.m.for$if$do,com.iproov.sdk.core.m.for$new$int);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$2 {
    void do(com.tinder.StateMachine$GraphBuilder$StateDefinitionBuilder);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.m.for$14$2 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$2$5 {
    com.tinder.StateMachine$Graph$State$TransitionTo do(com.iproov.sdk.core.m.for$if$byte,com.iproov.sdk.core.m.for$new$else);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$2$4 {
    com.tinder.StateMachine$Graph$State$TransitionTo for(com.iproov.sdk.core.m.for$if$byte,com.iproov.sdk.core.m.for$new$if);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$2$3 {
    com.tinder.StateMachine$Graph$State$TransitionTo int(com.iproov.sdk.core.m.for$if$byte,com.iproov.sdk.core.m.for$new$int);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$1 {
    void for(com.tinder.StateMachine$GraphBuilder$StateDefinitionBuilder);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.m.for$14$1 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$1$2 {
    com.tinder.StateMachine$Graph$State$TransitionTo do(com.iproov.sdk.core.m.for$if$if,com.iproov.sdk.core.m.for$new$for);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$1$3 {
    com.tinder.StateMachine$Graph$State$TransitionTo int(com.iproov.sdk.core.m.for$if$if,com.iproov.sdk.core.m.for$new$if);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$1$5 {
    com.tinder.StateMachine$Graph$State$TransitionTo do(com.iproov.sdk.core.m.for$if$if,com.iproov.sdk.core.m.for$new$int);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$3 {
    void char(com.tinder.StateMachine$GraphBuilder$StateDefinitionBuilder);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.m.for$14$3 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$3$3 {
    com.tinder.StateMachine$Graph$State$TransitionTo do(com.iproov.sdk.core.m.for$if$new,com.iproov.sdk.core.m.for$new$new);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$3$1 {
    com.tinder.StateMachine$Graph$State$TransitionTo new(com.iproov.sdk.core.m.for$if$new,com.iproov.sdk.core.m.for$new$if);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$3$2 {
    com.tinder.StateMachine$Graph$State$TransitionTo for(com.iproov.sdk.core.m.for$if$new,com.iproov.sdk.core.m.for$new$int);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$5 {
    void byte(com.tinder.StateMachine$GraphBuilder$StateDefinitionBuilder);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.m.for$14$5 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$5$4 {
    com.tinder.StateMachine$Graph$State$TransitionTo for(com.iproov.sdk.core.m.for$if$for,com.iproov.sdk.core.m.for$new$do);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$5$1 {
    com.tinder.StateMachine$Graph$State$TransitionTo int(com.iproov.sdk.core.m.for$if$for,com.iproov.sdk.core.m.for$new$case);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$5$2 {
    com.tinder.StateMachine$Graph$State$TransitionTo for(com.iproov.sdk.core.m.for$if$for,com.iproov.sdk.core.m.for$new$this);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$5$5 {
    com.tinder.StateMachine$Graph$State$TransitionTo int(com.iproov.sdk.core.m.for$if$for,com.iproov.sdk.core.m.for$new$if);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$5$3 {
    com.tinder.StateMachine$Graph$State$TransitionTo new(com.iproov.sdk.core.m.for$if$for,com.iproov.sdk.core.m.for$new$int);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$5$9 {
    com.tinder.StateMachine$Graph$State$TransitionTo for(com.iproov.sdk.core.m.for$if$for,com.iproov.sdk.core.m.for$new$byte);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$8 {
    void try(com.tinder.StateMachine$GraphBuilder$StateDefinitionBuilder);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.m.for$14$8 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$8$2 {
    com.tinder.StateMachine$Graph$State$TransitionTo do(com.iproov.sdk.core.m.for$if$char,com.iproov.sdk.core.m.for$new$byte);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$8$3 {
    com.tinder.StateMachine$Graph$State$TransitionTo do(com.iproov.sdk.core.m.for$if$char,com.iproov.sdk.core.m.for$new$try);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$8$5 {
    com.tinder.StateMachine$Graph$State$TransitionTo do(com.iproov.sdk.core.m.for$if$char,com.iproov.sdk.core.m.for$new$if);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$8$4 {
    com.tinder.StateMachine$Graph$State$TransitionTo for(com.iproov.sdk.core.m.for$if$char,com.iproov.sdk.core.m.for$new$int);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$8$1 {
    com.tinder.StateMachine$Graph$State$TransitionTo do(com.iproov.sdk.core.m.for$if$char,com.iproov.sdk.core.m.for$new$case);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$10 {
    void case(com.tinder.StateMachine$GraphBuilder$StateDefinitionBuilder);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.m.for$14$10 {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.for$14$9 {
    void if(com.tinder.StateMachine$Transition);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.if

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.new {
    com.iproov.sdk.core.m.new$do do;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.new$do {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.do {
    <init>(boolean,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.do$new {
    com.iproov.sdk.core.m.do$new INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.do$if {
    com.iproov.sdk.core.m.do$if INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.m.do$try {
    com.iproov.sdk.core.m.do$try INSTANCE;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.t.do {
    com.iproov.sdk.core.t.do QX;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.t.do$4 {
    void import(float);
}

-keep class com.iproov.sdk.core.t.int {
    java.lang.Object for(java.lang.Object[],int,int,int);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.t.int {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.t.if

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.t.if$5 {
    void new(java.lang.Throwable);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.t.for {
    <init>();
}

-keep class com.iproov.sdk.core.t.case {
    java.lang.Object for(java.lang.Object[],int,int,int);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.t.case {
    <init>();
}

-keep class com.iproov.sdk.core.t.else {
    java.lang.Object for(java.lang.Object[],int,int,int);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.t.try {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.t.void {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.t.goto {
    <init>(int,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.t.goto {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.t.long {
    com.iproov.sdk.core.t.long$int int;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.t.long$int {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.t.final {
    com.iproov.sdk.core.t.final$for for;}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.t.final$for {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.t.double {
    com.iproov.sdk.core.t.double$if if;}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.t.double {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.t.double$if {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowoptimization,allowobfuscation class com.iproov.sdk.core.t.super {
    <init>();
}

-keep,allowshrinking,allowobfuscation class com.iproov.sdk.core.t.public {
    com.iproov.sdk.core.t.public INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class android.support.v4.app.INotificationSideChannel$Default {
    <init>();
}

-keepclassmembers,allowobfuscation class android.support.v4.app.INotificationSideChannel$Stub {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class android.support.v4.app.INotificationSideChannel$Stub {
    java.lang.String DESCRIPTOR;    int TRANSACTION_notify;    int TRANSACTION_cancel;    int TRANSACTION_cancelAll;    android.support.v4.app.INotificationSideChannel asInterface(android.os.IBinder);
    android.os.IBinder asBinder();
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int);
    boolean setDefaultImpl(android.support.v4.app.INotificationSideChannel);
    android.support.v4.app.INotificationSideChannel getDefaultImpl();
}

-keep class android.support.v4.app.INotificationSideChannel

-keepclassmembers,allowobfuscation class android.support.v4.app.RemoteActionCompatParcelizer {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class android.support.v4.app.RemoteActionCompatParcelizer {
    androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel);
    void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel);
}

-keep class androidx.versionedparcelable.VersionedParcel

-keepclassmembers,allowobfuscation class android.support.v4.graphics.drawable.IconCompatParcelizer {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class android.support.v4.graphics.drawable.IconCompatParcelizer {
    androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel);
    void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel);
}

-keep class androidx.versionedparcelable.VersionedParcel

-keepclassmembers,allowoptimization,allowobfuscation class android.support.v4.os.IResultReceiver$Default {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class android.support.v4.os.IResultReceiver$Stub {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class android.support.v4.os.ResultReceiver {
    boolean mLocal;    android.os.Handler mHandler;}

-keepclassmembers,allowoptimization,allowobfuscation class android.support.v4.os.ResultReceiver$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class android.support.v4.os.ResultReceiver$MyResultReceiver {
    android.support.v4.os.ResultReceiver this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class android.support.v4.os.ResultReceiver$MyRunnable {
    int mResultCode;    android.os.Bundle mResultData;    android.support.v4.os.ResultReceiver this$0;}

-keepclassmembers,allowobfuscation class androidx.activity.ComponentActivity {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.ComponentActivity {
    java.lang.String ACTIVITY_RESULT_TAG;    androidx.activity.contextaware.ContextAwareHelper mContextAwareHelper;    androidx.lifecycle.LifecycleRegistry mLifecycleRegistry;    androidx.savedstate.SavedStateRegistryController mSavedStateRegistryController;    androidx.lifecycle.ViewModelStore mViewModelStore;    androidx.lifecycle.ViewModelProvider$Factory mDefaultFactory;    androidx.activity.OnBackPressedDispatcher mOnBackPressedDispatcher;    int mContentLayoutId;    java.util.concurrent.atomic.AtomicInteger mNextLocalRequestCode;    androidx.activity.result.ActivityResultRegistry mActivityResultRegistry;    <init>(int);
    void onCreate(android.os.Bundle);
    void onSaveInstanceState(android.os.Bundle);
    java.lang.Object onRetainNonConfigurationInstance();
    java.lang.Object onRetainCustomNonConfigurationInstance();
    java.lang.Object getLastCustomNonConfigurationInstance();
    void setContentView(int);
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams);
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams);
    void initViewTreeOwners();
    android.content.Context peekAvailableContext();
    void addOnContextAvailableListener(androidx.activity.contextaware.OnContextAvailableListener);
    void removeOnContextAvailableListener(androidx.activity.contextaware.OnContextAvailableListener);
    androidx.lifecycle.Lifecycle getLifecycle();
    androidx.lifecycle.ViewModelStore getViewModelStore();
    void ensureViewModelStore();
    androidx.lifecycle.ViewModelProvider$Factory getDefaultViewModelProviderFactory();
    void onBackPressed();
    androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher();
    androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
    void startActivityForResult(android.content.Intent,int);
    void startActivityForResult(android.content.Intent,int,android.os.Bundle);
    void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int);
    void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle);
    void onActivityResult(int,int,android.content.Intent);
    void onRequestPermissionsResult(int,java.lang.String[],int[]);
    androidx.activity.result.ActivityResultLauncher registerForActivityResult(androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultRegistry,androidx.activity.result.ActivityResultCallback);
    androidx.activity.result.ActivityResultLauncher registerForActivityResult(androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback);
    androidx.activity.result.ActivityResultRegistry getActivityResultRegistry();
    void reportFullyDrawn();
    void access$001(androidx.activity.ComponentActivity);
    androidx.activity.result.ActivityResultRegistry access$100(androidx.activity.ComponentActivity);
}

-keep class androidx.activity.contextaware.OnContextAvailableListener

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.ComponentActivity$1 {
    androidx.activity.ComponentActivity this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.ComponentActivity$2 {
    androidx.activity.ComponentActivity this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.ComponentActivity$2$1 {
    int val$requestCode;    androidx.activity.result.contract.ActivityResultContract$SynchronousResult val$synchronousResult;    androidx.activity.ComponentActivity$2 this$1;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.ComponentActivity$2$2 {
    int val$requestCode;    android.content.IntentSender$SendIntentException val$e;    androidx.activity.ComponentActivity$2 this$1;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.ComponentActivity$3 {
    androidx.activity.ComponentActivity this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.ComponentActivity$4 {
    androidx.activity.ComponentActivity this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.ComponentActivity$5 {
    androidx.activity.ComponentActivity this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.ComponentActivity$6 {
    androidx.activity.ComponentActivity this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.ComponentActivity$7 {
    androidx.activity.ComponentActivity this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.ComponentActivity$NonConfigurationInstances {
    <init>();
}

-keep class androidx.activity.OnBackPressedDispatcher

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.OnBackPressedDispatcher {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.OnBackPressedDispatcher {
    java.lang.Runnable mFallbackOnBackPressed;    java.util.ArrayDeque mOnBackPressedCallbacks;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable {
    androidx.lifecycle.Lifecycle mLifecycle;    androidx.activity.OnBackPressedCallback mOnBackPressedCallback;    androidx.activity.OnBackPressedDispatcher this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable {
    androidx.activity.OnBackPressedCallback mOnBackPressedCallback;    androidx.activity.OnBackPressedDispatcher this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.contextaware.ContextAwareHelper {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.contextaware.ContextAwareHelper {
    java.util.Set mListeners;}

-keep class androidx.activity.contextaware.OnContextAvailableListener

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.result.ActivityResult {
    int mResultCode;    android.content.Intent mData;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.ActivityResult$1 {
    <init>();
}

-keep class androidx.activity.result.ActivityResultCallback

-keep class androidx.activity.result.ActivityResultLauncher

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.ActivityResultLauncher {
    <init>();
}

-keep class androidx.activity.result.ActivityResultRegistry

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.ActivityResultRegistry {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.result.ActivityResultRegistry {
    java.util.Map mRcToKey;    java.util.Map mKeyToRc;    java.util.Map mKeyToLifecycleContainers;    java.util.Map mKeyToCallback;    java.util.Map mParsedPendingResults;    android.os.Bundle mPendingResults;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.result.ActivityResultRegistry$1 {
    java.lang.String val$key;    androidx.activity.result.ActivityResultCallback val$callback;    androidx.activity.result.contract.ActivityResultContract val$contract;    androidx.activity.result.ActivityResultRegistry this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.result.ActivityResultRegistry$2 {
    java.lang.String val$key;    int val$requestCode;    androidx.activity.result.contract.ActivityResultContract val$contract;    androidx.activity.result.ActivityResultRegistry this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.result.ActivityResultRegistry$3 {
    java.lang.String val$key;    int val$requestCode;    androidx.activity.result.contract.ActivityResultContract val$contract;    androidx.activity.result.ActivityResultRegistry this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.result.ActivityResultRegistry$CallbackAndContract {
    androidx.activity.result.ActivityResultCallback mCallback;    androidx.activity.result.contract.ActivityResultContract mContract;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.result.ActivityResultRegistry$LifecycleContainer {
    androidx.lifecycle.Lifecycle mLifecycle;    java.util.ArrayList mObservers;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.result.IntentSenderRequest {
    android.content.IntentSender mIntentSender;    android.content.Intent mFillInIntent;    int mFlagsMask;    int mFlagsValues;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.IntentSenderRequest$1 {
    <init>();
}

-keep class androidx.activity.result.contract.ActivityResultContract

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.contract.ActivityResultContract {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.activity.result.contract.ActivityResultContract$SynchronousResult {
    java.lang.Object mValue;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.contract.ActivityResultContracts$CreateDocument {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.contract.ActivityResultContracts$GetContent {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.contract.ActivityResultContracts$GetMultipleContents {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.contract.ActivityResultContracts$OpenDocument {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.contract.ActivityResultContracts$OpenDocumentTree {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.contract.ActivityResultContracts$OpenMultipleDocuments {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.contract.ActivityResultContracts$PickContact {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.contract.ActivityResultContracts$RequestPermission {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.contract.ActivityResultContracts$StartActivityForResult {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.contract.ActivityResultContracts$StartIntentSenderForResult {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.contract.ActivityResultContracts$TakePicture {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.contract.ActivityResultContracts$TakePicturePreview {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.activity.result.contract.ActivityResultContracts$TakeVideo {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.annotation.RequiresApi {
    int value();
    int api();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.app.ActionBar {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.app.ActionBar$Tab {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.ActionBarDrawerToggle {
    androidx.appcompat.app.ActionBarDrawerToggle$Delegate mActivityImpl;    androidx.drawerlayout.widget.DrawerLayout mDrawerLayout;    int mOpenDrawerContentDescRes;    int mCloseDrawerContentDescRes;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.ActionBarDrawerToggle$1 {
    androidx.appcompat.app.ActionBarDrawerToggle this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.ActionBarDrawerToggle$FrameworkActionBarDelegate {
    android.app.Activity mActivity;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.ActionBarDrawerToggle$ToolbarCompatDelegate {
    androidx.appcompat.widget.Toolbar mToolbar;    android.graphics.drawable.Drawable mDefaultUpIndicator;    java.lang.CharSequence mDefaultContentDescription;    <init>(androidx.appcompat.widget.Toolbar);
    void setActionBarUpIndicator(android.graphics.drawable.Drawable,int);
    void setActionBarDescription(int);
    android.graphics.drawable.Drawable getThemeUpIndicator();
    android.content.Context getActionBarThemedContext();
    boolean isNavigationVisible();
}

-keep class androidx.appcompat.widget.Toolbar

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.ActionBarDrawerToggleHoneycomb {
    java.lang.String TAG;    int[] THEME_ATTRS;    androidx.appcompat.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo setActionBarUpIndicator(android.app.Activity,android.graphics.drawable.Drawable,int);
    androidx.appcompat.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo setActionBarDescription(androidx.appcompat.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo,android.app.Activity,int);
    android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity);
    <init>();
    void <clinit>();
}

-keep class androidx.appcompat.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo

-keep class androidx.appcompat.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo {
    java.lang.reflect.Method setHomeAsUpIndicator;    java.lang.reflect.Method setHomeActionContentDescription;    android.widget.ImageView upIndicatorView;    <init>(android.app.Activity);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AlertController {
    android.content.Context mContext;    androidx.appcompat.app.AppCompatDialog mDialog;    android.view.Window mWindow;    int mButtonIconDimen;    android.view.View$OnClickListener mButtonHandler;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AlertController$1 {
    androidx.appcompat.app.AlertController this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AlertController$2 {
    android.view.View val$top;    android.view.View val$bottom;    androidx.appcompat.app.AlertController this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AlertController$3 {
    android.view.View val$top;    android.view.View val$bottom;    androidx.appcompat.app.AlertController this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AlertController$4 {
    android.view.View val$top;    android.view.View val$bottom;    androidx.appcompat.app.AlertController this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AlertController$5 {
    android.view.View val$top;    android.view.View val$bottom;    androidx.appcompat.app.AlertController this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AlertController$AlertParams {
    android.content.Context mContext;    android.view.LayoutInflater mInflater;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AlertController$AlertParams$1 {
    androidx.appcompat.app.AlertController$RecycleListView val$listView;    androidx.appcompat.app.AlertController$AlertParams this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AlertController$AlertParams$2 {
    int mLabelIndex;    int mIsCheckedIndex;    androidx.appcompat.app.AlertController$RecycleListView val$listView;    androidx.appcompat.app.AlertController val$dialog;    androidx.appcompat.app.AlertController$AlertParams this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AlertController$AlertParams$3 {
    androidx.appcompat.app.AlertController val$dialog;    androidx.appcompat.app.AlertController$AlertParams this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AlertController$AlertParams$4 {
    androidx.appcompat.app.AlertController$RecycleListView val$listView;    androidx.appcompat.app.AlertController val$dialog;    androidx.appcompat.app.AlertController$AlertParams this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AlertController$RecycleListView {
    int mPaddingTopNoTitle;    int mPaddingBottomNoButtons;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AlertDialog {
    androidx.appcompat.app.AlertController mAlert;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AlertDialog$Builder {
    androidx.appcompat.app.AlertController$AlertParams P;    int mTheme;}

-keepclassmembers,allowobfuscation class androidx.appcompat.app.AppCompatActivity {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatActivity {
    java.lang.String DELEGATE_TAG;    androidx.appcompat.app.AppCompatDelegate mDelegate;    android.content.res.Resources mResources;    <init>(int);
    void initDelegate();
    void attachBaseContext(android.content.Context);
    void setTheme(int);
    void onPostCreate(android.os.Bundle);
    androidx.appcompat.app.ActionBar getSupportActionBar();
    void setSupportActionBar(androidx.appcompat.widget.Toolbar);
    android.view.MenuInflater getMenuInflater();
    void setContentView(int);
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams);
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams);
    void initViewTreeOwners();
    void onConfigurationChanged(android.content.res.Configuration);
    void onPostResume();
    void onStart();
    void onStop();
    android.view.View findViewById(int);
    boolean onMenuItemSelected(int,android.view.MenuItem);
    void onDestroy();
    void onTitleChanged(java.lang.CharSequence,int);
    boolean supportRequestWindowFeature(int);
    void supportInvalidateOptionsMenu();
    void invalidateOptionsMenu();
    void onSupportActionModeStarted(androidx.appcompat.view.ActionMode);
    void onSupportActionModeFinished(androidx.appcompat.view.ActionMode);
    androidx.appcompat.view.ActionMode onWindowStartingSupportActionMode(androidx.appcompat.view.ActionMode$Callback);
    androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback);
    void setSupportProgressBarVisibility(boolean);
    void setSupportProgressBarIndeterminateVisibility(boolean);
    void setSupportProgressBarIndeterminate(boolean);
    void setSupportProgress(int);
    void onCreateSupportNavigateUpTaskStack(androidx.core.app.TaskStackBuilder);
    void onPrepareSupportNavigateUpTaskStack(androidx.core.app.TaskStackBuilder);
    boolean onSupportNavigateUp();
    android.content.Intent getSupportParentActivityIntent();
    boolean supportShouldUpRecreateTask(android.content.Intent);
    void supportNavigateUpTo(android.content.Intent);
    void onContentChanged();
    void onSupportContentChanged();
    androidx.appcompat.app.ActionBarDrawerToggle$Delegate getDrawerToggleDelegate();
    boolean onMenuOpened(int,android.view.Menu);
    void onPanelClosed(int,android.view.Menu);
    androidx.appcompat.app.AppCompatDelegate getDelegate();
    boolean dispatchKeyEvent(android.view.KeyEvent);
    android.content.res.Resources getResources();
    boolean performMenuItemShortcut(android.view.KeyEvent);
    boolean onKeyDown(int,android.view.KeyEvent);
    void openOptionsMenu();
    void closeOptionsMenu();
    void onNightModeChanged(int);
}

-keep class androidx.appcompat.app.ActionBar

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatActivity$1 {
    androidx.appcompat.app.AppCompatActivity this$0;    <init>(androidx.appcompat.app.AppCompatActivity);
    android.os.Bundle saveState();
}

-keep class androidx.appcompat.app.AppCompatActivity

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatActivity$2 {
    androidx.appcompat.app.AppCompatActivity this$0;    <init>(androidx.appcompat.app.AppCompatActivity);
    void onContextAvailable(android.content.Context);
}

-keep class androidx.appcompat.app.AppCompatActivity

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatCallback {
    void onSupportActionModeStarted(androidx.appcompat.view.ActionMode);
    void onSupportActionModeFinished(androidx.appcompat.view.ActionMode);
    androidx.appcompat.view.ActionMode onWindowStartingSupportActionMode(androidx.appcompat.view.ActionMode$Callback);
}

-keep class androidx.appcompat.view.ActionMode

-keep class androidx.appcompat.app.AppCompatDelegate

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegate {
    boolean DEBUG;    java.lang.String TAG;    int MODE_NIGHT_FOLLOW_SYSTEM;    int MODE_NIGHT_AUTO_TIME;    int MODE_NIGHT_AUTO;    int MODE_NIGHT_NO;    int MODE_NIGHT_YES;    int MODE_NIGHT_AUTO_BATTERY;    int MODE_NIGHT_UNSPECIFIED;    int sDefaultNightMode;    androidx.collection.ArraySet sActivityDelegates;    java.lang.Object sActivityDelegatesLock;    int FEATURE_SUPPORT_ACTION_BAR;    int FEATURE_SUPPORT_ACTION_BAR_OVERLAY;    int FEATURE_ACTION_MODE_OVERLAY;    androidx.appcompat.app.AppCompatDelegate create(android.app.Activity,androidx.appcompat.app.AppCompatCallback);
    androidx.appcompat.app.AppCompatDelegate create(android.app.Dialog,androidx.appcompat.app.AppCompatCallback);
    androidx.appcompat.app.AppCompatDelegate create(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback);
    androidx.appcompat.app.AppCompatDelegate create(android.content.Context,android.app.Activity,androidx.appcompat.app.AppCompatCallback);
    androidx.appcompat.app.ActionBar getSupportActionBar();
    void setSupportActionBar(androidx.appcompat.widget.Toolbar);
    android.view.MenuInflater getMenuInflater();
    void onCreate(android.os.Bundle);
    void onPostCreate(android.os.Bundle);
    void onConfigurationChanged(android.content.res.Configuration);
    void onStart();
    void onStop();
    void onPostResume();
    void setTheme(int);
    android.view.View findViewById(int);
    void setContentView(android.view.View);
    void setContentView(int);
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams);
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams);
    void attachBaseContext(android.content.Context);
    android.content.Context attachBaseContext2(android.content.Context);
    void setTitle(java.lang.CharSequence);
    void invalidateOptionsMenu();
    void onDestroy();
    androidx.appcompat.app.ActionBarDrawerToggle$Delegate getDrawerToggleDelegate();
    boolean requestWindowFeature(int);
    boolean hasWindowFeature(int);
    androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback);
    void installViewFactory();
    android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet);
    void setHandleNativeActionModesEnabled(boolean);
    boolean isHandleNativeActionModesEnabled();
    void onSaveInstanceState(android.os.Bundle);
    boolean applyDayNight();
    void setLocalNightMode(int);
    int getLocalNightMode();
    void setDefaultNightMode(int);
    int getDefaultNightMode();
    void setCompatVectorFromResourcesEnabled(boolean);
    boolean isCompatVectorFromResourcesEnabled();
    void addActiveDelegate(androidx.appcompat.app.AppCompatDelegate);
    void removeActivityDelegate(androidx.appcompat.app.AppCompatDelegate);
    void removeDelegateFromActives(androidx.appcompat.app.AppCompatDelegate);
    void applyDayNightToActiveDelegates();
    void <clinit>();
}

-keepclassmembers,allowobfuscation class androidx.appcompat.app.AppCompatDelegate {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl {
    androidx.collection.SimpleArrayMap sLocalNightModes;    boolean IS_PRE_LOLLIPOP;    int[] sWindowBackgroundStyleable;    boolean sCanReturnDifferentContext;    boolean sCanApplyOverrideConfiguration;    boolean sInstalledExceptionHandler;    java.lang.String EXCEPTION_HANDLER_MESSAGE_SUFFIX;    java.lang.Object mHost;    android.content.Context mContext;    android.view.Window mWindow;    androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback mAppCompatWindowCallback;    androidx.appcompat.app.AppCompatCallback mAppCompatCallback;    androidx.appcompat.app.ActionBar mActionBar;    android.view.MenuInflater mMenuInflater;    java.lang.CharSequence mTitle;    androidx.appcompat.widget.DecorContentParent mDecorContentParent;    androidx.appcompat.app.AppCompatDelegateImpl$ActionMenuPresenterCallback mActionMenuPresenterCallback;    androidx.appcompat.app.AppCompatDelegateImpl$PanelMenuPresenterCallback mPanelMenuPresenterCallback;    androidx.appcompat.view.ActionMode mActionMode;    androidx.appcompat.widget.ActionBarContextView mActionModeView;    android.widget.PopupWindow mActionModePopup;    java.lang.Runnable mShowActionModePopup;    androidx.core.view.ViewPropertyAnimatorCompat mFadeAnim;    boolean mHandleNativeActionModes;    boolean mSubDecorInstalled;    android.view.ViewGroup mSubDecor;    android.widget.TextView mTitleView;    android.view.View mStatusGuard;    boolean mFeatureProgress;    boolean mFeatureIndeterminateProgress;    boolean mHasActionBar;    boolean mOverlayActionBar;    boolean mOverlayActionMode;    boolean mIsFloating;    boolean mWindowNoTitle;    boolean mClosingActionMenu;    androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState[] mPanels;    androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState mPreparedPanel;    boolean mLongPressBackDown;    boolean mBaseContextAttached;    boolean mCreated;    boolean mStarted;    boolean mIsDestroyed;    int mLocalNightMode;    int mThemeResId;    boolean mActivityHandlesUiMode;    boolean mActivityHandlesUiModeChecked;    androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager mAutoTimeNightModeManager;    androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager mAutoBatteryNightModeManager;    boolean mInvalidatePanelMenuPosted;    int mInvalidatePanelMenuFeatures;    java.lang.Runnable mInvalidatePanelMenuRunnable;    boolean mEnableDefaultActionBarUp;    android.graphics.Rect mTempRect1;    android.graphics.Rect mTempRect2;    androidx.appcompat.app.AppCompatViewInflater mAppCompatViewInflater;    androidx.appcompat.app.LayoutIncludeDetector mLayoutIncludeDetector;    <init>(android.app.Activity,androidx.appcompat.app.AppCompatCallback);
    <init>(android.app.Dialog,androidx.appcompat.app.AppCompatCallback);
    <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback);
    <init>(android.content.Context,android.app.Activity,androidx.appcompat.app.AppCompatCallback);
    <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback,java.lang.Object);
    android.content.Context attachBaseContext2(android.content.Context);
    void onCreate(android.os.Bundle);
    void onPostCreate(android.os.Bundle);
    androidx.appcompat.app.ActionBar getSupportActionBar();
    androidx.appcompat.app.ActionBar peekSupportActionBar();
    android.view.Window$Callback getWindowCallback();
    void initWindowDecorActionBar();
    void setSupportActionBar(androidx.appcompat.widget.Toolbar);
    android.content.Context getActionBarThemedContext();
    android.view.MenuInflater getMenuInflater();
    android.view.View findViewById(int);
    void onConfigurationChanged(android.content.res.Configuration);
    void onStart();
    void onStop();
    void onPostResume();
    void setContentView(android.view.View);
    void setContentView(int);
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams);
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams);
    void onSaveInstanceState(android.os.Bundle);
    void onDestroy();
    void cleanupAutoManagers();
    void setTheme(int);
    void ensureWindow();
    void attachToWindow(android.view.Window);
    void ensureSubDecor();
    android.view.ViewGroup createSubDecor();
    void onSubDecorInstalled(android.view.ViewGroup);
    void applyFixedSizeWindow();
    boolean requestWindowFeature(int);
    boolean hasWindowFeature(int);
    void setTitle(java.lang.CharSequence);
    java.lang.CharSequence getTitle();
    void onPanelClosed(int);
    void onMenuOpened(int);
    boolean onMenuItemSelected(androidx.appcompat.view.menu.MenuBuilder,android.view.MenuItem);
    void onMenuModeChange(androidx.appcompat.view.menu.MenuBuilder);
    androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback);
    void invalidateOptionsMenu();
    androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback);
    boolean shouldAnimateActionModeView();
    void setHandleNativeActionModesEnabled(boolean);
    boolean isHandleNativeActionModesEnabled();
    void endOnGoingFadeAnimation();
    boolean onBackPressed();
    boolean onKeyShortcut(int,android.view.KeyEvent);
    boolean dispatchKeyEvent(android.view.KeyEvent);
    boolean onKeyUp(int,android.view.KeyEvent);
    boolean onKeyDown(int,android.view.KeyEvent);
    android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet);
    boolean shouldInheritContext(android.view.ViewParent);
    void installViewFactory();
    android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet);
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet);
    androidx.appcompat.app.AppCompatActivity tryUnwrapContext();
    void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent);
    boolean initializePanelDecor(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState);
    void reopenMenu(boolean);
    boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState);
    boolean initializePanelContent(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState);
    boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent);
    void checkCloseActionMenu(androidx.appcompat.view.menu.MenuBuilder);
    void closePanel(int);
    void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean);
    boolean onKeyDownPanel(int,android.view.KeyEvent);
    boolean onKeyUpPanel(int,android.view.KeyEvent);
    void callOnPanelClosed(int,androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.Menu);
    androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState findMenuPanel(android.view.Menu);
    androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean);
    boolean performPanelShortcut(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,int,android.view.KeyEvent,int);
    void invalidatePanelMenu(int);
    void doInvalidatePanelMenu(int);
    int updateStatusGuard(androidx.core.view.WindowInsetsCompat,android.graphics.Rect);
    void updateStatusGuardColor(android.view.View);
    void throwFeatureRequestIfSubDecorInstalled();
    int sanitizeWindowFeatureId(int);
    android.view.ViewGroup getSubDecor();
    void dismissPopups();
    boolean applyDayNight();
    boolean applyDayNight(boolean);
    void setLocalNightMode(int);
    int getLocalNightMode();
    int mapNightMode(android.content.Context,int);
    int calculateNightMode();
    android.content.res.Configuration createOverrideConfigurationForDayNight(android.content.Context,int,android.content.res.Configuration);
    boolean updateForNightMode(int,boolean);
    void updateResourcesConfigurationForNightMode(int,boolean,android.content.res.Configuration);
    androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager getAutoTimeNightModeManager();
    androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager getAutoTimeNightModeManager(android.content.Context);
    androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager getAutoBatteryNightModeManager(android.content.Context);
    boolean isActivityManifestHandlingUiMode();
    androidx.appcompat.app.ActionBarDrawerToggle$Delegate getDrawerToggleDelegate();
    android.content.res.Configuration generateConfigDelta(android.content.res.Configuration,android.content.res.Configuration);
    void <clinit>();
}

-keep class androidx.appcompat.app.AppCompatCallback

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$1 {
    java.lang.Thread$UncaughtExceptionHandler val$defHandler;    <init>(java.lang.Thread$UncaughtExceptionHandler);
    void uncaughtException(java.lang.Thread,java.lang.Throwable);
    boolean shouldWrapException(java.lang.Throwable);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$2 {
    androidx.appcompat.app.AppCompatDelegateImpl this$0;    <init>(androidx.appcompat.app.AppCompatDelegateImpl);
    void run();
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$3 {
    androidx.appcompat.app.AppCompatDelegateImpl this$0;    <init>(androidx.appcompat.app.AppCompatDelegateImpl);
    androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat);
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$4 {
    androidx.appcompat.app.AppCompatDelegateImpl this$0;    <init>(androidx.appcompat.app.AppCompatDelegateImpl);
    void onFitSystemWindows(android.graphics.Rect);
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$5 {
    androidx.appcompat.app.AppCompatDelegateImpl this$0;    <init>(androidx.appcompat.app.AppCompatDelegateImpl);
    void onAttachedFromWindow();
    void onDetachedFromWindow();
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$6 {
    androidx.appcompat.app.AppCompatDelegateImpl this$0;    <init>(androidx.appcompat.app.AppCompatDelegateImpl);
    void run();
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$6$1 {
    androidx.appcompat.app.AppCompatDelegateImpl$6 this$1;    <init>(androidx.appcompat.app.AppCompatDelegateImpl$6);
    void onAnimationStart(android.view.View);
    void onAnimationEnd(android.view.View);
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl$6

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$7 {
    androidx.appcompat.app.AppCompatDelegateImpl this$0;    <init>(androidx.appcompat.app.AppCompatDelegateImpl);
    void onAnimationStart(android.view.View);
    void onAnimationEnd(android.view.View);
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$ActionBarDrawableToggleImpl {
    androidx.appcompat.app.AppCompatDelegateImpl this$0;    <init>(androidx.appcompat.app.AppCompatDelegateImpl);
    android.graphics.drawable.Drawable getThemeUpIndicator();
    android.content.Context getActionBarThemedContext();
    boolean isNavigationVisible();
    void setActionBarUpIndicator(android.graphics.drawable.Drawable,int);
    void setActionBarDescription(int);
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$ActionMenuPresenterCallback {
    androidx.appcompat.app.AppCompatDelegateImpl this$0;    <init>(androidx.appcompat.app.AppCompatDelegateImpl);
    boolean onOpenSubMenu(androidx.appcompat.view.menu.MenuBuilder);
    void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean);
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9 {
    androidx.appcompat.view.ActionMode$Callback mWrapped;    androidx.appcompat.app.AppCompatDelegateImpl this$0;    <init>(androidx.appcompat.app.AppCompatDelegateImpl,androidx.appcompat.view.ActionMode$Callback);
    boolean onCreateActionMode(androidx.appcompat.view.ActionMode,android.view.Menu);
    boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu);
    boolean onActionItemClicked(androidx.appcompat.view.ActionMode,android.view.MenuItem);
    void onDestroyActionMode(androidx.appcompat.view.ActionMode);
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9$1 {
    androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9 this$1;    <init>(androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9);
    void onAnimationEnd(android.view.View);
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$Api17Impl {
    <init>();
    void generateConfigDelta_densityDpi(android.content.res.Configuration,android.content.res.Configuration,android.content.res.Configuration);
    android.content.Context createConfigurationContext(android.content.Context,android.content.res.Configuration);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$Api21Impl {
    <init>();
    boolean isPowerSaveMode(android.os.PowerManager);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$Api24Impl {
    <init>();
    void generateConfigDelta_locale(android.content.res.Configuration,android.content.res.Configuration,android.content.res.Configuration);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$Api26Impl {
    <init>();
    void generateConfigDelta_colorMode(android.content.res.Configuration,android.content.res.Configuration,android.content.res.Configuration);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback {
    androidx.appcompat.app.AppCompatDelegateImpl this$0;    <init>(androidx.appcompat.app.AppCompatDelegateImpl,android.view.Window$Callback);
    boolean dispatchKeyEvent(android.view.KeyEvent);
    boolean dispatchKeyShortcutEvent(android.view.KeyEvent);
    boolean onCreatePanelMenu(int,android.view.Menu);
    void onContentChanged();
    boolean onPreparePanel(int,android.view.View,android.view.Menu);
    boolean onMenuOpened(int,android.view.Menu);
    void onPanelClosed(int,android.view.Menu);
    android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback);
    android.view.ActionMode startAsSupportActionMode(android.view.ActionMode$Callback);
    android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int);
    void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int);
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$AutoBatteryNightModeManager {
    android.os.PowerManager mPowerManager;    androidx.appcompat.app.AppCompatDelegateImpl this$0;    <init>(androidx.appcompat.app.AppCompatDelegateImpl,android.content.Context);
    int getApplyableNightMode();
    void onChange();
    android.content.IntentFilter createIntentFilterForBroadcastReceiver();
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl

-keep class androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager {
    android.content.BroadcastReceiver mReceiver;    androidx.appcompat.app.AppCompatDelegateImpl this$0;    <init>(androidx.appcompat.app.AppCompatDelegateImpl);
    int getApplyableNightMode();
    void onChange();
    void setup();
    android.content.IntentFilter createIntentFilterForBroadcastReceiver();
    void cleanup();
    boolean isListening();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager$1 {
    androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager this$1;    <init>(androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager);
    void onReceive(android.content.Context,android.content.Intent);
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$AutoTimeNightModeManager {
    androidx.appcompat.app.TwilightManager mTwilightManager;    androidx.appcompat.app.AppCompatDelegateImpl this$0;    <init>(androidx.appcompat.app.AppCompatDelegateImpl,androidx.appcompat.app.TwilightManager);
    int getApplyableNightMode();
    void onChange();
    android.content.IntentFilter createIntentFilterForBroadcastReceiver();
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$ContextThemeWrapperCompatApi17Impl {
    <init>();
    void applyOverrideConfiguration(android.view.ContextThemeWrapper,android.content.res.Configuration);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$ListMenuDecorView {
    androidx.appcompat.app.AppCompatDelegateImpl this$0;    <init>(androidx.appcompat.app.AppCompatDelegateImpl,android.content.Context);
    boolean dispatchKeyEvent(android.view.KeyEvent);
    boolean onInterceptTouchEvent(android.view.MotionEvent);
    boolean isOutOfBounds(int,int);
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl

-keep class androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState {
    int featureId;    int background;    int gravity;    int x;    int y;    int windowAnimations;    android.view.ViewGroup decorView;    android.view.View shownPanelView;    android.view.View createdPanelView;    androidx.appcompat.view.menu.MenuBuilder menu;    androidx.appcompat.view.menu.ListMenuPresenter listMenuPresenter;    android.content.Context listPresenterContext;    boolean isPrepared;    boolean isHandled;    boolean isOpen;    boolean qwertyMode;    boolean refreshDecorView;    boolean refreshMenuContent;    boolean wasLastOpen;    android.os.Bundle frozenMenuState;    android.os.Bundle frozenActionViewState;    <init>(int);
    boolean hasPanelItems();
    void clearMenuPresenters();
    void setStyle(android.content.Context);
    void setMenu(androidx.appcompat.view.menu.MenuBuilder);
    androidx.appcompat.view.menu.MenuView getListMenuView(androidx.appcompat.view.menu.MenuPresenter$Callback);
    android.os.Parcelable onSaveInstanceState();
    void onRestoreInstanceState(android.os.Parcelable);
    void applyFrozenState();
}

-keepclassmembers,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState {
    int featureId;    boolean isOpen;    android.os.Bundle menuState;    int describeContents();
    void writeToParcel(android.os.Parcel,int);
    androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState readFromParcel(android.os.Parcel,java.lang.ClassLoader);
    void <clinit>();
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState

-keepclassmembers,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState$1 {
    androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader);
    androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState createFromParcel(android.os.Parcel);
    androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState[] newArray(int);
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader);
    java.lang.Object[] newArray(int);
    java.lang.Object createFromParcel(android.os.Parcel);
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState$SavedState

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDelegateImpl$PanelMenuPresenterCallback {
    androidx.appcompat.app.AppCompatDelegateImpl this$0;    <init>(androidx.appcompat.app.AppCompatDelegateImpl);
    void onCloseMenu(androidx.appcompat.view.menu.MenuBuilder,boolean);
    boolean onOpenSubMenu(androidx.appcompat.view.menu.MenuBuilder);
}

-keep class androidx.appcompat.app.AppCompatDelegateImpl

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDialog {
    androidx.appcompat.app.AppCompatDelegate mDelegate;    androidx.core.view.KeyEventDispatcher$Component mKeyDispatcher;    <init>(android.content.Context);
    <init>(android.content.Context,int);
    <init>(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener);
    void onCreate(android.os.Bundle);
    androidx.appcompat.app.ActionBar getSupportActionBar();
    void setContentView(int);
    void setContentView(android.view.View);
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams);
    android.view.View findViewById(int);
    void setTitle(java.lang.CharSequence);
    void setTitle(int);
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams);
    void onStop();
    void dismiss();
    boolean supportRequestWindowFeature(int);
    void invalidateOptionsMenu();
    androidx.appcompat.app.AppCompatDelegate getDelegate();
    int getThemeResId(android.content.Context,int);
    void onSupportActionModeStarted(androidx.appcompat.view.ActionMode);
    void onSupportActionModeFinished(androidx.appcompat.view.ActionMode);
    androidx.appcompat.view.ActionMode onWindowStartingSupportActionMode(androidx.appcompat.view.ActionMode$Callback);
    boolean superDispatchKeyEvent(android.view.KeyEvent);
    boolean dispatchKeyEvent(android.view.KeyEvent);
}

-keep class androidx.appcompat.app.ActionBar

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDialog$1 {
    androidx.appcompat.app.AppCompatDialog this$0;    <init>(androidx.appcompat.app.AppCompatDialog);
    boolean superDispatchKeyEvent(android.view.KeyEvent);
}

-keep class androidx.appcompat.app.AppCompatDialog

-keepclassmembers,allowobfuscation class androidx.appcompat.app.AppCompatDialogFragment {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatDialogFragment {
    android.app.Dialog onCreateDialog(android.os.Bundle);
    void setupDialog(android.app.Dialog,int);
}

-keepclassmembers,allowobfuscation class androidx.appcompat.app.AppCompatViewInflater {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatViewInflater {
    java.lang.Class[] sConstructorSignature;    int[] sOnClickAttrs;    java.lang.String[] sClassPrefixList;    java.lang.String LOG_TAG;    androidx.collection.SimpleArrayMap sConstructorMap;    java.lang.Object[] mConstructorArgs;    android.view.View createView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet,boolean,boolean,boolean,boolean);
    androidx.appcompat.widget.AppCompatTextView createTextView(android.content.Context,android.util.AttributeSet);
    androidx.appcompat.widget.AppCompatImageView createImageView(android.content.Context,android.util.AttributeSet);
    androidx.appcompat.widget.AppCompatButton createButton(android.content.Context,android.util.AttributeSet);
    androidx.appcompat.widget.AppCompatEditText createEditText(android.content.Context,android.util.AttributeSet);
    androidx.appcompat.widget.AppCompatSpinner createSpinner(android.content.Context,android.util.AttributeSet);
    androidx.appcompat.widget.AppCompatImageButton createImageButton(android.content.Context,android.util.AttributeSet);
    androidx.appcompat.widget.AppCompatCheckBox createCheckBox(android.content.Context,android.util.AttributeSet);
    androidx.appcompat.widget.AppCompatRadioButton createRadioButton(android.content.Context,android.util.AttributeSet);
    androidx.appcompat.widget.AppCompatCheckedTextView createCheckedTextView(android.content.Context,android.util.AttributeSet);
    androidx.appcompat.widget.AppCompatAutoCompleteTextView createAutoCompleteTextView(android.content.Context,android.util.AttributeSet);
    androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView createMultiAutoCompleteTextView(android.content.Context,android.util.AttributeSet);
    androidx.appcompat.widget.AppCompatRatingBar createRatingBar(android.content.Context,android.util.AttributeSet);
    androidx.appcompat.widget.AppCompatSeekBar createSeekBar(android.content.Context,android.util.AttributeSet);
    androidx.appcompat.widget.AppCompatToggleButton createToggleButton(android.content.Context,android.util.AttributeSet);
    void verifyNotNull(android.view.View,java.lang.String);
    android.view.View createView(android.content.Context,java.lang.String,android.util.AttributeSet);
    android.view.View createViewFromTag(android.content.Context,java.lang.String,android.util.AttributeSet);
    void checkOnClickListener(android.view.View,android.util.AttributeSet);
    android.view.View createViewByPrefix(android.content.Context,java.lang.String,java.lang.String);
    android.content.Context themifyContext(android.content.Context,android.util.AttributeSet,boolean,boolean);
    void <clinit>();
}

-keep class androidx.appcompat.widget.AppCompatTextView

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.AppCompatViewInflater$DeclaredOnClickListener {
    android.view.View mHostView;    java.lang.String mMethodName;    java.lang.reflect.Method mResolvedMethod;    android.content.Context mResolvedContext;    <init>(android.view.View,java.lang.String);
    void onClick(android.view.View);
    void resolveMethod(android.content.Context);
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.app.LayoutIncludeDetector {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.LayoutIncludeDetector {
    java.util.Deque mXmlParserStack;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.NavItemSelectedListener {
    androidx.appcompat.app.ActionBar$OnNavigationListener mListener;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.ToolbarActionBar {
    java.lang.Runnable mMenuInvalidator;    androidx.appcompat.widget.Toolbar$OnMenuItemClickListener mMenuClicker;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.ToolbarActionBar$1 {
    androidx.appcompat.app.ToolbarActionBar this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.ToolbarActionBar$2 {
    androidx.appcompat.app.ToolbarActionBar this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.ToolbarActionBar$ActionMenuPresenterCallback {
    androidx.appcompat.app.ToolbarActionBar this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.ToolbarActionBar$MenuBuilderCallback {
    androidx.appcompat.app.ToolbarActionBar this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.ToolbarActionBar$ToolbarCallbackWrapper {
    androidx.appcompat.app.ToolbarActionBar this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.app.TwilightCalculator {
    <init>();
}

-keep class androidx.appcompat.app.TwilightManager

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.TwilightManager {
    android.content.Context mContext;    android.location.LocationManager mLocationManager;    androidx.appcompat.app.TwilightManager$TwilightState mTwilightState;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.app.TwilightManager$TwilightState {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.WindowDecorActionBar {
    androidx.core.view.ViewPropertyAnimatorListener mHideListener;    androidx.core.view.ViewPropertyAnimatorListener mShowListener;    androidx.core.view.ViewPropertyAnimatorUpdateListener mUpdateListener;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.WindowDecorActionBar$1 {
    androidx.appcompat.app.WindowDecorActionBar this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.WindowDecorActionBar$2 {
    androidx.appcompat.app.WindowDecorActionBar this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.WindowDecorActionBar$3 {
    androidx.appcompat.app.WindowDecorActionBar this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl {
    android.content.Context mActionModeContext;    androidx.appcompat.view.menu.MenuBuilder mMenu;    androidx.appcompat.app.WindowDecorActionBar this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.app.WindowDecorActionBar$TabImpl {
    androidx.appcompat.app.WindowDecorActionBar this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.content.res.AppCompatResources {
    java.lang.String LOG_TAG;    java.lang.ThreadLocal TL_TYPED_VALUE;    java.util.WeakHashMap sColorStateCaches;    java.lang.Object sColorStateCacheLock;    <init>();
    android.content.res.ColorStateList getColorStateList(android.content.Context,int);
    android.graphics.drawable.Drawable getDrawable(android.content.Context,int);
    android.content.res.ColorStateList inflateColorStateList(android.content.Context,int);
    android.content.res.ColorStateList getCachedColorStateList(android.content.Context,int);
    void addColorStateListToCache(android.content.Context,int,android.content.res.ColorStateList);
    boolean isColorInt(android.content.Context,int);
    android.util.TypedValue getTypedValue();
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.content.res.AppCompatResources$ColorStateListCacheEntry {
    android.content.res.ColorStateList value;    android.content.res.Configuration configuration;    <init>(android.content.res.ColorStateList,android.content.res.Configuration);
}

-keepclassmembers,allowobfuscation class androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat {
    java.lang.String LOGTAG;    java.lang.String ELEMENT_TRANSITION;    java.lang.String ELEMENT_ITEM;    java.lang.String TRANSITION_MISSING_DRAWABLE_ERROR;    java.lang.String TRANSITION_MISSING_FROM_TO_ID;    java.lang.String ITEM_MISSING_DRAWABLE_ERROR;    androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState mState;    androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$Transition mTransition;    int mTransitionToIndex;    int mTransitionFromIndex;    boolean mMutated;    <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState,android.content.res.Resources);
    androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat create(android.content.Context,int,android.content.res.Resources$Theme);
    androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme);
    void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme);
    boolean setVisible(boolean,boolean);
    void addState(int[],android.graphics.drawable.Drawable,int);
    void addTransition(int,int,android.graphics.drawable.Drawable,boolean);
    boolean isStateful();
    void jumpToCurrentState();
    boolean onStateChange(int[]);
    boolean selectTransition(int);
    void updateStateFromTypedArray(android.content.res.TypedArray);
    void init();
    void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme);
    int parseTransition(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme);
    int parseItem(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme);
    android.graphics.drawable.Drawable mutate();
    androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState cloneConstantState();
    void clearMutated();
    void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState);
    void applyTheme(android.content.res.Resources$Theme);
    androidx.appcompat.graphics.drawable.StateListDrawable$StateListState cloneConstantState();
    void addState(int[],android.graphics.drawable.Drawable);
    androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState cloneConstantState();
    boolean canApplyTheme();
    android.graphics.drawable.Drawable getCurrent();
    int getOpacity();
    void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable);
    void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long);
    void invalidateDrawable(android.graphics.drawable.Drawable);
    int getMinimumHeight();
    int getMinimumWidth();
    int getIntrinsicHeight();
    int getIntrinsicWidth();
    boolean onLayoutDirectionChanged(int);
    void getHotspotBounds(android.graphics.Rect);
    void setHotspotBounds(int,int,int,int);
    void setHotspot(float,float);
    boolean isAutoMirrored();
    void setAutoMirrored(boolean);
    void setExitFadeDuration(int);
    void setEnterFadeDuration(int);
    void setTintMode(android.graphics.PorterDuff$Mode);
    void setTintList(android.content.res.ColorStateList);
    void setColorFilter(android.graphics.ColorFilter);
    void setDither(boolean);
    int getAlpha();
    void setAlpha(int);
    void getOutline(android.graphics.Outline);
    boolean getPadding(android.graphics.Rect);
    int getChangingConfigurations();
    void draw(android.graphics.Canvas);
    void <clinit>();
}

-keep class androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatableTransition {
    android.graphics.drawable.Animatable mA;    <init>(android.graphics.drawable.Animatable);
    void start();
    void stop();
}

-keep class androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState {
    long REVERSED_BIT;    long REVERSIBLE_FLAG_BIT;    androidx.collection.LongSparseArray mTransitions;    androidx.collection.SparseArrayCompat mStateIds;    <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState,androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat,android.content.res.Resources);
    void mutate();
    int addTransition(int,int,android.graphics.drawable.Drawable,boolean);
    int addStateSet(int[],android.graphics.drawable.Drawable,int);
    int indexOfKeyframe(int[]);
    int getKeyframeIdAt(int);
    int indexOfTransition(int,int);
    boolean isTransitionReversed(int,int);
    boolean transitionHasReversibleFlag(int,int);
    android.graphics.drawable.Drawable newDrawable();
    android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
    long generateTransitionKey(int,int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedVectorDrawableTransition {
    androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat mAvd;    <init>(androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat);
    void start();
    void stop();
}

-keep class androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimationDrawableTransition {
    android.animation.ObjectAnimator mAnim;    boolean mHasReversibleFlag;    <init>(android.graphics.drawable.AnimationDrawable,boolean,boolean);
    boolean canReverse();
    void start();
    void reverse();
    void stop();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$FrameInterpolator {
    int[] mFrameTimes;    int mFrames;    int mTotalDuration;    <init>(android.graphics.drawable.AnimationDrawable,boolean);
    int updateFrames(android.graphics.drawable.AnimationDrawable,boolean);
    int getTotalDuration();
    float getInterpolation(float);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$Transition {
    <init>();
    void start();
    void stop();
    void reverse();
    boolean canReverse();
    <init>(androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$1);
}

-keep class androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$1

-keepclassmembers,allowobfuscation class androidx.appcompat.graphics.drawable.DrawableContainer {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.graphics.drawable.DrawableContainer {
    boolean DEBUG;    java.lang.String TAG;    boolean DEFAULT_DITHER;    androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState mDrawableContainerState;    android.graphics.Rect mHotspotBounds;    android.graphics.drawable.Drawable mCurrDrawable;    android.graphics.drawable.Drawable mLastDrawable;    int mAlpha;    boolean mHasAlpha;    int mCurIndex;    boolean mMutated;    java.lang.Runnable mAnimationRunnable;    long mEnterAnimationEnd;    long mExitAnimationEnd;    androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback mBlockInvalidateCallback;    void draw(android.graphics.Canvas);
    int getChangingConfigurations();
    boolean needsMirroring();
    boolean getPadding(android.graphics.Rect);
    void getOutline(android.graphics.Outline);
    void setAlpha(int);
    int getAlpha();
    void setDither(boolean);
    void setColorFilter(android.graphics.ColorFilter);
    void setTintList(android.content.res.ColorStateList);
    void setTintMode(android.graphics.PorterDuff$Mode);
    void setEnterFadeDuration(int);
    void setExitFadeDuration(int);
    void onBoundsChange(android.graphics.Rect);
    boolean isStateful();
    void setAutoMirrored(boolean);
    boolean isAutoMirrored();
    void jumpToCurrentState();
    void setHotspot(float,float);
    void setHotspotBounds(int,int,int,int);
    void getHotspotBounds(android.graphics.Rect);
    boolean onStateChange(int[]);
    boolean onLevelChange(int);
    boolean onLayoutDirectionChanged(int);
    int getIntrinsicWidth();
    int getIntrinsicHeight();
    int getMinimumWidth();
    int getMinimumHeight();
    void invalidateDrawable(android.graphics.drawable.Drawable);
    void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long);
    void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable);
    boolean setVisible(boolean,boolean);
    int getOpacity();
    void setCurrentIndex(int);
    int getCurrentIndex();
    boolean selectDrawable(int);
    void initializeDrawableForDisplay(android.graphics.drawable.Drawable);
    void animate(boolean);
    android.graphics.drawable.Drawable getCurrent();
    void updateDensity(android.content.res.Resources);
    void applyTheme(android.content.res.Resources$Theme);
    boolean canApplyTheme();
    android.graphics.drawable.Drawable$ConstantState getConstantState();
    android.graphics.drawable.Drawable mutate();
    androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState cloneConstantState();
    void clearMutated();
    void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState);
    int resolveDensity(android.content.res.Resources,int);
}

-keep class androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.graphics.drawable.DrawableContainer$1 {
    androidx.appcompat.graphics.drawable.DrawableContainer this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.graphics.drawable.DrawableContainer$Api21Impl {
    <init>();
    boolean canApplyTheme(android.graphics.drawable.Drawable$ConstantState);
    android.content.res.Resources getResources(android.content.res.Resources$Theme);
    void getOutline(android.graphics.drawable.Drawable,android.graphics.Outline);
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback {
    <init>();
}

-keep class androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState {
    androidx.appcompat.graphics.drawable.DrawableContainer mOwner;    android.content.res.Resources mSourceRes;    int mDensity;    int mChangingConfigurations;    int mChildrenChangingConfigurations;    android.util.SparseArray mDrawableFutures;    android.graphics.drawable.Drawable[] mDrawables;    int mNumChildren;    boolean mVariablePadding;    boolean mCheckedPadding;    android.graphics.Rect mConstantPadding;    boolean mConstantSize;    boolean mCheckedConstantSize;    int mConstantWidth;    int mConstantHeight;    int mConstantMinimumWidth;    int mConstantMinimumHeight;    boolean mCheckedOpacity;    int mOpacity;    boolean mCheckedStateful;    boolean mStateful;    boolean mCheckedConstantState;    boolean mCanConstantState;    boolean mDither;    boolean mMutated;    int mLayoutDirection;    int mEnterFadeDuration;    int mExitFadeDuration;    boolean mAutoMirrored;    android.graphics.ColorFilter mColorFilter;    boolean mHasColorFilter;    android.content.res.ColorStateList mTintList;    android.graphics.PorterDuff$Mode mTintMode;    boolean mHasTintList;    boolean mHasTintMode;    <init>(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState,androidx.appcompat.graphics.drawable.DrawableContainer,android.content.res.Resources);
    int getChangingConfigurations();
    int addChild(android.graphics.drawable.Drawable);
    void invalidateCache();
    int getCapacity();
    void createAllFutures();
    android.graphics.drawable.Drawable prepareDrawable(android.graphics.drawable.Drawable);
    int getChildCount();
    android.graphics.drawable.Drawable getChild(int);
    boolean setLayoutDirection(int,int);
    void updateDensity(android.content.res.Resources);
    void applyTheme(android.content.res.Resources$Theme);
    boolean canApplyTheme();
    void mutate();
    void clearMutated();
    void setVariablePadding(boolean);
    android.graphics.Rect getConstantPadding();
    void setConstantSize(boolean);
    boolean isConstantSize();
    int getConstantWidth();
    int getConstantHeight();
    int getConstantMinimumWidth();
    int getConstantMinimumHeight();
    void computeConstantSize();
    void setEnterFadeDuration(int);
    int getEnterFadeDuration();
    void setExitFadeDuration(int);
    int getExitFadeDuration();
    int getOpacity();
    boolean isStateful();
    void growArray(int,int);
    boolean canConstantState();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.graphics.drawable.DrawerArrowDrawable {
    android.graphics.Paint mPaint;    android.graphics.Path mPath;    int mSize;}

-keepclassmembers,allowobfuscation class androidx.appcompat.graphics.drawable.StateListDrawable {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.graphics.drawable.StateListDrawable {
    java.lang.String TAG;    boolean DEBUG;    androidx.appcompat.graphics.drawable.StateListDrawable$StateListState mStateListState;    boolean mMutated;    void addState(int[],android.graphics.drawable.Drawable);
    boolean isStateful();
    boolean onStateChange(int[]);
    void inflate(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme);
    void updateStateFromTypedArray(android.content.res.TypedArray);
    void inflateChildElements(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme);
    int[] extractStateSet(android.util.AttributeSet);
    androidx.appcompat.graphics.drawable.StateListDrawable$StateListState getStateListState();
    int getStateCount();
    int[] getStateSet(int);
    android.graphics.drawable.Drawable getStateDrawable(int);
    int getStateDrawableIndex(int[]);
    android.graphics.drawable.Drawable mutate();
    androidx.appcompat.graphics.drawable.StateListDrawable$StateListState cloneConstantState();
    void clearMutated();
    void applyTheme(android.content.res.Resources$Theme);
    void setConstantState(androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState);
    <init>(androidx.appcompat.graphics.drawable.StateListDrawable$StateListState,android.content.res.Resources);
    <init>(androidx.appcompat.graphics.drawable.StateListDrawable$StateListState);
    androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState cloneConstantState();
}

-keep class androidx.appcompat.graphics.drawable.StateListDrawable$StateListState

-keep class androidx.appcompat.graphics.drawable.StateListDrawable$StateListState

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.graphics.drawable.StateListDrawable$StateListState {
    int[][] mStateSets;    <init>(androidx.appcompat.graphics.drawable.StateListDrawable$StateListState,androidx.appcompat.graphics.drawable.StateListDrawable,android.content.res.Resources);
    void mutate();
    int addStateSet(int[],android.graphics.drawable.Drawable);
    int indexOfStateSet(int[]);
    android.graphics.drawable.Drawable newDrawable();
    android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
    void growArray(int,int);
}

-keep class androidx.appcompat.view.ActionMode

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.view.ActionMode {
    <init>();
}

-keep class androidx.appcompat.view.ActionMode$Callback

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.view.ContextThemeWrapper {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.SupportActionModeWrapper {
    android.content.Context mContext;    androidx.appcompat.view.ActionMode mWrappedObject;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper {
    android.view.ActionMode$Callback mWrappedCallback;    android.content.Context mContext;    java.util.ArrayList mActionModes;    androidx.collection.SimpleArrayMap mMenus;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.SupportMenuInflater {
    java.lang.Object[] mActionViewConstructorArguments;    java.lang.Object[] mActionProviderConstructorArguments;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.SupportMenuInflater$MenuState {
    androidx.appcompat.view.SupportMenuInflater this$0;}

-keepclassmembers,allowobfuscation class androidx.appcompat.view.ViewPropertyAnimatorCompatSet {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.ViewPropertyAnimatorCompatSet {
    java.util.ArrayList mAnimators;    long mDuration;    android.view.animation.Interpolator mInterpolator;    androidx.core.view.ViewPropertyAnimatorListener mListener;    boolean mIsStarted;    androidx.core.view.ViewPropertyAnimatorListenerAdapter mProxyListener;    androidx.appcompat.view.ViewPropertyAnimatorCompatSet play(androidx.core.view.ViewPropertyAnimatorCompat);
    androidx.appcompat.view.ViewPropertyAnimatorCompatSet playSequentially(androidx.core.view.ViewPropertyAnimatorCompat,androidx.core.view.ViewPropertyAnimatorCompat);
    void start();
    void onAnimationsEnded();
    void cancel();
    androidx.appcompat.view.ViewPropertyAnimatorCompatSet setDuration(long);
    androidx.appcompat.view.ViewPropertyAnimatorCompatSet setInterpolator(android.view.animation.Interpolator);
    androidx.appcompat.view.ViewPropertyAnimatorCompatSet setListener(androidx.core.view.ViewPropertyAnimatorListener);
}

-keep class androidx.core.view.ViewPropertyAnimatorCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.ViewPropertyAnimatorCompatSet$1 {
    boolean mProxyStarted;    int mProxyEndCount;    androidx.appcompat.view.ViewPropertyAnimatorCompatSet this$0;    <init>(androidx.appcompat.view.ViewPropertyAnimatorCompatSet);
    void onAnimationStart(android.view.View);
    void onEnd();
    void onAnimationEnd(android.view.View);
}

-keep class androidx.appcompat.view.ViewPropertyAnimatorCompatSet

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.WindowCallbackWrapper {
    android.view.Window$Callback mWrapped;    <init>(android.view.Window$Callback);
    boolean dispatchKeyEvent(android.view.KeyEvent);
    boolean dispatchKeyShortcutEvent(android.view.KeyEvent);
    boolean dispatchTouchEvent(android.view.MotionEvent);
    boolean dispatchTrackballEvent(android.view.MotionEvent);
    boolean dispatchGenericMotionEvent(android.view.MotionEvent);
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
    android.view.View onCreatePanelView(int);
    boolean onCreatePanelMenu(int,android.view.Menu);
    boolean onPreparePanel(int,android.view.View,android.view.Menu);
    boolean onMenuOpened(int,android.view.Menu);
    boolean onMenuItemSelected(int,android.view.MenuItem);
    void onWindowAttributesChanged(android.view.WindowManager$LayoutParams);
    void onContentChanged();
    void onWindowFocusChanged(boolean);
    void onAttachedToWindow();
    void onDetachedFromWindow();
    void onPanelClosed(int,android.view.Menu);
    boolean onSearchRequested(android.view.SearchEvent);
    boolean onSearchRequested();
    android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback);
    android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int);
    void onActionModeStarted(android.view.ActionMode);
    void onActionModeFinished(android.view.ActionMode);
    void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int);
    void onPointerCaptureChanged(boolean);
    android.view.Window$Callback getWrapped();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.ActionMenuItem {
    int mId;    int mGroup;    int mOrdering;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.ActionMenuItemView$ActionMenuItemForwardingListener {
    androidx.appcompat.view.menu.ActionMenuItemView this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.view.menu.ActionMenuItemView$PopupCallback {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.BaseMenuWrapper {
    android.content.Context mContext;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.CascadingMenuPopup {
    android.content.Context mContext;    int mMenuMaxWidth;    int mPopupStyleAttr;    int mPopupStyleRes;    boolean mOverflowOnly;    android.os.Handler mSubMenuHoverHandler;    java.util.List mPendingMenus;    java.util.List mShowingMenus;    android.view.ViewTreeObserver$OnGlobalLayoutListener mGlobalLayoutListener;    android.view.View$OnAttachStateChangeListener mAttachStateChangeListener;    androidx.appcompat.widget.MenuItemHoverListener mMenuItemHoverListener;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.CascadingMenuPopup$1 {
    androidx.appcompat.view.menu.CascadingMenuPopup this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.CascadingMenuPopup$2 {
    androidx.appcompat.view.menu.CascadingMenuPopup this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.CascadingMenuPopup$3 {
    androidx.appcompat.view.menu.CascadingMenuPopup this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.CascadingMenuPopup$3$1 {
    androidx.appcompat.view.menu.CascadingMenuPopup$CascadingMenuInfo val$nextInfo;    android.view.MenuItem val$item;    androidx.appcompat.view.menu.MenuBuilder val$menu;    androidx.appcompat.view.menu.CascadingMenuPopup$3 this$1;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.CascadingMenuPopup$CascadingMenuInfo {
    androidx.appcompat.widget.MenuPopupWindow window;    androidx.appcompat.view.menu.MenuBuilder menu;    int position;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter {
    androidx.appcompat.view.menu.ListMenuPresenter this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.MenuAdapter {
    boolean mOverflowOnly;    android.view.LayoutInflater mInflater;    int mItemLayoutRes;}

-keep class androidx.appcompat.view.menu.MenuBuilder

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.MenuBuilder {
    android.content.Context mContext;    android.content.res.Resources mResources;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.MenuItemImpl {
    int mId;    int mGroup;    int mCategoryOrder;    int mOrdering;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.MenuItemImpl$1 {
    androidx.appcompat.view.menu.MenuItemImpl this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.MenuItemWrapperICS {
    androidx.core.internal.view.SupportMenuItem mWrappedObject;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.MenuItemWrapperICS$ActionProviderWrapper {
    android.view.ActionProvider mInner;    androidx.appcompat.view.menu.MenuItemWrapperICS this$0;    <init>(androidx.appcompat.view.menu.MenuItemWrapperICS,android.content.Context,android.view.ActionProvider);
    android.view.View onCreateActionView();
    boolean onPerformDefaultAction();
    boolean hasSubMenu();
    void onPrepareSubMenu(android.view.SubMenu);
}

-keep class androidx.appcompat.view.menu.MenuItemWrapperICS

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.MenuItemWrapperICS$ActionProviderWrapperJB {
    androidx.core.view.ActionProvider$VisibilityListener mListener;    androidx.appcompat.view.menu.MenuItemWrapperICS this$0;    <init>(androidx.appcompat.view.menu.MenuItemWrapperICS,android.content.Context,android.view.ActionProvider);
    android.view.View onCreateActionView(android.view.MenuItem);
    boolean overridesItemVisibility();
    boolean isVisible();
    void refreshVisibility();
    void setVisibilityListener(androidx.core.view.ActionProvider$VisibilityListener);
    void onActionProviderVisibilityChanged(boolean);
}

-keep class androidx.appcompat.view.menu.MenuItemWrapperICS

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.MenuItemWrapperICS$CollapsibleActionViewWrapper {
    android.view.CollapsibleActionView mWrappedView;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.MenuItemWrapperICS$OnActionExpandListenerWrapper {
    android.view.MenuItem$OnActionExpandListener mObject;    androidx.appcompat.view.menu.MenuItemWrapperICS this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.MenuItemWrapperICS$OnMenuItemClickListenerWrapper {
    android.view.MenuItem$OnMenuItemClickListener mObject;    androidx.appcompat.view.menu.MenuItemWrapperICS this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.view.menu.MenuPopup {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.MenuPopupHelper {
    android.content.Context mContext;    androidx.appcompat.view.menu.MenuBuilder mMenu;    boolean mOverflowOnly;    int mPopupStyleAttr;    int mPopupStyleRes;    android.widget.PopupWindow$OnDismissListener mInternalOnDismissListener;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.MenuPopupHelper$1 {
    androidx.appcompat.view.menu.MenuPopupHelper this$0;}

-keep class androidx.appcompat.view.menu.MenuPresenter$Callback

-keep class androidx.appcompat.view.menu.MenuView

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.MenuWrapperICS {
    androidx.core.internal.view.SupportMenu mWrappedObject;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.StandardMenuPopup {
    android.content.Context mContext;    androidx.appcompat.view.menu.MenuBuilder mMenu;    androidx.appcompat.view.menu.MenuAdapter mAdapter;    boolean mOverflowOnly;    int mPopupMaxWidth;    int mPopupStyleAttr;    int mPopupStyleRes;    androidx.appcompat.widget.MenuPopupWindow mPopup;    android.view.ViewTreeObserver$OnGlobalLayoutListener mGlobalLayoutListener;    android.view.View$OnAttachStateChangeListener mAttachStateChangeListener;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.StandardMenuPopup$1 {
    androidx.appcompat.view.menu.StandardMenuPopup this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.StandardMenuPopup$2 {
    androidx.appcompat.view.menu.StandardMenuPopup this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.view.menu.SubMenuWrapperICS {
    androidx.core.internal.view.SupportSubMenu mSubMenu;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AbsActionBarView {
    androidx.appcompat.widget.AbsActionBarView$VisibilityAnimListener mVisAnimListener;    android.content.Context mPopupContext;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AbsActionBarView$1 {
    androidx.appcompat.widget.AbsActionBarView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AbsActionBarView$VisibilityAnimListener {
    androidx.appcompat.widget.AbsActionBarView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActionBarBackgroundDrawable {
    androidx.appcompat.widget.ActionBarContainer mContainer;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActionBarContextView$1 {
    androidx.appcompat.view.ActionMode val$mode;    androidx.appcompat.widget.ActionBarContextView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActionBarOverlayLayout {
    android.graphics.Rect mBaseContentInsets;    android.graphics.Rect mLastBaseContentInsets;    android.graphics.Rect mContentInsets;    android.graphics.Rect mBaseInnerInsetsRect;    android.graphics.Rect mLastBaseInnerInsetsRect;    android.graphics.Rect mInnerInsetsRect;    android.graphics.Rect mLastInnerInsetsRect;    android.animation.AnimatorListenerAdapter mTopAnimatorListener;    java.lang.Runnable mRemoveActionBarHideOffset;    java.lang.Runnable mAddActionBarHideOffset;    androidx.core.view.NestedScrollingParentHelper mParentHelper;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActionBarOverlayLayout$1 {
    androidx.appcompat.widget.ActionBarOverlayLayout this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActionBarOverlayLayout$2 {
    androidx.appcompat.widget.ActionBarOverlayLayout this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActionBarOverlayLayout$3 {
    androidx.appcompat.widget.ActionBarOverlayLayout this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActionMenuPresenter {
    android.util.SparseBooleanArray mActionButtonGroups;    androidx.appcompat.widget.ActionMenuPresenter$PopupPresenterCallback mPopupPresenterCallback;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActionMenuPresenter$ActionButtonSubmenu {
    androidx.appcompat.widget.ActionMenuPresenter this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActionMenuPresenter$ActionMenuPopupCallback {
    androidx.appcompat.widget.ActionMenuPresenter this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActionMenuPresenter$OpenOverflowRunnable {
    androidx.appcompat.widget.ActionMenuPresenter this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton {
    androidx.appcompat.widget.ActionMenuPresenter this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton$1 {
    androidx.appcompat.widget.ActionMenuPresenter val$this$0;    androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton this$1;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActionMenuPresenter$OverflowPopup {
    androidx.appcompat.widget.ActionMenuPresenter this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActionMenuPresenter$PopupPresenterCallback {
    androidx.appcompat.widget.ActionMenuPresenter this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.widget.ActionMenuPresenter$SavedState {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.widget.ActionMenuPresenter$SavedState$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.widget.ActionMenuView$ActionMenuPresenterCallback {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActionMenuView$MenuBuilderCallback {
    androidx.appcompat.widget.ActionMenuView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActivityChooserModel {
    java.lang.Object mInstanceLock;    java.util.List mActivities;    java.util.List mHistoricalRecords;    android.content.Context mContext;    java.lang.String mHistoryFileName;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActivityChooserModel$ActivityResolveInfo {
    android.content.pm.ResolveInfo resolveInfo;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.widget.ActivityChooserModel$DefaultSorter {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActivityChooserModel$DefaultSorter {
    java.util.Map mPackageNameToActivityMap;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActivityChooserModel$HistoricalRecord {
    android.content.ComponentName activity;    long time;    float weight;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActivityChooserModel$PersistHistoryAsyncTask {
    androidx.appcompat.widget.ActivityChooserModel this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActivityChooserView {
    androidx.appcompat.widget.ActivityChooserView$ActivityChooserViewAdapter mAdapter;    androidx.appcompat.widget.ActivityChooserView$Callbacks mCallbacks;    android.view.View mActivityChooserContent;    android.graphics.drawable.Drawable mActivityChooserContentBackground;    android.widget.FrameLayout mExpandActivityOverflowButton;    android.widget.ImageView mExpandActivityOverflowButtonImage;    android.widget.FrameLayout mDefaultActivityButton;    android.widget.ImageView mDefaultActivityButtonImage;    int mListPopupMaxWidth;    android.database.DataSetObserver mModelDataSetObserver;    android.view.ViewTreeObserver$OnGlobalLayoutListener mOnGlobalLayoutListener;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActivityChooserView$1 {
    androidx.appcompat.widget.ActivityChooserView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActivityChooserView$2 {
    androidx.appcompat.widget.ActivityChooserView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActivityChooserView$3 {
    androidx.appcompat.widget.ActivityChooserView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActivityChooserView$4 {
    androidx.appcompat.widget.ActivityChooserView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActivityChooserView$5 {
    androidx.appcompat.widget.ActivityChooserView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActivityChooserView$ActivityChooserViewAdapter {
    androidx.appcompat.widget.ActivityChooserView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ActivityChooserView$Callbacks {
    androidx.appcompat.widget.ActivityChooserView this$0;}

-keep class androidx.appcompat.widget.AppCompatAutoCompleteTextView

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatAutoCompleteTextView {
    int[] TINT_ATTRS;    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper;    androidx.appcompat.widget.AppCompatTextHelper mTextHelper;    android.content.res.ColorStateList getSupportBackgroundTintList();
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode();
    void drawableStateChanged();
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo);
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatBackgroundHelper {
    android.view.View mView;    androidx.appcompat.widget.AppCompatDrawableManager mDrawableManager;    int mBackgroundResId;    androidx.appcompat.widget.TintInfo mInternalBackgroundTint;    androidx.appcompat.widget.TintInfo mBackgroundTint;    androidx.appcompat.widget.TintInfo mTmpInfo;    <init>(android.view.View);
    void loadFromAttributes(android.util.AttributeSet,int);
    void onSetBackgroundResource(int);
    void onSetBackgroundDrawable(android.graphics.drawable.Drawable);
    void setSupportBackgroundTintList(android.content.res.ColorStateList);
    android.content.res.ColorStateList getSupportBackgroundTintList();
    void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode);
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode();
    void applySupportBackgroundTint();
    void setInternalBackgroundTint(android.content.res.ColorStateList);
    boolean shouldApplyFrameworkTintUsingColorFilter();
    boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable);
}

-keep class androidx.appcompat.widget.AppCompatButton

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatButton {
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper;    androidx.appcompat.widget.AppCompatTextHelper mTextHelper;    android.content.res.ColorStateList getSupportBackgroundTintList();
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode();
    void drawableStateChanged();
    void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
    void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo);
    void onLayout(boolean,int,int,int,int);
    void onTextChanged(java.lang.CharSequence,int,int,int);
    int getAutoSizeTextType();
    int getAutoSizeStepGranularity();
    int getAutoSizeMinTextSize();
    int getAutoSizeMaxTextSize();
    int[] getAutoSizeTextAvailableSizes();
    android.content.res.ColorStateList getSupportCompoundDrawablesTintList();
    android.graphics.PorterDuff$Mode getSupportCompoundDrawablesTintMode();
}

-keep class androidx.appcompat.widget.AppCompatCheckBox

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatCheckBox {
    androidx.appcompat.widget.AppCompatCompoundButtonHelper mCompoundButtonHelper;    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper;    androidx.appcompat.widget.AppCompatTextHelper mTextHelper;    int getCompoundPaddingLeft();
    android.content.res.ColorStateList getSupportButtonTintList();
    android.graphics.PorterDuff$Mode getSupportButtonTintMode();
    android.content.res.ColorStateList getSupportBackgroundTintList();
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode();
    void drawableStateChanged();
}

-keep class androidx.appcompat.widget.AppCompatCheckedTextView

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatCheckedTextView {
    int[] TINT_ATTRS;    androidx.appcompat.widget.AppCompatTextHelper mTextHelper;    void drawableStateChanged();
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo);
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatCompoundButtonHelper {
    android.widget.CompoundButton mView;    android.content.res.ColorStateList mButtonTintList;    android.graphics.PorterDuff$Mode mButtonTintMode;    boolean mHasButtonTint;    boolean mHasButtonTintMode;    boolean mSkipNextApply;    <init>(android.widget.CompoundButton);
    void loadFromAttributes(android.util.AttributeSet,int);
    void setSupportButtonTintList(android.content.res.ColorStateList);
    android.content.res.ColorStateList getSupportButtonTintList();
    void setSupportButtonTintMode(android.graphics.PorterDuff$Mode);
    android.graphics.PorterDuff$Mode getSupportButtonTintMode();
    void onSetButtonDrawable();
    void applyButtonTint();
    int getCompoundPaddingLeft(int);
}

-keepclassmembers,allowobfuscation class androidx.appcompat.widget.AppCompatDrawableManager {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatDrawableManager {
    java.lang.String TAG;    boolean DEBUG;    android.graphics.PorterDuff$Mode DEFAULT_MODE;    androidx.appcompat.widget.AppCompatDrawableManager INSTANCE;    androidx.appcompat.widget.ResourceManagerInternal mResourceManager;    void preload();
    androidx.appcompat.widget.AppCompatDrawableManager get();
    android.graphics.drawable.Drawable getDrawable(android.content.Context,int);
    android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean);
    void onConfigurationChanged(android.content.Context);
    android.graphics.drawable.Drawable onDrawableLoadedFromResources(android.content.Context,androidx.appcompat.widget.VectorEnabledTintResources,int);
    boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable);
    android.content.res.ColorStateList getTintList(android.content.Context,int);
    void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[]);
    android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode);
    android.graphics.PorterDuff$Mode access$000();
    void <clinit>();
}

-keep class androidx.appcompat.widget.AppCompatDrawableManager

-keepclassmembers,allowobfuscation class androidx.appcompat.widget.AppCompatDrawableManager$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatDrawableManager$1 {
    int[] COLORFILTER_TINT_COLOR_CONTROL_NORMAL;    int[] TINT_COLOR_CONTROL_NORMAL;    int[] COLORFILTER_COLOR_CONTROL_ACTIVATED;    int[] COLORFILTER_COLOR_BACKGROUND_MULTIPLY;    int[] TINT_COLOR_CONTROL_STATE_LIST;    int[] TINT_CHECKABLE_BUTTON_LIST;    android.content.res.ColorStateList createDefaultButtonColorStateList(android.content.Context);
    android.content.res.ColorStateList createBorderlessButtonColorStateList(android.content.Context);
    android.content.res.ColorStateList createColoredButtonColorStateList(android.content.Context);
    android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int);
    android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context);
    android.graphics.drawable.Drawable createDrawableFor(androidx.appcompat.widget.ResourceManagerInternal,android.content.Context,int);
    android.graphics.drawable.LayerDrawable getRatingBarLayerDrawable(androidx.appcompat.widget.ResourceManagerInternal,android.content.Context,int);
    void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode);
    boolean tintDrawable(android.content.Context,int,android.graphics.drawable.Drawable);
    boolean arrayContains(int[],int);
    android.content.res.ColorStateList getTintListForDrawableRes(android.content.Context,int);
    boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable);
    android.graphics.PorterDuff$Mode getTintModeForDrawableRes(int);
}

-keep class androidx.appcompat.widget.ResourceManagerInternal

-keep class androidx.appcompat.widget.AppCompatEditText

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatEditText {
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper;    androidx.appcompat.widget.AppCompatTextHelper mTextHelper;    androidx.appcompat.widget.AppCompatTextClassifierHelper mTextClassifierHelper;    androidx.core.widget.TextViewOnReceiveContentListener mDefaultOnReceiveContentListener;    android.text.Editable getText();
    android.content.res.ColorStateList getSupportBackgroundTintList();
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode();
    void drawableStateChanged();
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo);
    android.view.textclassifier.TextClassifier getTextClassifier();
    boolean onDragEvent(android.view.DragEvent);
    boolean onTextContextMenuItem(int);
    androidx.core.view.ContentInfoCompat onReceiveContent(androidx.core.view.ContentInfoCompat);
    java.lang.CharSequence getText();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatHintHelper {
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo,android.view.View);
    <init>();
}

-keep class androidx.appcompat.widget.AppCompatImageButton

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatImageButton {
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper;    androidx.appcompat.widget.AppCompatImageHelper mImageHelper;    android.content.res.ColorStateList getSupportBackgroundTintList();
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode();
    android.content.res.ColorStateList getSupportImageTintList();
    android.graphics.PorterDuff$Mode getSupportImageTintMode();
    void drawableStateChanged();
    boolean hasOverlappingRendering();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatImageHelper {
    android.widget.ImageView mView;    androidx.appcompat.widget.TintInfo mInternalImageTint;    androidx.appcompat.widget.TintInfo mImageTint;    androidx.appcompat.widget.TintInfo mTmpInfo;    <init>(android.widget.ImageView);
    void loadFromAttributes(android.util.AttributeSet,int);
    void setImageResource(int);
    boolean hasOverlappingRendering();
    void setSupportImageTintList(android.content.res.ColorStateList);
    android.content.res.ColorStateList getSupportImageTintList();
    void setSupportImageTintMode(android.graphics.PorterDuff$Mode);
    android.graphics.PorterDuff$Mode getSupportImageTintMode();
    void applySupportImageTint();
    void setInternalImageTint(android.content.res.ColorStateList);
    boolean shouldApplyFrameworkTintUsingColorFilter();
    boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable);
}

-keep class androidx.appcompat.widget.AppCompatImageView

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatImageView {
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper;    androidx.appcompat.widget.AppCompatImageHelper mImageHelper;    android.content.res.ColorStateList getSupportBackgroundTintList();
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode();
    android.content.res.ColorStateList getSupportImageTintList();
    android.graphics.PorterDuff$Mode getSupportImageTintMode();
    void drawableStateChanged();
    boolean hasOverlappingRendering();
}

-keep class androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView {
    int[] TINT_ATTRS;    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper;    androidx.appcompat.widget.AppCompatTextHelper mTextHelper;    android.content.res.ColorStateList getSupportBackgroundTintList();
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode();
    void drawableStateChanged();
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo);
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatPopupWindow {
    boolean COMPAT_OVERLAP_ANCHOR;    boolean mOverlapAnchor;    <init>(android.content.Context,android.util.AttributeSet,int,int);
    void init(android.content.Context,android.util.AttributeSet,int,int);
    void showAsDropDown(android.view.View,int,int);
    void showAsDropDown(android.view.View,int,int,int);
    void update(android.view.View,int,int,int,int);
    void setSupportOverlapAnchor(boolean);
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatProgressBarHelper {
    int[] TINT_ATTRS;    android.widget.ProgressBar mView;    android.graphics.Bitmap mSampleTile;    <init>(android.widget.ProgressBar);
    void loadFromAttributes(android.util.AttributeSet,int);
    android.graphics.drawable.Drawable tileify(android.graphics.drawable.Drawable,boolean);
    android.graphics.drawable.Drawable tileifyIndeterminate(android.graphics.drawable.Drawable);
    android.graphics.drawable.shapes.Shape getDrawableShape();
    android.graphics.Bitmap getSampleTile();
    void <clinit>();
}

-keep class androidx.appcompat.widget.AppCompatRadioButton

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatRadioButton {
    androidx.appcompat.widget.AppCompatCompoundButtonHelper mCompoundButtonHelper;    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper;    androidx.appcompat.widget.AppCompatTextHelper mTextHelper;    int getCompoundPaddingLeft();
    android.content.res.ColorStateList getSupportButtonTintList();
    android.graphics.PorterDuff$Mode getSupportButtonTintMode();
    android.content.res.ColorStateList getSupportBackgroundTintList();
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode();
    void drawableStateChanged();
}

-keep class androidx.appcompat.widget.AppCompatRatingBar

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatRatingBar {
    androidx.appcompat.widget.AppCompatProgressBarHelper mAppCompatProgressBarHelper;    void onMeasure(int,int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatReceiveContentHelper {
    java.lang.String LOG_TAG;    java.lang.String EXTRA_INPUT_CONTENT_INFO;    <init>();
    boolean maybeHandleMenuActionViaPerformReceiveContent(android.widget.TextView,int);
    boolean maybeHandleDragEventViaPerformReceiveContent(android.view.View,android.view.DragEvent);
    android.app.Activity tryGetActivity(android.view.View);
    androidx.core.view.inputmethod.InputConnectionCompat$OnCommitContentListener createOnCommitContentListener(android.view.View);
}

-keep class androidx.core.view.inputmethod.InputConnectionCompat$OnCommitContentListener

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatReceiveContentHelper$1 {
    android.view.View val$view;    <init>(android.view.View);
    boolean onCommitContent(androidx.core.view.inputmethod.InputContentInfoCompat,int,android.os.Bundle);
}

-keep class androidx.core.view.inputmethod.InputContentInfoCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatReceiveContentHelper$OnDropApi24Impl {
    <init>();
    boolean onDropForTextView(android.view.DragEvent,android.widget.TextView,android.app.Activity);
    boolean onDropForView(android.view.DragEvent,android.view.View,android.app.Activity);
}

-keep class androidx.appcompat.widget.AppCompatSeekBar

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatSeekBar {
    androidx.appcompat.widget.AppCompatSeekBarHelper mAppCompatSeekBarHelper;    void onDraw(android.graphics.Canvas);
    void drawableStateChanged();
    void jumpDrawablesToCurrentState();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatSeekBarHelper {
    android.widget.SeekBar mView;    android.graphics.drawable.Drawable mTickMark;    android.content.res.ColorStateList mTickMarkTintList;    android.graphics.PorterDuff$Mode mTickMarkTintMode;    boolean mHasTickMarkTint;    boolean mHasTickMarkTintMode;    <init>(android.widget.SeekBar);
    void loadFromAttributes(android.util.AttributeSet,int);
    void setTickMark(android.graphics.drawable.Drawable);
    android.graphics.drawable.Drawable getTickMark();
    void setTickMarkTintList(android.content.res.ColorStateList);
    android.content.res.ColorStateList getTickMarkTintList();
    void setTickMarkTintMode(android.graphics.PorterDuff$Mode);
    android.graphics.PorterDuff$Mode getTickMarkTintMode();
    void applyTickMarkTint();
    void jumpDrawablesToCurrentState();
    void drawableStateChanged();
    void drawTickMarks(android.graphics.Canvas);
}

-keep class androidx.appcompat.widget.AppCompatSpinner

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatSpinner {
    int[] ATTRS_ANDROID_SPINNERMODE;    int MAX_ITEMS_MEASURED;    java.lang.String TAG;    int MODE_DIALOG;    int MODE_DROPDOWN;    int MODE_THEME;    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper;    android.content.Context mPopupContext;    androidx.appcompat.widget.ForwardingListener mForwardingListener;    android.widget.SpinnerAdapter mTempAdapter;    boolean mPopupSet;    androidx.appcompat.widget.AppCompatSpinner$SpinnerPopup mPopup;    int mDropDownWidth;    android.graphics.Rect mTempRect;    <init>(android.content.Context,int);
    <init>(android.content.Context,android.util.AttributeSet,int,int);
    <init>(android.content.Context,android.util.AttributeSet,int,int,android.content.res.Resources$Theme);
    android.content.Context getPopupContext();
    android.graphics.drawable.Drawable getPopupBackground();
    int getDropDownVerticalOffset();
    int getDropDownHorizontalOffset();
    int getDropDownWidth();
    void onDetachedFromWindow();
    boolean onTouchEvent(android.view.MotionEvent);
    void onMeasure(int,int);
    boolean performClick();
    java.lang.CharSequence getPrompt();
    android.content.res.ColorStateList getSupportBackgroundTintList();
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode();
    void drawableStateChanged();
    int compatMeasureContentWidth(android.widget.SpinnerAdapter,android.graphics.drawable.Drawable);
    androidx.appcompat.widget.AppCompatSpinner$SpinnerPopup getInternalPopup();
    void showPopup();
    android.os.Parcelable onSaveInstanceState();
    void onRestoreInstanceState(android.os.Parcelable);
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatSpinner$1 {
    androidx.appcompat.widget.AppCompatSpinner$DropdownPopup val$popup;    androidx.appcompat.widget.AppCompatSpinner this$0;    <init>(androidx.appcompat.widget.AppCompatSpinner,android.view.View,androidx.appcompat.widget.AppCompatSpinner$DropdownPopup);
    androidx.appcompat.view.menu.ShowableListMenu getPopup();
    boolean onForwardingStarted();
}

-keep class androidx.appcompat.widget.AppCompatSpinner

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatSpinner$2 {
    androidx.appcompat.widget.AppCompatSpinner this$0;    <init>(androidx.appcompat.widget.AppCompatSpinner);
    void onGlobalLayout();
}

-keep class androidx.appcompat.widget.AppCompatSpinner

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatSpinner$DialogPopup {
    androidx.appcompat.app.AlertDialog mPopup;    android.widget.ListAdapter mListAdapter;    java.lang.CharSequence mPrompt;    androidx.appcompat.widget.AppCompatSpinner this$0;    <init>(androidx.appcompat.widget.AppCompatSpinner);
    void dismiss();
    boolean isShowing();
    void setAdapter(android.widget.ListAdapter);
    void setPromptText(java.lang.CharSequence);
    java.lang.CharSequence getHintText();
    void show(int,int);
    void onClick(android.content.DialogInterface,int);
    void setBackgroundDrawable(android.graphics.drawable.Drawable);
    void setVerticalOffset(int);
    void setHorizontalOffset(int);
    android.graphics.drawable.Drawable getBackground();
    int getVerticalOffset();
    int getHorizontalOffset();
    void setHorizontalOriginalOffset(int);
    int getHorizontalOriginalOffset();
}

-keep class androidx.appcompat.widget.AppCompatSpinner

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatSpinner$DropDownAdapter {
    android.widget.SpinnerAdapter mAdapter;    android.widget.ListAdapter mListAdapter;    <init>(android.widget.SpinnerAdapter,android.content.res.Resources$Theme);
    int getCount();
    java.lang.Object getItem(int);
    long getItemId(int);
    android.view.View getView(int,android.view.View,android.view.ViewGroup);
    android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup);
    boolean hasStableIds();
    void registerDataSetObserver(android.database.DataSetObserver);
    void unregisterDataSetObserver(android.database.DataSetObserver);
    boolean areAllItemsEnabled();
    boolean isEnabled(int);
    int getItemViewType(int);
    int getViewTypeCount();
    boolean isEmpty();
}

-keep class androidx.appcompat.widget.AppCompatSpinner$DropdownPopup

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatSpinner$DropdownPopup {
    java.lang.CharSequence mHintText;    android.widget.ListAdapter mAdapter;    android.graphics.Rect mVisibleRect;    int mOriginalHorizontalOffset;    androidx.appcompat.widget.AppCompatSpinner this$0;    <init>(androidx.appcompat.widget.AppCompatSpinner,android.content.Context,android.util.AttributeSet,int);
    void setAdapter(android.widget.ListAdapter);
    java.lang.CharSequence getHintText();
    void setPromptText(java.lang.CharSequence);
    void computeContentWidth();
    void show(int,int);
    boolean isVisibleToUser(android.view.View);
    void setHorizontalOriginalOffset(int);
    int getHorizontalOriginalOffset();
    void access$001(androidx.appcompat.widget.AppCompatSpinner$DropdownPopup);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatSpinner$DropdownPopup$1 {
    androidx.appcompat.widget.AppCompatSpinner val$this$0;    androidx.appcompat.widget.AppCompatSpinner$DropdownPopup this$1;    <init>(androidx.appcompat.widget.AppCompatSpinner$DropdownPopup,androidx.appcompat.widget.AppCompatSpinner);
    void onItemClick(android.widget.AdapterView,android.view.View,int,long);
}

-keep class androidx.appcompat.widget.AppCompatSpinner$DropdownPopup

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatSpinner$DropdownPopup$2 {
    androidx.appcompat.widget.AppCompatSpinner$DropdownPopup this$1;    <init>(androidx.appcompat.widget.AppCompatSpinner$DropdownPopup);
    void onGlobalLayout();
}

-keep class androidx.appcompat.widget.AppCompatSpinner$DropdownPopup

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatSpinner$DropdownPopup$3 {
    android.view.ViewTreeObserver$OnGlobalLayoutListener val$layoutListener;    androidx.appcompat.widget.AppCompatSpinner$DropdownPopup this$1;    <init>(androidx.appcompat.widget.AppCompatSpinner$DropdownPopup,android.view.ViewTreeObserver$OnGlobalLayoutListener);
    void onDismiss();
}

-keep class androidx.appcompat.widget.AppCompatSpinner$DropdownPopup

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatSpinner$SavedState {
    boolean mShowDropdown;    <init>(android.os.Parcelable);
    <init>(android.os.Parcel);
    void writeToParcel(android.os.Parcel,int);
    void <clinit>();
}

-keepclassmembers,allowobfuscation class androidx.appcompat.widget.AppCompatSpinner$SavedState$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatSpinner$SavedState$1 {
    androidx.appcompat.widget.AppCompatSpinner$SavedState createFromParcel(android.os.Parcel);
    androidx.appcompat.widget.AppCompatSpinner$SavedState[] newArray(int);
    java.lang.Object[] newArray(int);
    java.lang.Object createFromParcel(android.os.Parcel);
}

-keep class androidx.appcompat.widget.AppCompatSpinner$SavedState

-keep class androidx.appcompat.widget.AppCompatSpinner$SpinnerPopup

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatSpinner$SpinnerPopup {
    void setAdapter(android.widget.ListAdapter);
    void show(int,int);
    void dismiss();
    boolean isShowing();
    void setPromptText(java.lang.CharSequence);
    java.lang.CharSequence getHintText();
    void setBackgroundDrawable(android.graphics.drawable.Drawable);
    void setVerticalOffset(int);
    void setHorizontalOffset(int);
    void setHorizontalOriginalOffset(int);
    int getHorizontalOriginalOffset();
    android.graphics.drawable.Drawable getBackground();
    int getVerticalOffset();
    int getHorizontalOffset();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatTextClassifierHelper {
    android.widget.TextView mTextView;    android.view.textclassifier.TextClassifier mTextClassifier;    <init>(android.widget.TextView);
    void setTextClassifier(android.view.textclassifier.TextClassifier);
    android.view.textclassifier.TextClassifier getTextClassifier();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatTextHelper {
    int TEXT_FONT_WEIGHT_UNSPECIFIED;    int SANS;    int SERIF;    int MONOSPACE;    android.widget.TextView mView;    androidx.appcompat.widget.TintInfo mDrawableLeftTint;    androidx.appcompat.widget.TintInfo mDrawableTopTint;    androidx.appcompat.widget.TintInfo mDrawableRightTint;    androidx.appcompat.widget.TintInfo mDrawableBottomTint;    androidx.appcompat.widget.TintInfo mDrawableStartTint;    androidx.appcompat.widget.TintInfo mDrawableEndTint;    androidx.appcompat.widget.TintInfo mDrawableTint;    androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper mAutoSizeTextHelper;    int mStyle;    int mFontWeight;    android.graphics.Typeface mFontTypeface;    boolean mAsyncFontPending;    <init>(android.widget.TextView);
    void loadFromAttributes(android.util.AttributeSet,int);
    void updateTypefaceAndStyle(android.content.Context,androidx.appcompat.widget.TintTypedArray);
    void onAsyncTypefaceReceived(java.lang.ref.WeakReference,android.graphics.Typeface);
    void onSetTextAppearance(android.content.Context,int);
    void setAllCaps(boolean);
    void onSetCompoundDrawables();
    void applyCompoundDrawablesTints();
    void applyCompoundDrawableTint(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo);
    androidx.appcompat.widget.TintInfo createTintInfo(android.content.Context,androidx.appcompat.widget.AppCompatDrawableManager,int);
    void onLayout(boolean,int,int,int,int);
    void setTextSize(int,float);
    void autoSizeText();
    boolean isAutoSizeEnabled();
    void setTextSizeInternal(int,float);
    void setAutoSizeTextTypeWithDefaults(int);
    void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int);
    void setAutoSizeTextTypeUniformWithPresetSizes(int[],int);
    int getAutoSizeTextType();
    int getAutoSizeStepGranularity();
    int getAutoSizeMinTextSize();
    int getAutoSizeMaxTextSize();
    int[] getAutoSizeTextAvailableSizes();
    android.content.res.ColorStateList getCompoundDrawableTintList();
    void setCompoundDrawableTintList(android.content.res.ColorStateList);
    android.graphics.PorterDuff$Mode getCompoundDrawableTintMode();
    void setCompoundDrawableTintMode(android.graphics.PorterDuff$Mode);
    void setCompoundTints();
    void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable);
    void populateSurroundingTextIfNeeded(android.widget.TextView,android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo);
}

-keep class androidx.appcompat.widget.TintTypedArray

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatTextHelper$1 {
    int val$fontWeight;    int val$style;    java.lang.ref.WeakReference val$textViewWeak;    androidx.appcompat.widget.AppCompatTextHelper this$0;    <init>(androidx.appcompat.widget.AppCompatTextHelper,int,int,java.lang.ref.WeakReference);
    void onFontRetrieved(android.graphics.Typeface);
    void onFontRetrievalFailed(int);
}

-keep class androidx.appcompat.widget.AppCompatTextHelper

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatTextHelper$2 {
    android.widget.TextView val$textView;    android.graphics.Typeface val$typeface;    int val$style;    androidx.appcompat.widget.AppCompatTextHelper this$0;    <init>(androidx.appcompat.widget.AppCompatTextHelper,android.widget.TextView,android.graphics.Typeface,int);
    void run();
}

-keep class androidx.appcompat.widget.AppCompatTextHelper

-keep class androidx.appcompat.widget.AppCompatTextView

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatTextView {
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper;    androidx.appcompat.widget.AppCompatTextHelper mTextHelper;    androidx.appcompat.widget.AppCompatTextClassifierHelper mTextClassifierHelper;    boolean mIsSetTypefaceProcessing;    java.util.concurrent.Future mPrecomputedTextFuture;    android.content.res.ColorStateList getSupportBackgroundTintList();
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode();
    void drawableStateChanged();
    void onLayout(boolean,int,int,int,int);
    void onTextChanged(java.lang.CharSequence,int,int,int);
    int getAutoSizeTextType();
    int getAutoSizeStepGranularity();
    int getAutoSizeMinTextSize();
    int getAutoSizeMaxTextSize();
    int[] getAutoSizeTextAvailableSizes();
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo);
    int getFirstBaselineToTopHeight();
    int getLastBaselineToBottomHeight();
    androidx.core.text.PrecomputedTextCompat$Params getTextMetricsParamsCompat();
    void consumeTextFutureAndSetBlocking();
    java.lang.CharSequence getText();
    android.view.textclassifier.TextClassifier getTextClassifier();
    void onMeasure(int,int);
    android.content.res.ColorStateList getSupportCompoundDrawablesTintList();
    android.graphics.PorterDuff$Mode getSupportCompoundDrawablesTintMode();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper {
    java.lang.String TAG;    android.graphics.RectF TEMP_RECTF;    int DEFAULT_AUTO_SIZE_MIN_TEXT_SIZE_IN_SP;    int DEFAULT_AUTO_SIZE_MAX_TEXT_SIZE_IN_SP;    int DEFAULT_AUTO_SIZE_GRANULARITY_IN_PX;    java.util.concurrent.ConcurrentHashMap sTextViewMethodByNameCache;    java.util.concurrent.ConcurrentHashMap sTextViewFieldByNameCache;    float UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE;    int VERY_WIDE;    int mAutoSizeTextType;    boolean mNeedsAutoSizeText;    float mAutoSizeStepGranularityInPx;    float mAutoSizeMinTextSizeInPx;    float mAutoSizeMaxTextSizeInPx;    int[] mAutoSizeTextSizesInPx;    boolean mHasPresetAutoSizeValues;    android.text.TextPaint mTempTextPaint;    android.widget.TextView mTextView;    android.content.Context mContext;    androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Impl mImpl;    <init>(android.widget.TextView);
    void loadFromAttributes(android.util.AttributeSet,int);
    void setAutoSizeTextTypeWithDefaults(int);
    void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int);
    void setAutoSizeTextTypeUniformWithPresetSizes(int[],int);
    int getAutoSizeTextType();
    int getAutoSizeStepGranularity();
    int getAutoSizeMinTextSize();
    int getAutoSizeMaxTextSize();
    int[] getAutoSizeTextAvailableSizes();
    void setupAutoSizeUniformPresetSizes(android.content.res.TypedArray);
    boolean setupAutoSizeUniformPresetSizesConfiguration();
    int[] cleanupAutoSizePresetSizes(int[]);
    void validateAndSetAutoSizeTextTypeUniformConfiguration(float,float,float);
    boolean setupAutoSizeText();
    void autoSizeText();
    void clearAutoSizeConfiguration();
    void setTextSizeInternal(int,float);
    void setRawTextSize(float);
    int findLargestTextSizeWhichFits(android.graphics.RectF);
    void initTempTextPaint(int);
    android.text.StaticLayout createLayout(java.lang.CharSequence,android.text.Layout$Alignment,int,int);
    boolean suggestedSizeFitsInSpace(int,android.graphics.RectF);
    android.text.StaticLayout createStaticLayoutForMeasuring(java.lang.CharSequence,android.text.Layout$Alignment,int,int);
    android.text.StaticLayout createStaticLayoutForMeasuringPre23(java.lang.CharSequence,android.text.Layout$Alignment,int);
    android.text.StaticLayout createStaticLayoutForMeasuringPre16(java.lang.CharSequence,android.text.Layout$Alignment,int);
    java.lang.Object invokeAndReturnWithDefault(java.lang.Object,java.lang.String,java.lang.Object);
    java.lang.Object accessAndReturnWithDefault(java.lang.Object,java.lang.String,java.lang.Object);
    java.lang.reflect.Method getTextViewMethod(java.lang.String);
    java.lang.reflect.Field getTextViewField(java.lang.String);
    boolean isAutoSizeEnabled();
    boolean supportsAutoSizeText();
    void <clinit>();
}

-keepclassmembers,allowobfuscation class androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Impl {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Impl {
    boolean isHorizontallyScrollable(android.widget.TextView);
    void computeAndSetTextDirection(android.text.StaticLayout$Builder,android.widget.TextView);
}

-keepclassmembers,allowobfuscation class androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Impl23 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Impl23 {
    void computeAndSetTextDirection(android.text.StaticLayout$Builder,android.widget.TextView);
}

-keepclassmembers,allowobfuscation class androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Impl29 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Impl29 {
    boolean isHorizontallyScrollable(android.widget.TextView);
    void computeAndSetTextDirection(android.text.StaticLayout$Builder,android.widget.TextView);
}

-keep class androidx.appcompat.widget.AppCompatToggleButton

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.AppCompatToggleButton {
    androidx.appcompat.widget.AppCompatBackgroundHelper mBackgroundTintHelper;    androidx.appcompat.widget.AppCompatTextHelper mTextHelper;    android.content.res.ColorStateList getSupportBackgroundTintList();
    android.graphics.PorterDuff$Mode getSupportBackgroundTintMode();
    void drawableStateChanged();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ContentFrameLayout {
    android.util.TypedValue mMinWidthMajor;    android.util.TypedValue mMinWidthMinor;    android.util.TypedValue mFixedWidthMajor;    android.util.TypedValue mFixedWidthMinor;    android.util.TypedValue mFixedHeightMajor;    android.util.TypedValue mFixedHeightMinor;    android.graphics.Rect mDecorPadding;    androidx.appcompat.widget.ContentFrameLayout$OnAttachListener mAttachListener;    void dispatchFitSystemWindows(android.graphics.Rect);
    void onMeasure(int,int);
    android.util.TypedValue getMinWidthMajor();
    android.util.TypedValue getMinWidthMinor();
    android.util.TypedValue getFixedWidthMajor();
    android.util.TypedValue getFixedWidthMinor();
    android.util.TypedValue getFixedHeightMajor();
    android.util.TypedValue getFixedHeightMinor();
    void onAttachedToWindow();
    void onDetachedFromWindow();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.DropDownListView {
    android.graphics.Rect mSelectorRect;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.DropDownListView$ResolveHoverRunnable {
    androidx.appcompat.widget.DropDownListView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ForwardingListener {
    float mScaledTouchSlop;    int mTapTimeout;    int mLongPressTimeout;    android.view.View mSrc;    java.lang.Runnable mDisallowIntercept;    java.lang.Runnable mTriggerLongPress;    boolean mForwarding;    int mActivePointerId;    int[] mTmpLocation;    <init>(android.view.View);
    androidx.appcompat.view.menu.ShowableListMenu getPopup();
    boolean onTouch(android.view.View,android.view.MotionEvent);
    void onViewAttachedToWindow(android.view.View);
    void onViewDetachedFromWindow(android.view.View);
    boolean onForwardingStarted();
    boolean onForwardingStopped();
    boolean onTouchObserved(android.view.MotionEvent);
    void clearCallbacks();
    void onLongPress();
    boolean onTouchForwarded(android.view.MotionEvent);
    boolean pointInView(android.view.View,float,float,float);
    boolean toLocalMotionEvent(android.view.View,android.view.MotionEvent);
    boolean toGlobalMotionEvent(android.view.View,android.view.MotionEvent);
}

-keep class androidx.appcompat.view.menu.ShowableListMenu

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ForwardingListener$DisallowIntercept {
    androidx.appcompat.widget.ForwardingListener this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ForwardingListener$TriggerLongPress {
    androidx.appcompat.widget.ForwardingListener this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.LinearLayoutCompat {
    int HORIZONTAL;    int VERTICAL;    int SHOW_DIVIDER_NONE;    int SHOW_DIVIDER_BEGINNING;    int SHOW_DIVIDER_MIDDLE;    int SHOW_DIVIDER_END;    boolean mBaselineAligned;    int mBaselineAlignedChildIndex;    int mBaselineChildTop;    int mOrientation;    int mGravity;    int mTotalLength;    float mWeightSum;    boolean mUseLargestChild;    int[] mMaxAscent;    int[] mMaxDescent;    int VERTICAL_GRAVITY_COUNT;    int INDEX_CENTER_VERTICAL;    int INDEX_TOP;    int INDEX_BOTTOM;    int INDEX_FILL;    java.lang.String ACCESSIBILITY_CLASS_NAME;    android.graphics.drawable.Drawable mDivider;    int mDividerWidth;    int mDividerHeight;    int mShowDividers;    int mDividerPadding;    boolean shouldDelayChildPressedState();
    int getShowDividers();
    android.graphics.drawable.Drawable getDividerDrawable();
    int getDividerPadding();
    int getDividerWidth();
    void onDraw(android.graphics.Canvas);
    void drawDividersVertical(android.graphics.Canvas);
    void drawDividersHorizontal(android.graphics.Canvas);
    void drawHorizontalDivider(android.graphics.Canvas,int);
    void drawVerticalDivider(android.graphics.Canvas,int);
    boolean isBaselineAligned();
    boolean isMeasureWithLargestChildEnabled();
    int getBaseline();
    int getBaselineAlignedChildIndex();
    android.view.View getVirtualChildAt(int);
    int getVirtualChildCount();
    float getWeightSum();
    void onMeasure(int,int);
    boolean hasDividerBeforeChildAt(int);
    void measureVertical(int,int);
    void forceUniformWidth(int,int);
    void measureHorizontal(int,int);
    void forceUniformHeight(int,int);
    int getChildrenSkipCount(android.view.View,int);
    int measureNullChild(int);
    void measureChildBeforeLayout(android.view.View,int,int,int,int,int);
    int getLocationOffset(android.view.View);
    int getNextLocationOffset(android.view.View);
    void onLayout(boolean,int,int,int,int);
    void layoutVertical(int,int,int,int);
    void layoutHorizontal(int,int,int,int);
    void setChildFrame(android.view.View,int,int,int,int);
    int getOrientation();
    int getGravity();
    androidx.appcompat.widget.LinearLayoutCompat$LayoutParams generateLayoutParams(android.util.AttributeSet);
    androidx.appcompat.widget.LinearLayoutCompat$LayoutParams generateDefaultLayoutParams();
    androidx.appcompat.widget.LinearLayoutCompat$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams);
    void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
    void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo);
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams();
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams);
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet);
}

-keep class androidx.appcompat.widget.LinearLayoutCompat$LayoutParams

-keep class androidx.appcompat.widget.LinearLayoutCompat$LayoutParams

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.LinearLayoutCompat$LayoutParams {
    <init>(int,int);
    <init>(int,int,float);
    <init>(android.view.ViewGroup$LayoutParams);
    <init>(android.view.ViewGroup$MarginLayoutParams);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ListPopupWindow {
    java.lang.String TAG;    boolean DEBUG;    int EXPAND_LIST_TIMEOUT;    java.lang.reflect.Method sSetClipToWindowEnabledMethod;    java.lang.reflect.Method sGetMaxAvailableHeightMethod;    java.lang.reflect.Method sSetEpicenterBoundsMethod;    android.content.Context mContext;    android.widget.ListAdapter mAdapter;    androidx.appcompat.widget.DropDownListView mDropDownList;    int mDropDownHeight;    int mDropDownWidth;    int mDropDownHorizontalOffset;    int mDropDownVerticalOffset;    int mDropDownWindowLayoutType;    boolean mDropDownVerticalOffsetSet;    boolean mOverlapAnchor;    boolean mOverlapAnchorSet;    int mDropDownGravity;    boolean mDropDownAlwaysVisible;    boolean mForceIgnoreOutsideTouch;    int mListItemExpandMaximum;    android.view.View mPromptView;    int mPromptPosition;    android.database.DataSetObserver mObserver;    android.view.View mDropDownAnchorView;    android.graphics.drawable.Drawable mDropDownListHighlight;    android.widget.AdapterView$OnItemClickListener mItemClickListener;    android.widget.AdapterView$OnItemSelectedListener mItemSelectedListener;    androidx.appcompat.widget.ListPopupWindow$ResizePopupRunnable mResizePopupRunnable;    androidx.appcompat.widget.ListPopupWindow$PopupTouchInterceptor mTouchInterceptor;    androidx.appcompat.widget.ListPopupWindow$PopupScrollListener mScrollListener;    androidx.appcompat.widget.ListPopupWindow$ListSelectorHider mHideSelector;    java.lang.Runnable mShowDropDownRunnable;    android.os.Handler mHandler;    android.graphics.Rect mTempRect;    android.graphics.Rect mEpicenterBounds;    boolean mModal;    android.widget.PopupWindow mPopup;    int POSITION_PROMPT_ABOVE;    int POSITION_PROMPT_BELOW;    int MATCH_PARENT;    int WRAP_CONTENT;    int INPUT_METHOD_FROM_FOCUSABLE;    int INPUT_METHOD_NEEDED;    int INPUT_METHOD_NOT_NEEDED;    <init>(android.content.Context);
    <init>(android.content.Context,android.util.AttributeSet,int,int);
    void setAdapter(android.widget.ListAdapter);
    void setPromptPosition(int);
    int getPromptPosition();
    void setModal(boolean);
    boolean isModal();
    void setForceIgnoreOutsideTouch(boolean);
    void setDropDownAlwaysVisible(boolean);
    boolean isDropDownAlwaysVisible();
    void setSoftInputMode(int);
    int getSoftInputMode();
    void setListSelector(android.graphics.drawable.Drawable);
    android.graphics.drawable.Drawable getBackground();
    void setBackgroundDrawable(android.graphics.drawable.Drawable);
    void setAnimationStyle(int);
    int getAnimationStyle();
    android.view.View getAnchorView();
    void setAnchorView(android.view.View);
    int getHorizontalOffset();
    void setHorizontalOffset(int);
    int getVerticalOffset();
    void setVerticalOffset(int);
    void setEpicenterBounds(android.graphics.Rect);
    android.graphics.Rect getEpicenterBounds();
    void setDropDownGravity(int);
    int getWidth();
    void setWidth(int);
    void setContentWidth(int);
    int getHeight();
    void setHeight(int);
    void setWindowLayoutType(int);
    void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener);
    void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener);
    void setPromptView(android.view.View);
    void postShow();
    void show();
    void dismiss();
    void setOnDismissListener(android.widget.PopupWindow$OnDismissListener);
    void removePromptView();
    void setInputMethodMode(int);
    int getInputMethodMode();
    void setSelection(int);
    void clearListSelection();
    boolean isShowing();
    boolean isInputMethodNotNeeded();
    boolean performItemClick(int);
    java.lang.Object getSelectedItem();
    int getSelectedItemPosition();
    long getSelectedItemId();
    android.view.View getSelectedView();
    android.widget.ListView getListView();
    androidx.appcompat.widget.DropDownListView createDropDownListView(android.content.Context,boolean);
    void setListItemExpandMax(int);
    boolean onKeyDown(int,android.view.KeyEvent);
    boolean onKeyUp(int,android.view.KeyEvent);
    boolean onKeyPreIme(int,android.view.KeyEvent);
    android.view.View$OnTouchListener createDragToOpenListener(android.view.View);
    int buildDropDown();
    void setOverlapAnchor(boolean);
    boolean isConfirmKey(int);
    void setPopupClipToScreenEnabled(boolean);
    int getMaxAvailableHeight(android.view.View,int,boolean);
    void <clinit>();
}

-keep class androidx.appcompat.widget.DropDownListView

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ListPopupWindow$1 {
    androidx.appcompat.widget.ListPopupWindow this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ListPopupWindow$2 {
    androidx.appcompat.widget.ListPopupWindow this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ListPopupWindow$3 {
    androidx.appcompat.widget.ListPopupWindow this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ListPopupWindow$ListSelectorHider {
    androidx.appcompat.widget.ListPopupWindow this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ListPopupWindow$PopupDataSetObserver {
    androidx.appcompat.widget.ListPopupWindow this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ListPopupWindow$PopupScrollListener {
    androidx.appcompat.widget.ListPopupWindow this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ListPopupWindow$PopupTouchInterceptor {
    androidx.appcompat.widget.ListPopupWindow this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ListPopupWindow$ResizePopupRunnable {
    androidx.appcompat.widget.ListPopupWindow this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView {
    int mAdvanceKey;    int mRetreatKey;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.PopupMenu {
    android.content.Context mContext;    androidx.appcompat.view.menu.MenuBuilder mMenu;    android.view.View mAnchor;    androidx.appcompat.view.menu.MenuPopupHelper mPopup;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.PopupMenu$1 {
    androidx.appcompat.widget.PopupMenu this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.PopupMenu$2 {
    androidx.appcompat.widget.PopupMenu this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.PopupMenu$3 {
    androidx.appcompat.widget.PopupMenu this$0;}

-keep class androidx.appcompat.widget.ResourceManagerInternal

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.widget.ResourceManagerInternal {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ResourceManagerInternal {
    java.util.WeakHashMap mDrawableCaches;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.widget.ResourceManagerInternal$AsldcInflateDelegate {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.widget.ResourceManagerInternal$AvdcInflateDelegate {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.widget.ResourceManagerInternal$DrawableDelegate {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.widget.ResourceManagerInternal$VdcInflateDelegate {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ResourcesWrapper {
    android.content.res.Resources mResources;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.widget.RtlSpacingHelper {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ScrollingTabContainerView {
    androidx.appcompat.widget.ScrollingTabContainerView$VisibilityAnimListener mVisAnimListener;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ScrollingTabContainerView$1 {
    android.view.View val$tabView;    androidx.appcompat.widget.ScrollingTabContainerView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ScrollingTabContainerView$TabAdapter {
    androidx.appcompat.widget.ScrollingTabContainerView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ScrollingTabContainerView$TabClickListener {
    androidx.appcompat.widget.ScrollingTabContainerView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ScrollingTabContainerView$TabView {
    int[] BG_ATTRS;    androidx.appcompat.widget.ScrollingTabContainerView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ScrollingTabContainerView$VisibilityAnimListener {
    androidx.appcompat.widget.ScrollingTabContainerView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SearchView {
    androidx.appcompat.widget.SearchView$SearchAutoComplete mSearchSrcTextView;    android.view.View mSearchEditFrame;    android.view.View mSearchPlate;    android.view.View mSubmitArea;    android.widget.ImageView mSearchButton;    android.widget.ImageView mGoButton;    android.widget.ImageView mCloseButton;    android.widget.ImageView mVoiceButton;    android.view.View mDropDownAnchor;    android.widget.ImageView mCollapsedIcon;    android.graphics.drawable.Drawable mSearchHintIcon;    int mSuggestionRowLayout;    int mSuggestionCommitIconResId;    android.content.Intent mVoiceWebSearchIntent;    android.content.Intent mVoiceAppSearchIntent;    java.lang.CharSequence mDefaultQueryHint;    java.lang.Runnable mUpdateDrawableStateRunnable;    java.util.WeakHashMap mOutsideDrawablesCache;    android.view.View$OnClickListener mOnClickListener;    android.widget.TextView$OnEditorActionListener mOnEditorActionListener;    android.widget.AdapterView$OnItemClickListener mOnItemClickListener;    android.widget.AdapterView$OnItemSelectedListener mOnItemSelectedListener;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SearchView$1 {
    androidx.appcompat.widget.SearchView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SearchView$10 {
    androidx.appcompat.widget.SearchView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SearchView$2 {
    androidx.appcompat.widget.SearchView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SearchView$3 {
    androidx.appcompat.widget.SearchView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SearchView$4 {
    androidx.appcompat.widget.SearchView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SearchView$5 {
    androidx.appcompat.widget.SearchView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SearchView$6 {
    androidx.appcompat.widget.SearchView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SearchView$7 {
    androidx.appcompat.widget.SearchView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SearchView$8 {
    androidx.appcompat.widget.SearchView this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SearchView$9 {
    androidx.appcompat.widget.SearchView this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.widget.SearchView$PreQAutoCompleteTextViewReflector {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.widget.SearchView$SavedState$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SearchView$SearchAutoComplete {
    java.lang.Runnable mRunShowSoftInputIfNecessary;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SearchView$SearchAutoComplete$1 {
    androidx.appcompat.widget.SearchView$SearchAutoComplete this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SearchView$UpdatableTouchDelegate {
    android.view.View mDelegateView;    android.graphics.Rect mTargetBounds;    android.graphics.Rect mActualBounds;    android.graphics.Rect mSlopBounds;    int mSlop;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ShareActionProvider {
    androidx.appcompat.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener mOnMenuItemClickListener;    android.content.Context mContext;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ShareActionProvider$ShareActivityChooserModelPolicy {
    androidx.appcompat.widget.ShareActionProvider this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener {
    androidx.appcompat.widget.ShareActionProvider this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SuggestionsAdapter {
    androidx.appcompat.widget.SearchView mSearchView;    android.app.SearchableInfo mSearchable;    android.content.Context mProviderContext;    java.util.WeakHashMap mOutsideDrawablesCache;    int mCommitIconResId;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SuggestionsAdapter$ChildViewCache {
    android.widget.TextView mText1;    android.widget.TextView mText2;    android.widget.ImageView mIcon1;    android.widget.ImageView mIcon2;    android.widget.ImageView mIconRefine;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SwitchCompat {
    int THUMB_ANIMATION_DURATION;    int TOUCH_MODE_IDLE;    int TOUCH_MODE_DOWN;    int TOUCH_MODE_DRAGGING;    java.lang.String ACCESSIBILITY_EVENT_CLASS_NAME;    int SANS;    int SERIF;    int MONOSPACE;    android.util.Property THUMB_POS;    android.graphics.drawable.Drawable mThumbDrawable;    android.content.res.ColorStateList mThumbTintList;    android.graphics.PorterDuff$Mode mThumbTintMode;    boolean mHasThumbTint;    boolean mHasThumbTintMode;    android.graphics.drawable.Drawable mTrackDrawable;    android.content.res.ColorStateList mTrackTintList;    android.graphics.PorterDuff$Mode mTrackTintMode;    boolean mHasTrackTint;    boolean mHasTrackTintMode;    int mThumbTextPadding;    int mSwitchMinWidth;    int mSwitchPadding;    boolean mSplitTrack;    java.lang.CharSequence mTextOn;    java.lang.CharSequence mTextOff;    boolean mShowText;    int mTouchMode;    int mTouchSlop;    float mTouchX;    float mTouchY;    android.view.VelocityTracker mVelocityTracker;    int mMinFlingVelocity;    float mThumbPosition;    int mSwitchWidth;    int mSwitchHeight;    int mThumbWidth;    int mSwitchLeft;    int mSwitchTop;    int mSwitchRight;    int mSwitchBottom;    android.text.TextPaint mTextPaint;    android.content.res.ColorStateList mTextColors;    android.text.Layout mOnLayout;    android.text.Layout mOffLayout;    android.text.method.TransformationMethod mSwitchTransformationMethod;    android.animation.ObjectAnimator mPositionAnimator;    androidx.appcompat.widget.AppCompatTextHelper mTextHelper;    android.graphics.Rect mTempRect;    int[] CHECKED_STATE_SET;    void setSwitchTypefaceByIndex(int,int);
    int getSwitchPadding();
    int getSwitchMinWidth();
    int getThumbTextPadding();
    android.graphics.drawable.Drawable getTrackDrawable();
    android.content.res.ColorStateList getTrackTintList();
    android.graphics.PorterDuff$Mode getTrackTintMode();
    void applyTrackTint();
    android.graphics.drawable.Drawable getThumbDrawable();
    android.content.res.ColorStateList getThumbTintList();
    android.graphics.PorterDuff$Mode getThumbTintMode();
    void applyThumbTint();
    boolean getSplitTrack();
    java.lang.CharSequence getTextOn();
    java.lang.CharSequence getTextOff();
    boolean getShowText();
    void onMeasure(int,int);
    void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
    android.text.Layout makeLayout(java.lang.CharSequence);
    boolean hitThumb(float,float);
    boolean onTouchEvent(android.view.MotionEvent);
    void cancelSuperTouch(android.view.MotionEvent);
    void stopDrag(android.view.MotionEvent);
    void animateThumbToCheckedState(boolean);
    void cancelPositionAnimator();
    boolean getTargetCheckedState();
    void setThumbPosition(float);
    void toggle();
    void onLayout(boolean,int,int,int,int);
    void draw(android.graphics.Canvas);
    void onDraw(android.graphics.Canvas);
    int getCompoundPaddingLeft();
    int getCompoundPaddingRight();
    int getThumbOffset();
    int getThumbScrollRange();
    int[] onCreateDrawableState(int);
    void drawableStateChanged();
    void drawableHotspotChanged(float,float);
    boolean verifyDrawable(android.graphics.drawable.Drawable);
    void jumpDrawablesToCurrentState();
    void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent);
    void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo);
    float constrain(float,float,float);
    void setOnStateDescriptionOnRAndAbove();
    void setOffStateDescriptionOnRAndAbove();
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.SwitchCompat$1 {
    <init>(java.lang.Class,java.lang.String);
    java.lang.Float get(androidx.appcompat.widget.SwitchCompat);
    void set(androidx.appcompat.widget.SwitchCompat,java.lang.Float);
    java.lang.Object get(java.lang.Object);
    void set(java.lang.Object,java.lang.Object);
}

-keep class androidx.appcompat.widget.SwitchCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ThemedSpinnerAdapter$Helper {
    android.content.Context mContext;    android.view.LayoutInflater mInflater;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.TintContextWrapper {
    android.content.res.Resources mResources;    android.content.res.Resources$Theme mTheme;}

-keep class androidx.appcompat.widget.TintInfo

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.widget.TintInfo {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.TintResources {
    java.lang.ref.WeakReference mContextRef;}

-keep class androidx.appcompat.widget.TintTypedArray

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.TintTypedArray {
    android.content.Context mContext;    android.content.res.TypedArray mWrapped;}

-keep class androidx.appcompat.widget.Toolbar

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.Toolbar {
    java.util.ArrayList mTempViews;    java.util.ArrayList mHiddenViews;    int[] mTempMargins;    androidx.appcompat.widget.ActionMenuView$OnMenuItemClickListener mMenuViewItemClickListener;    java.lang.Runnable mShowOverflowMenuRunnable;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.Toolbar$1 {
    androidx.appcompat.widget.Toolbar this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.Toolbar$2 {
    androidx.appcompat.widget.Toolbar this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.Toolbar$3 {
    androidx.appcompat.widget.Toolbar this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.Toolbar$ExpandedActionViewMenuPresenter {
    androidx.appcompat.widget.Toolbar this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.appcompat.widget.Toolbar$SavedState$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ToolbarWidgetWrapper$1 {
    androidx.appcompat.view.menu.ActionMenuItem mNavItem;    androidx.appcompat.widget.ToolbarWidgetWrapper this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ToolbarWidgetWrapper$2 {
    int val$visibility;    androidx.appcompat.widget.ToolbarWidgetWrapper this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.TooltipCompat {
    void setTooltipText(android.view.View,java.lang.CharSequence);
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.TooltipCompatHandler {
    java.lang.String TAG;    long LONG_CLICK_HIDE_TIMEOUT_MS;    long HOVER_HIDE_TIMEOUT_MS;    long HOVER_HIDE_TIMEOUT_SHORT_MS;    android.view.View mAnchor;    java.lang.CharSequence mTooltipText;    int mHoverSlop;    java.lang.Runnable mShowRunnable;    java.lang.Runnable mHideRunnable;    int mAnchorX;    int mAnchorY;    androidx.appcompat.widget.TooltipPopup mPopup;    boolean mFromTouch;    androidx.appcompat.widget.TooltipCompatHandler sPendingHandler;    androidx.appcompat.widget.TooltipCompatHandler sActiveHandler;    void setTooltipText(android.view.View,java.lang.CharSequence);
    <init>(android.view.View,java.lang.CharSequence);
    boolean onLongClick(android.view.View);
    boolean onHover(android.view.View,android.view.MotionEvent);
    void onViewAttachedToWindow(android.view.View);
    void onViewDetachedFromWindow(android.view.View);
    void show(boolean);
    void hide();
    void setPendingHandler(androidx.appcompat.widget.TooltipCompatHandler);
    void scheduleShow();
    void cancelPendingShow();
    boolean updateAnchorPos(android.view.MotionEvent);
    void clearAnchorPos();
}

-keep class androidx.appcompat.widget.TooltipCompatHandler

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.TooltipCompatHandler$1 {
    androidx.appcompat.widget.TooltipCompatHandler this$0;    <init>(androidx.appcompat.widget.TooltipCompatHandler);
    void run();
}

-keep class androidx.appcompat.widget.TooltipCompatHandler

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.TooltipCompatHandler$2 {
    androidx.appcompat.widget.TooltipCompatHandler this$0;    <init>(androidx.appcompat.widget.TooltipCompatHandler);
    void run();
}

-keep class androidx.appcompat.widget.TooltipCompatHandler

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.TooltipPopup {
    android.content.Context mContext;    android.view.View mContentView;    android.widget.TextView mMessageView;    android.view.WindowManager$LayoutParams mLayoutParams;    android.graphics.Rect mTmpDisplayFrame;    int[] mTmpAnchorPos;    int[] mTmpAppPos;}

-keep class androidx.appcompat.widget.VectorEnabledTintResources

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.VectorEnabledTintResources {
    java.lang.ref.WeakReference mContextRef;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ViewStubCompat {
    int mLayoutResource;    int mInflatedId;    java.lang.ref.WeakReference mInflatedViewRef;    android.view.LayoutInflater mInflater;    androidx.appcompat.widget.ViewStubCompat$OnInflateListener mInflateListener;    int getInflatedId();
    int getLayoutResource();
    android.view.LayoutInflater getLayoutInflater();
    void onMeasure(int,int);
    void draw(android.graphics.Canvas);
    void dispatchDraw(android.graphics.Canvas);
    android.view.View inflate();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.appcompat.widget.ViewStubCompat$OnInflateListener {
    void onInflate(androidx.appcompat.widget.ViewStubCompat,android.view.View);
}

-keep class androidx.appcompat.widget.ViewStubCompat

-keepclassmembers,allowoptimization,allowobfuscation class androidx.arch.core.executor.ArchTaskExecutor$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.arch.core.executor.ArchTaskExecutor$2 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.arch.core.executor.DefaultTaskExecutor {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.arch.core.executor.DefaultTaskExecutor {
    java.lang.Object mLock;    java.util.concurrent.ExecutorService mDiskIO;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.arch.core.executor.DefaultTaskExecutor$1 {
    java.util.concurrent.atomic.AtomicInteger mThreadId;    androidx.arch.core.executor.DefaultTaskExecutor this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.arch.core.executor.TaskExecutor {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.arch.core.internal.FastSafeIterableMap {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.arch.core.internal.SafeIterableMap {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.arch.core.internal.SafeIterableMap$Entry {
    java.lang.Object mKey;    java.lang.Object mValue;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions {
    androidx.arch.core.internal.SafeIterableMap this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.collection.ArrayMap {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.collection.ArrayMap$1 {
    androidx.collection.ArrayMap this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.collection.ArraySet {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.collection.ArraySet$1 {
    androidx.collection.ArraySet this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.collection.CircularArray {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.collection.CircularIntArray {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.collection.LongSparseArray {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.collection.LruCache {
    java.util.LinkedHashMap map;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.collection.MapCollections {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.collection.MapCollections$ArrayIterator {
    int mOffset;    androidx.collection.MapCollections this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.collection.MapCollections$EntrySet {
    androidx.collection.MapCollections this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.collection.MapCollections$KeySet {
    androidx.collection.MapCollections this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.collection.MapCollections$MapIterator {
    androidx.collection.MapCollections this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.collection.MapCollections$ValuesCollection {
    androidx.collection.MapCollections this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.collection.SimpleArrayMap {
    <init>();
}

-keepclassmembers,allowobfuscation class androidx.collection.SparseArrayCompat {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.collection.SparseArrayCompat {
    java.lang.Object DELETED;    boolean mGarbage;    int[] mKeys;    java.lang.Object[] mValues;    int mSize;    <init>(int);
    androidx.collection.SparseArrayCompat clone();
    java.lang.Object get(int);
    java.lang.Object get(int,java.lang.Object);
    void delete(int);
    void remove(int);
    boolean remove(int,java.lang.Object);
    void removeAt(int);
    void removeAtRange(int,int);
    java.lang.Object replace(int,java.lang.Object);
    boolean replace(int,java.lang.Object,java.lang.Object);
    void gc();
    void put(int,java.lang.Object);
    void putAll(androidx.collection.SparseArrayCompat);
    java.lang.Object putIfAbsent(int,java.lang.Object);
    int size();
    boolean isEmpty();
    int keyAt(int);
    java.lang.Object valueAt(int);
    void setValueAt(int,java.lang.Object);
    int indexOfKey(int);
    int indexOfValue(java.lang.Object);
    boolean containsKey(int);
    boolean containsValue(java.lang.Object);
    void clear();
    void append(int,java.lang.Object);
    java.lang.String toString();
    java.lang.Object clone();
    void <clinit>();
}

-keep class androidx.collection.SparseArrayCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.accessibilityservice.AccessibilityServiceInfoCompat {
    int CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT;    int CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION;    int CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY;    int CAPABILITY_CAN_FILTER_KEY_EVENTS;    int FEEDBACK_BRAILLE;    int FEEDBACK_ALL_MASK;    int FLAG_INCLUDE_NOT_IMPORTANT_VIEWS;    int FLAG_REQUEST_TOUCH_EXPLORATION_MODE;    int FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY;    int FLAG_REPORT_VIEW_IDS;    int FLAG_REQUEST_FILTER_KEY_EVENTS;    <init>();
    java.lang.String loadDescription(android.accessibilityservice.AccessibilityServiceInfo,android.content.pm.PackageManager);
    java.lang.String feedbackTypeToString(int);
    java.lang.String flagToString(int);
    int getCapabilities(android.accessibilityservice.AccessibilityServiceInfo);
    java.lang.String capabilityToString(int);
}

-keepclassmembers,allowobfuscation class androidx.core.app.ActivityCompat {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ActivityCompat {
    androidx.core.app.ActivityCompat$PermissionCompatDelegate sDelegate;    void setPermissionCompatDelegate(androidx.core.app.ActivityCompat$PermissionCompatDelegate);
    androidx.core.app.ActivityCompat$PermissionCompatDelegate getPermissionCompatDelegate();
    boolean invalidateOptionsMenu(android.app.Activity);
    void startActivityForResult(android.app.Activity,android.content.Intent,int,android.os.Bundle);
    void startIntentSenderForResult(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle);
    void finishAffinity(android.app.Activity);
    void finishAfterTransition(android.app.Activity);
    android.net.Uri getReferrer(android.app.Activity);
    android.view.View requireViewById(android.app.Activity,int);
    void setEnterSharedElementCallback(android.app.Activity,androidx.core.app.SharedElementCallback);
    void setExitSharedElementCallback(android.app.Activity,androidx.core.app.SharedElementCallback);
    void postponeEnterTransition(android.app.Activity);
    void startPostponedEnterTransition(android.app.Activity);
    void requestPermissions(android.app.Activity,java.lang.String[],int);
    boolean shouldShowRequestPermissionRationale(android.app.Activity,java.lang.String);
    androidx.core.view.DragAndDropPermissionsCompat requestDragAndDropPermissions(android.app.Activity,android.view.DragEvent);
    void recreate(android.app.Activity);
    void setLocusContext(android.app.Activity,androidx.core.content.LocusIdCompat,android.os.Bundle);
}

-keep class androidx.core.app.ActivityCompat$PermissionCompatDelegate

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ActivityCompat$1 {
    java.lang.String[] val$permissions;    android.app.Activity val$activity;    int val$requestCode;    <init>(java.lang.String[],android.app.Activity,int);
    void run();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ActivityCompat$2 {
    android.app.Activity val$activity;    <init>(android.app.Activity);
    void run();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ActivityCompat$Api30Impl {
    <init>();
    void setLocusContext(android.app.Activity,androidx.core.content.LocusIdCompat,android.os.Bundle);
}

-keep class androidx.core.content.LocusIdCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ActivityCompat$OnRequestPermissionsResultCallback {
    void onRequestPermissionsResult(int,java.lang.String[],int[]);
}

-keep class androidx.core.app.ActivityCompat$PermissionCompatDelegate

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ActivityCompat$PermissionCompatDelegate {
    boolean requestPermissions(android.app.Activity,java.lang.String[],int);
    boolean onActivityResult(android.app.Activity,int,int,android.content.Intent);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ActivityCompat$RequestPermissionsRequestCodeValidator {
    void validateRequestPermissionsRequestCode(int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ActivityCompat$SharedElementCallback21Impl {
    androidx.core.app.SharedElementCallback mCallback;    <init>(androidx.core.app.SharedElementCallback);
    void onSharedElementStart(java.util.List,java.util.List,java.util.List);
    void onSharedElementEnd(java.util.List,java.util.List,java.util.List);
    void onRejectSharedElements(java.util.List);
    void onMapSharedElements(java.util.List,java.util.Map);
    android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View,android.graphics.Matrix,android.graphics.RectF);
    android.view.View onCreateSnapshotView(android.content.Context,android.os.Parcelable);
    void onSharedElementsArrived(java.util.List,java.util.List,android.app.SharedElementCallback$OnSharedElementsReadyListener);
}

-keep class androidx.core.app.SharedElementCallback

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ActivityCompat$SharedElementCallback21Impl$1 {
    android.app.SharedElementCallback$OnSharedElementsReadyListener val$listener;    androidx.core.app.ActivityCompat$SharedElementCallback21Impl this$0;    <init>(androidx.core.app.ActivityCompat$SharedElementCallback21Impl,android.app.SharedElementCallback$OnSharedElementsReadyListener);
    void onSharedElementsReady();
}

-keep class androidx.core.app.ActivityCompat$SharedElementCallback21Impl

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ActivityManagerCompat {
    <init>();
    boolean isLowRamDevice(android.app.ActivityManager);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ActivityOptionsCompat {
    java.lang.String EXTRA_USAGE_TIME_REPORT;    java.lang.String EXTRA_USAGE_TIME_REPORT_PACKAGES;    androidx.core.app.ActivityOptionsCompat makeCustomAnimation(android.content.Context,int,int);
    androidx.core.app.ActivityOptionsCompat makeScaleUpAnimation(android.view.View,int,int,int,int);
    androidx.core.app.ActivityOptionsCompat makeClipRevealAnimation(android.view.View,int,int,int,int);
    androidx.core.app.ActivityOptionsCompat makeThumbnailScaleUpAnimation(android.view.View,android.graphics.Bitmap,int,int);
    androidx.core.app.ActivityOptionsCompat makeSceneTransitionAnimation(android.app.Activity,android.view.View,java.lang.String);
    androidx.core.app.ActivityOptionsCompat makeSceneTransitionAnimation(android.app.Activity,androidx.core.util.Pair[]);
    androidx.core.app.ActivityOptionsCompat makeTaskLaunchBehind();
    androidx.core.app.ActivityOptionsCompat makeBasic();
    androidx.core.app.ActivityOptionsCompat setLaunchBounds(android.graphics.Rect);
    android.graphics.Rect getLaunchBounds();
    android.os.Bundle toBundle();
    void update(androidx.core.app.ActivityOptionsCompat);
    void requestUsageTimeReport(android.app.PendingIntent);
}

-keep class androidx.core.app.ActivityOptionsCompat

-keepclassmembers,allowobfuscation class androidx.core.app.ActivityOptionsCompat {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ActivityOptionsCompat$ActivityOptionsCompatImpl {
    android.app.ActivityOptions mActivityOptions;    <init>(android.app.ActivityOptions);
    android.os.Bundle toBundle();
    void update(androidx.core.app.ActivityOptionsCompat);
    void requestUsageTimeReport(android.app.PendingIntent);
    androidx.core.app.ActivityOptionsCompat setLaunchBounds(android.graphics.Rect);
    android.graphics.Rect getLaunchBounds();
}

-keep class androidx.core.app.ActivityOptionsCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ActivityRecreator$1 {
    androidx.core.app.ActivityRecreator$LifecycleCheckCallbacks val$callbacks;    java.lang.Object val$token;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ActivityRecreator$2 {
    android.app.Application val$application;    androidx.core.app.ActivityRecreator$LifecycleCheckCallbacks val$callbacks;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ActivityRecreator$3 {
    java.lang.Object val$activityThread;    java.lang.Object val$token;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ActivityRecreator$LifecycleCheckCallbacks {
    int mRecreatingHashCode;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.AlarmManagerCompat {
    void setAlarmClock(android.app.AlarmManager,long,android.app.PendingIntent,android.app.PendingIntent);
    void setAndAllowWhileIdle(android.app.AlarmManager,int,long,android.app.PendingIntent);
    void setExact(android.app.AlarmManager,int,long,android.app.PendingIntent);
    void setExactAndAllowWhileIdle(android.app.AlarmManager,int,long,android.app.PendingIntent);
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.app.AppComponentFactory {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.app.AppLaunchChecker {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.AppOpsManagerCompat {
    int MODE_ALLOWED;    int MODE_IGNORED;    int MODE_ERRORED;    int MODE_DEFAULT;    <init>();
    java.lang.String permissionToOp(java.lang.String);
    int noteOp(android.content.Context,java.lang.String,int,java.lang.String);
    int noteOpNoThrow(android.content.Context,java.lang.String,int,java.lang.String);
    int noteProxyOp(android.content.Context,java.lang.String,java.lang.String);
    int noteProxyOpNoThrow(android.content.Context,java.lang.String,java.lang.String);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.BundleCompat {
    <init>();
    android.os.IBinder getBinder(android.os.Bundle,java.lang.String);
    void putBinder(android.os.Bundle,java.lang.String,android.os.IBinder);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.BundleCompat$BundleCompatBaseImpl {
    java.lang.String TAG;    java.lang.reflect.Method sGetIBinderMethod;    boolean sGetIBinderMethodFetched;    java.lang.reflect.Method sPutIBinderMethod;    boolean sPutIBinderMethodFetched;    <init>();
    android.os.IBinder getBinder(android.os.Bundle,java.lang.String);
    void putBinder(android.os.Bundle,java.lang.String,android.os.IBinder);
}

-keepclassmembers,allowobfuscation class androidx.core.app.ComponentActivity {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ComponentActivity {
    androidx.collection.SimpleArrayMap mExtraDataMap;    androidx.lifecycle.LifecycleRegistry mLifecycleRegistry;    void putExtraData(androidx.core.app.ComponentActivity$ExtraData);
    void onCreate(android.os.Bundle);
    void onSaveInstanceState(android.os.Bundle);
    androidx.core.app.ComponentActivity$ExtraData getExtraData(java.lang.Class);
    androidx.lifecycle.Lifecycle getLifecycle();
    boolean superDispatchKeyEvent(android.view.KeyEvent);
    boolean dispatchKeyShortcutEvent(android.view.KeyEvent);
    boolean dispatchKeyEvent(android.view.KeyEvent);
}

-keep class androidx.core.app.ComponentActivity$ExtraData

-keep class androidx.core.app.ComponentActivity$ExtraData

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.app.ComponentActivity$ExtraData {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.app.CoreComponentFactory {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.CoreComponentFactory$CompatWrapped {
    java.lang.Object getWrapper();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.DialogCompat {
    <init>();
    android.view.View requireViewById(android.app.Dialog,int);
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.app.FrameMetricsAggregator {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl {
    int NANOS_PER_MS;    int NANOS_ROUNDING_VALUE;    int mTrackingFlags;    android.util.SparseIntArray[] mMetrics;    java.util.ArrayList mActivities;    android.os.HandlerThread sHandlerThread;    android.os.Handler sHandler;    android.view.Window$OnFrameMetricsAvailableListener mListener;    <init>(int);
    void addDurationItem(android.util.SparseIntArray,long);
    void add(android.app.Activity);
    android.util.SparseIntArray[] remove(android.app.Activity);
    android.util.SparseIntArray[] stop();
    android.util.SparseIntArray[] getMetrics();
    android.util.SparseIntArray[] reset();
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl$1 {
    androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl this$0;    <init>(androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl);
    void onFrameMetricsAvailable(android.view.Window,android.view.FrameMetrics,int);
}

-keep class androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl

-keepclassmembers,allowobfuscation class androidx.core.app.FrameMetricsAggregator$FrameMetricsBaseImpl {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.FrameMetricsAggregator$FrameMetricsBaseImpl {
    void add(android.app.Activity);
    android.util.SparseIntArray[] remove(android.app.Activity);
    android.util.SparseIntArray[] stop();
    android.util.SparseIntArray[] getMetrics();
    android.util.SparseIntArray[] reset();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.app.JobIntentService {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.JobIntentService {
    java.util.ArrayList mCompatQueue;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.JobIntentService$CommandProcessor {
    androidx.core.app.JobIntentService this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.JobIntentService$CompatJobEngine {
    android.os.IBinder compatGetBinder();
    androidx.core.app.JobIntentService$GenericWorkItem dequeueWork();
}

-keep class androidx.core.app.JobIntentService$GenericWorkItem

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.JobIntentService$CompatWorkEnqueuer {
    android.content.Context mContext;    android.os.PowerManager$WakeLock mLaunchWakeLock;    android.os.PowerManager$WakeLock mRunWakeLock;    boolean mLaunchingService;    boolean mServiceProcessing;    <init>(android.content.Context,android.content.ComponentName);
    void enqueueWork(android.content.Intent);
    void serviceStartReceived();
    void serviceProcessingStarted();
    void serviceProcessingFinished();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.JobIntentService$CompatWorkItem {
    android.content.Intent mIntent;    int mStartId;    androidx.core.app.JobIntentService this$0;    <init>(androidx.core.app.JobIntentService,android.content.Intent,int);
    android.content.Intent getIntent();
    void complete();
}

-keep class androidx.core.app.JobIntentService

-keep class androidx.core.app.JobIntentService$GenericWorkItem

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.JobIntentService$JobServiceEngineImpl {
    androidx.core.app.JobIntentService mService;    java.lang.Object mLock;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.JobIntentService$JobServiceEngineImpl$WrapperWorkItem {
    android.app.job.JobWorkItem mJobWork;    androidx.core.app.JobIntentService$JobServiceEngineImpl this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.JobIntentService$JobWorkEnqueuer {
    android.app.job.JobInfo mJobInfo;    android.app.job.JobScheduler mJobScheduler;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.JobIntentService$WorkEnqueuer {
    android.content.ComponentName mComponentName;    boolean mHasJobId;    int mJobId;    <init>(android.content.ComponentName);
    void ensureJobId(int);
    void enqueueWork(android.content.Intent);
    void serviceStartReceived();
    void serviceProcessingStarted();
    void serviceProcessingFinished();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationChannelCompat {
    java.lang.String DEFAULT_CHANNEL_ID;    boolean DEFAULT_SHOW_BADGE;    int DEFAULT_LIGHT_COLOR;    java.lang.String mId;    java.lang.CharSequence mName;    int mImportance;    java.lang.String mDescription;    java.lang.String mGroupId;    boolean mShowBadge;    android.net.Uri mSound;    android.media.AudioAttributes mAudioAttributes;    boolean mLights;    int mLightColor;    boolean mVibrationEnabled;    long[] mVibrationPattern;    java.lang.String mParentId;    java.lang.String mConversationId;    boolean mBypassDnd;    int mLockscreenVisibility;    boolean mCanBubble;    boolean mImportantConversation;    <init>(java.lang.String,int);
    <init>(android.app.NotificationChannel);
    android.app.NotificationChannel getNotificationChannel();
    androidx.core.app.NotificationChannelCompat$Builder toBuilder();
    java.lang.String getId();
    java.lang.CharSequence getName();
    java.lang.String getDescription();
    int getImportance();
    android.net.Uri getSound();
    android.media.AudioAttributes getAudioAttributes();
    boolean shouldShowLights();
    int getLightColor();
    boolean shouldVibrate();
    long[] getVibrationPattern();
    boolean canShowBadge();
    java.lang.String getGroup();
    java.lang.String getParentChannelId();
    java.lang.String getConversationId();
    boolean canBypassDnd();
    int getLockscreenVisibility();
    boolean canBubble();
    boolean isImportantConversation();
}

-keep class androidx.core.app.NotificationChannelCompat$Builder

-keep class androidx.core.app.NotificationChannelCompat$Builder

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationChannelCompat$Builder {
    androidx.core.app.NotificationChannelCompat mChannel;    <init>(java.lang.String,int);
    androidx.core.app.NotificationChannelCompat$Builder setName(java.lang.CharSequence);
    androidx.core.app.NotificationChannelCompat$Builder setImportance(int);
    androidx.core.app.NotificationChannelCompat$Builder setDescription(java.lang.String);
    androidx.core.app.NotificationChannelCompat$Builder setGroup(java.lang.String);
    androidx.core.app.NotificationChannelCompat$Builder setShowBadge(boolean);
    androidx.core.app.NotificationChannelCompat$Builder setSound(android.net.Uri,android.media.AudioAttributes);
    androidx.core.app.NotificationChannelCompat$Builder setLightsEnabled(boolean);
    androidx.core.app.NotificationChannelCompat$Builder setLightColor(int);
    androidx.core.app.NotificationChannelCompat$Builder setVibrationEnabled(boolean);
    androidx.core.app.NotificationChannelCompat$Builder setVibrationPattern(long[]);
    androidx.core.app.NotificationChannelCompat$Builder setConversationId(java.lang.String,java.lang.String);
    androidx.core.app.NotificationChannelCompat build();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationChannelGroupCompat {
    java.lang.String mId;    java.lang.CharSequence mName;    java.lang.String mDescription;    boolean mBlocked;    java.util.List mChannels;    <init>(java.lang.String);
    <init>(android.app.NotificationChannelGroup);
    <init>(android.app.NotificationChannelGroup,java.util.List);
    java.util.List getChannelsCompat(java.util.List);
    android.app.NotificationChannelGroup getNotificationChannelGroup();
    androidx.core.app.NotificationChannelGroupCompat$Builder toBuilder();
    java.lang.String getId();
    java.lang.CharSequence getName();
    java.lang.String getDescription();
    boolean isBlocked();
    java.util.List getChannels();
}

-keep class androidx.core.app.NotificationChannelGroupCompat$Builder

-keep class androidx.core.app.NotificationChannelGroupCompat$Builder

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationChannelGroupCompat$Builder {
    androidx.core.app.NotificationChannelGroupCompat mGroup;    <init>(java.lang.String);
    androidx.core.app.NotificationChannelGroupCompat$Builder setName(java.lang.CharSequence);
    androidx.core.app.NotificationChannelGroupCompat$Builder setDescription(java.lang.String);
    androidx.core.app.NotificationChannelGroupCompat build();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat {
    java.lang.String INTENT_CATEGORY_NOTIFICATION_PREFERENCES;    java.lang.String EXTRA_CHANNEL_ID;    java.lang.String EXTRA_CHANNEL_GROUP_ID;    java.lang.String EXTRA_NOTIFICATION_TAG;    java.lang.String EXTRA_NOTIFICATION_ID;    int DEFAULT_ALL;    int DEFAULT_SOUND;    int DEFAULT_VIBRATE;    int DEFAULT_LIGHTS;    int STREAM_DEFAULT;    int FLAG_SHOW_LIGHTS;    int FLAG_ONGOING_EVENT;    int FLAG_INSISTENT;    int FLAG_ONLY_ALERT_ONCE;    int FLAG_AUTO_CANCEL;    int FLAG_NO_CLEAR;    int FLAG_FOREGROUND_SERVICE;    int FLAG_HIGH_PRIORITY;    int FLAG_LOCAL_ONLY;    int FLAG_GROUP_SUMMARY;    int FLAG_BUBBLE;    int PRIORITY_DEFAULT;    int PRIORITY_LOW;    int PRIORITY_MIN;    int PRIORITY_HIGH;    int PRIORITY_MAX;    java.lang.String EXTRA_TITLE;    java.lang.String EXTRA_TITLE_BIG;    java.lang.String EXTRA_TEXT;    java.lang.String EXTRA_SUB_TEXT;    java.lang.String EXTRA_REMOTE_INPUT_HISTORY;    java.lang.String EXTRA_INFO_TEXT;    java.lang.String EXTRA_SUMMARY_TEXT;    java.lang.String EXTRA_BIG_TEXT;    java.lang.String EXTRA_SMALL_ICON;    java.lang.String EXTRA_LARGE_ICON;    java.lang.String EXTRA_LARGE_ICON_BIG;    java.lang.String EXTRA_PROGRESS;    java.lang.String EXTRA_PROGRESS_MAX;    java.lang.String EXTRA_PROGRESS_INDETERMINATE;    java.lang.String EXTRA_SHOW_CHRONOMETER;    java.lang.String EXTRA_CHRONOMETER_COUNT_DOWN;    java.lang.String EXTRA_COLORIZED;    java.lang.String EXTRA_SHOW_WHEN;    java.lang.String EXTRA_PICTURE;    java.lang.String EXTRA_TEXT_LINES;    java.lang.String EXTRA_TEMPLATE;    java.lang.String EXTRA_COMPAT_TEMPLATE;    java.lang.String EXTRA_PEOPLE;    java.lang.String EXTRA_PEOPLE_LIST;    java.lang.String EXTRA_BACKGROUND_IMAGE_URI;    java.lang.String EXTRA_MEDIA_SESSION;    java.lang.String EXTRA_COMPACT_ACTIONS;    java.lang.String EXTRA_SELF_DISPLAY_NAME;    java.lang.String EXTRA_MESSAGING_STYLE_USER;    java.lang.String EXTRA_CONVERSATION_TITLE;    java.lang.String EXTRA_MESSAGES;    java.lang.String EXTRA_HISTORIC_MESSAGES;    java.lang.String EXTRA_IS_GROUP_CONVERSATION;    java.lang.String EXTRA_HIDDEN_CONVERSATION_TITLE;    java.lang.String EXTRA_AUDIO_CONTENTS_URI;    int COLOR_DEFAULT;    int VISIBILITY_PUBLIC;    int VISIBILITY_PRIVATE;    int VISIBILITY_SECRET;    java.lang.String CATEGORY_CALL;    java.lang.String CATEGORY_NAVIGATION;    java.lang.String CATEGORY_MESSAGE;    java.lang.String CATEGORY_EMAIL;    java.lang.String CATEGORY_EVENT;    java.lang.String CATEGORY_PROMO;    java.lang.String CATEGORY_ALARM;    java.lang.String CATEGORY_PROGRESS;    java.lang.String CATEGORY_SOCIAL;    java.lang.String CATEGORY_ERROR;    java.lang.String CATEGORY_TRANSPORT;    java.lang.String CATEGORY_SYSTEM;    java.lang.String CATEGORY_SERVICE;    java.lang.String CATEGORY_REMINDER;    java.lang.String CATEGORY_RECOMMENDATION;    java.lang.String CATEGORY_STATUS;    java.lang.String CATEGORY_WORKOUT;    java.lang.String CATEGORY_LOCATION_SHARING;    java.lang.String CATEGORY_STOPWATCH;    java.lang.String CATEGORY_MISSED_CALL;    int BADGE_ICON_NONE;    int BADGE_ICON_SMALL;    int BADGE_ICON_LARGE;    int GROUP_ALERT_ALL;    int GROUP_ALERT_SUMMARY;    int GROUP_ALERT_CHILDREN;    java.lang.String GROUP_KEY_SILENT;    android.app.Notification[] getNotificationArrayFromBundle(android.os.Bundle,java.lang.String);
    android.os.Bundle getExtras(android.app.Notification);
    int getActionCount(android.app.Notification);
    androidx.core.app.NotificationCompat$Action getAction(android.app.Notification,int);
    androidx.core.app.NotificationCompat$BubbleMetadata getBubbleMetadata(android.app.Notification);
    androidx.core.app.NotificationCompat$Action getActionCompatFromAction(android.app.Notification$Action);
    java.util.List getInvisibleActions(android.app.Notification);
    java.util.List getPeople(android.app.Notification);
    java.lang.CharSequence getContentTitle(android.app.Notification);
    java.lang.CharSequence getContentText(android.app.Notification);
    java.lang.CharSequence getContentInfo(android.app.Notification);
    java.lang.CharSequence getSubText(android.app.Notification);
    java.lang.String getCategory(android.app.Notification);
    boolean getLocalOnly(android.app.Notification);
    java.lang.String getGroup(android.app.Notification);
    boolean getShowWhen(android.app.Notification);
    boolean getUsesChronometer(android.app.Notification);
    boolean getOnlyAlertOnce(android.app.Notification);
    boolean getAutoCancel(android.app.Notification);
    boolean getOngoing(android.app.Notification);
    int getColor(android.app.Notification);
    int getVisibility(android.app.Notification);
    android.app.Notification getPublicVersion(android.app.Notification);
    boolean getHighPriority(android.app.Notification);
    boolean isGroupSummary(android.app.Notification);
    java.lang.String getSortKey(android.app.Notification);
    java.lang.String getChannelId(android.app.Notification);
    long getTimeoutAfter(android.app.Notification);
    int getBadgeIconType(android.app.Notification);
    java.lang.String getShortcutId(android.app.Notification);
    java.lang.CharSequence getSettingsText(android.app.Notification);
    androidx.core.content.LocusIdCompat getLocusId(android.app.Notification);
    int getGroupAlertBehavior(android.app.Notification);
    boolean getAllowSystemGeneratedContextualActions(android.app.Notification);
}

-keep class androidx.core.app.NotificationCompat$Action

-keepclassmembers,allowobfuscation class androidx.core.app.NotificationCompat {
    <init>();
}

-keep class androidx.core.app.NotificationCompat$Action

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$Action {
    int SEMANTIC_ACTION_NONE;    int SEMANTIC_ACTION_REPLY;    int SEMANTIC_ACTION_MARK_AS_READ;    int SEMANTIC_ACTION_MARK_AS_UNREAD;    int SEMANTIC_ACTION_DELETE;    int SEMANTIC_ACTION_ARCHIVE;    int SEMANTIC_ACTION_MUTE;    int SEMANTIC_ACTION_UNMUTE;    int SEMANTIC_ACTION_THUMBS_UP;    int SEMANTIC_ACTION_THUMBS_DOWN;    int SEMANTIC_ACTION_CALL;    java.lang.String EXTRA_SHOWS_USER_INTERFACE;    java.lang.String EXTRA_SEMANTIC_ACTION;    android.os.Bundle mExtras;    androidx.core.graphics.drawable.IconCompat mIcon;    androidx.core.app.RemoteInput[] mRemoteInputs;    androidx.core.app.RemoteInput[] mDataOnlyRemoteInputs;    boolean mAllowGeneratedReplies;    boolean mShowsUserInterface;    int mSemanticAction;    boolean mIsContextual;    int icon;    java.lang.CharSequence title;    android.app.PendingIntent actionIntent;    <init>(int,java.lang.CharSequence,android.app.PendingIntent);
    <init>(androidx.core.graphics.drawable.IconCompat,java.lang.CharSequence,android.app.PendingIntent);
    <init>(int,java.lang.CharSequence,android.app.PendingIntent,android.os.Bundle,androidx.core.app.RemoteInput[],androidx.core.app.RemoteInput[],boolean,int,boolean,boolean);
    <init>(androidx.core.graphics.drawable.IconCompat,java.lang.CharSequence,android.app.PendingIntent,android.os.Bundle,androidx.core.app.RemoteInput[],androidx.core.app.RemoteInput[],boolean,int,boolean,boolean);
    int getIcon();
    androidx.core.graphics.drawable.IconCompat getIconCompat();
    java.lang.CharSequence getTitle();
    android.app.PendingIntent getActionIntent();
    android.os.Bundle getExtras();
    boolean getAllowGeneratedReplies();
    androidx.core.app.RemoteInput[] getRemoteInputs();
    int getSemanticAction();
    boolean isContextual();
    androidx.core.app.RemoteInput[] getDataOnlyRemoteInputs();
    boolean getShowsUserInterface();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$Action$Builder {
    androidx.core.graphics.drawable.IconCompat mIcon;    java.lang.CharSequence mTitle;    android.app.PendingIntent mIntent;    boolean mAllowGeneratedReplies;    android.os.Bundle mExtras;    java.util.ArrayList mRemoteInputs;    int mSemanticAction;    boolean mShowsUserInterface;    boolean mIsContextual;    androidx.core.app.NotificationCompat$Action$Builder fromAndroidAction(android.app.Notification$Action);
    <init>(androidx.core.graphics.drawable.IconCompat,java.lang.CharSequence,android.app.PendingIntent);
    <init>(int,java.lang.CharSequence,android.app.PendingIntent);
    <init>(androidx.core.app.NotificationCompat$Action);
    <init>(androidx.core.graphics.drawable.IconCompat,java.lang.CharSequence,android.app.PendingIntent,android.os.Bundle,androidx.core.app.RemoteInput[],boolean,int,boolean,boolean);
    androidx.core.app.NotificationCompat$Action$Builder addExtras(android.os.Bundle);
    android.os.Bundle getExtras();
    androidx.core.app.NotificationCompat$Action$Builder addRemoteInput(androidx.core.app.RemoteInput);
    androidx.core.app.NotificationCompat$Action$Builder setAllowGeneratedReplies(boolean);
    androidx.core.app.NotificationCompat$Action$Builder setSemanticAction(int);
    androidx.core.app.NotificationCompat$Action$Builder setContextual(boolean);
    androidx.core.app.NotificationCompat$Action$Builder setShowsUserInterface(boolean);
    androidx.core.app.NotificationCompat$Action$Builder extend(androidx.core.app.NotificationCompat$Action$Extender);
    void checkContextualActionNullFields();
    androidx.core.app.NotificationCompat$Action build();
}

-keep class androidx.core.app.NotificationCompat$Action$Builder

-keep class androidx.core.app.NotificationCompat$Action$Extender

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$Action$Extender {
    androidx.core.app.NotificationCompat$Action$Builder extend(androidx.core.app.NotificationCompat$Action$Builder);
}

-keepclassmembers,allowobfuscation class androidx.core.app.NotificationCompat$Action$WearableExtender {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$Action$WearableExtender {
    java.lang.String EXTRA_WEARABLE_EXTENSIONS;    java.lang.String KEY_FLAGS;    java.lang.String KEY_IN_PROGRESS_LABEL;    java.lang.String KEY_CONFIRM_LABEL;    java.lang.String KEY_CANCEL_LABEL;    int FLAG_AVAILABLE_OFFLINE;    int FLAG_HINT_LAUNCHES_ACTIVITY;    int FLAG_HINT_DISPLAY_INLINE;    int DEFAULT_FLAGS;    int mFlags;    java.lang.CharSequence mInProgressLabel;    java.lang.CharSequence mConfirmLabel;    java.lang.CharSequence mCancelLabel;    <init>(androidx.core.app.NotificationCompat$Action);
    androidx.core.app.NotificationCompat$Action$Builder extend(androidx.core.app.NotificationCompat$Action$Builder);
    androidx.core.app.NotificationCompat$Action$WearableExtender clone();
    androidx.core.app.NotificationCompat$Action$WearableExtender setAvailableOffline(boolean);
    boolean isAvailableOffline();
    void setFlag(int,boolean);
    androidx.core.app.NotificationCompat$Action$WearableExtender setInProgressLabel(java.lang.CharSequence);
    java.lang.CharSequence getInProgressLabel();
    androidx.core.app.NotificationCompat$Action$WearableExtender setConfirmLabel(java.lang.CharSequence);
    java.lang.CharSequence getConfirmLabel();
    androidx.core.app.NotificationCompat$Action$WearableExtender setCancelLabel(java.lang.CharSequence);
    java.lang.CharSequence getCancelLabel();
    androidx.core.app.NotificationCompat$Action$WearableExtender setHintLaunchesActivity(boolean);
    boolean getHintLaunchesActivity();
    androidx.core.app.NotificationCompat$Action$WearableExtender setHintDisplayActionInline(boolean);
    boolean getHintDisplayActionInline();
    java.lang.Object clone();
}

-keep class androidx.core.app.NotificationCompat$Action

-keepclassmembers,allowobfuscation class androidx.core.app.NotificationCompat$BigPictureStyle {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$BigPictureStyle {
    java.lang.String TEMPLATE_CLASS_NAME;    android.graphics.Bitmap mPicture;    androidx.core.graphics.drawable.IconCompat mBigLargeIcon;    boolean mBigLargeIconSet;    <init>(androidx.core.app.NotificationCompat$Builder);
    androidx.core.app.NotificationCompat$BigPictureStyle setBigContentTitle(java.lang.CharSequence);
    androidx.core.app.NotificationCompat$BigPictureStyle setSummaryText(java.lang.CharSequence);
    androidx.core.app.NotificationCompat$BigPictureStyle bigPicture(android.graphics.Bitmap);
    androidx.core.app.NotificationCompat$BigPictureStyle bigLargeIcon(android.graphics.Bitmap);
    java.lang.String getClassName();
    void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor);
    void restoreFromCompatExtras(android.os.Bundle);
    androidx.core.graphics.drawable.IconCompat asIconCompat(android.os.Parcelable);
    void clearCompatExtraKeys(android.os.Bundle);
}

-keep class androidx.core.app.NotificationCompat$Builder

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$BigPictureStyle$Api16Impl {
    <init>();
    void setBigLargeIcon(android.app.Notification$BigPictureStyle,android.graphics.Bitmap);
    void setSummaryText(android.app.Notification$BigPictureStyle,java.lang.CharSequence);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$BigPictureStyle$Api23Impl {
    <init>();
    void setBigLargeIcon(android.app.Notification$BigPictureStyle,android.graphics.drawable.Icon);
}

-keepclassmembers,allowobfuscation class androidx.core.app.NotificationCompat$BigTextStyle {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$BigTextStyle {
    java.lang.String TEMPLATE_CLASS_NAME;    java.lang.CharSequence mBigText;    <init>(androidx.core.app.NotificationCompat$Builder);
    androidx.core.app.NotificationCompat$BigTextStyle setBigContentTitle(java.lang.CharSequence);
    androidx.core.app.NotificationCompat$BigTextStyle setSummaryText(java.lang.CharSequence);
    androidx.core.app.NotificationCompat$BigTextStyle bigText(java.lang.CharSequence);
    java.lang.String getClassName();
    void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor);
    void restoreFromCompatExtras(android.os.Bundle);
    void addCompatExtras(android.os.Bundle);
    void clearCompatExtraKeys(android.os.Bundle);
}

-keep class androidx.core.app.NotificationCompat$Builder

-keep class androidx.core.app.NotificationCompat$BubbleMetadata

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$BubbleMetadata {
    android.app.PendingIntent mPendingIntent;    android.app.PendingIntent mDeleteIntent;    androidx.core.graphics.drawable.IconCompat mIcon;    int mDesiredHeight;    int mDesiredHeightResId;    int mFlags;    java.lang.String mShortcutId;    int FLAG_AUTO_EXPAND_BUBBLE;    int FLAG_SUPPRESS_NOTIFICATION;    <init>(android.app.PendingIntent,android.app.PendingIntent,androidx.core.graphics.drawable.IconCompat,int,int,int,java.lang.String);
    android.app.PendingIntent getIntent();
    java.lang.String getShortcutId();
    android.app.PendingIntent getDeleteIntent();
    androidx.core.graphics.drawable.IconCompat getIcon();
    int getDesiredHeight();
    int getDesiredHeightResId();
    boolean getAutoExpandBubble();
    boolean isNotificationSuppressed();
    void setFlags(int);
    android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata);
    androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata);
    <init>(android.app.PendingIntent,android.app.PendingIntent,androidx.core.graphics.drawable.IconCompat,int,int,int,java.lang.String,androidx.core.app.NotificationCompat$1);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$BubbleMetadata$Api29Impl {
    <init>();
    android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata);
    androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata);
}

-keep class androidx.core.app.NotificationCompat$BubbleMetadata

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$BubbleMetadata$Api30Impl {
    <init>();
    android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata);
    androidx.core.app.NotificationCompat$BubbleMetadata fromPlatform(android.app.Notification$BubbleMetadata);
}

-keep class androidx.core.app.NotificationCompat$BubbleMetadata

-keepclassmembers,allowobfuscation class androidx.core.app.NotificationCompat$BubbleMetadata$Builder {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$BubbleMetadata$Builder {
    android.app.PendingIntent mPendingIntent;    androidx.core.graphics.drawable.IconCompat mIcon;    int mDesiredHeight;    int mDesiredHeightResId;    int mFlags;    android.app.PendingIntent mDeleteIntent;    java.lang.String mShortcutId;    <init>(java.lang.String);
    <init>(android.app.PendingIntent,androidx.core.graphics.drawable.IconCompat);
    androidx.core.app.NotificationCompat$BubbleMetadata$Builder setIntent(android.app.PendingIntent);
    androidx.core.app.NotificationCompat$BubbleMetadata$Builder setIcon(androidx.core.graphics.drawable.IconCompat);
    androidx.core.app.NotificationCompat$BubbleMetadata$Builder setDesiredHeight(int);
    androidx.core.app.NotificationCompat$BubbleMetadata$Builder setDesiredHeightResId(int);
    androidx.core.app.NotificationCompat$BubbleMetadata$Builder setAutoExpandBubble(boolean);
    androidx.core.app.NotificationCompat$BubbleMetadata$Builder setSuppressNotification(boolean);
    androidx.core.app.NotificationCompat$BubbleMetadata$Builder setDeleteIntent(android.app.PendingIntent);
    androidx.core.app.NotificationCompat$BubbleMetadata build();
    androidx.core.app.NotificationCompat$BubbleMetadata$Builder setFlag(int,boolean);
}

-keep class androidx.core.graphics.drawable.IconCompat

-keep class androidx.core.app.NotificationCompat$Builder

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$Builder {
    int MAX_CHARSEQUENCE_LENGTH;    android.content.Context mContext;    java.util.ArrayList mActions;    java.util.ArrayList mPersonList;    java.util.ArrayList mInvisibleActions;    java.lang.CharSequence mContentTitle;    java.lang.CharSequence mContentText;    android.app.PendingIntent mContentIntent;    android.app.PendingIntent mFullScreenIntent;    android.widget.RemoteViews mTickerView;    android.graphics.Bitmap mLargeIcon;    java.lang.CharSequence mContentInfo;    int mNumber;    int mPriority;    boolean mShowWhen;    boolean mUseChronometer;    boolean mChronometerCountDown;    androidx.core.app.NotificationCompat$Style mStyle;    java.lang.CharSequence mSubText;    java.lang.CharSequence mSettingsText;    java.lang.CharSequence[] mRemoteInputHistory;    int mProgressMax;    int mProgress;    boolean mProgressIndeterminate;    java.lang.String mGroupKey;    boolean mGroupSummary;    java.lang.String mSortKey;    boolean mLocalOnly;    boolean mColorized;    boolean mColorizedSet;    java.lang.String mCategory;    android.os.Bundle mExtras;    int mColor;    int mVisibility;    android.app.Notification mPublicVersion;    android.widget.RemoteViews mContentView;    android.widget.RemoteViews mBigContentView;    android.widget.RemoteViews mHeadsUpContentView;    java.lang.String mChannelId;    int mBadgeIcon;    java.lang.String mShortcutId;    androidx.core.content.LocusIdCompat mLocusId;    long mTimeout;    int mGroupAlertBehavior;    boolean mAllowSystemGeneratedContextualActions;    androidx.core.app.NotificationCompat$BubbleMetadata mBubbleMetadata;    android.app.Notification mNotification;    boolean mSilent;    android.graphics.drawable.Icon mSmallIcon;    java.util.ArrayList mPeople;    <init>(android.content.Context,android.app.Notification);
    android.os.Bundle getExtrasWithoutDuplicateData(android.app.Notification,androidx.core.app.NotificationCompat$Style);
    <init>(android.content.Context,java.lang.String);
    <init>(android.content.Context);
    androidx.core.app.NotificationCompat$Builder setWhen(long);
    androidx.core.app.NotificationCompat$Builder setShowWhen(boolean);
    androidx.core.app.NotificationCompat$Builder setSmallIcon(androidx.core.graphics.drawable.IconCompat);
    androidx.core.app.NotificationCompat$Builder setUsesChronometer(boolean);
    androidx.core.app.NotificationCompat$Builder setChronometerCountDown(boolean);
    androidx.core.app.NotificationCompat$Builder setSmallIcon(int);
    androidx.core.app.NotificationCompat$Builder setSmallIcon(int,int);
    androidx.core.app.NotificationCompat$Builder setNotificationSilent();
    androidx.core.app.NotificationCompat$Builder setSilent(boolean);
    androidx.core.app.NotificationCompat$Builder setContentTitle(java.lang.CharSequence);
    androidx.core.app.NotificationCompat$Builder setContentText(java.lang.CharSequence);
    androidx.core.app.NotificationCompat$Builder setSubText(java.lang.CharSequence);
    androidx.core.app.NotificationCompat$Builder setSettingsText(java.lang.CharSequence);
    androidx.core.app.NotificationCompat$Builder setRemoteInputHistory(java.lang.CharSequence[]);
    androidx.core.app.NotificationCompat$Builder setNumber(int);
    androidx.core.app.NotificationCompat$Builder setContentInfo(java.lang.CharSequence);
    androidx.core.app.NotificationCompat$Builder setProgress(int,int,boolean);
    androidx.core.app.NotificationCompat$Builder setContent(android.widget.RemoteViews);
    androidx.core.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent);
    androidx.core.app.NotificationCompat$Builder setDeleteIntent(android.app.PendingIntent);
    androidx.core.app.NotificationCompat$Builder setFullScreenIntent(android.app.PendingIntent,boolean);
    androidx.core.app.NotificationCompat$Builder setTicker(java.lang.CharSequence);
    androidx.core.app.NotificationCompat$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews);
    androidx.core.app.NotificationCompat$Builder setLargeIcon(android.graphics.Bitmap);
    android.graphics.Bitmap reduceLargeIconSize(android.graphics.Bitmap);
    androidx.core.app.NotificationCompat$Builder setSound(android.net.Uri);
    androidx.core.app.NotificationCompat$Builder setSound(android.net.Uri,int);
    androidx.core.app.NotificationCompat$Builder setVibrate(long[]);
    androidx.core.app.NotificationCompat$Builder setLights(int,int,int);
    androidx.core.app.NotificationCompat$Builder setOngoing(boolean);
    androidx.core.app.NotificationCompat$Builder setColorized(boolean);
    androidx.core.app.NotificationCompat$Builder setOnlyAlertOnce(boolean);
    androidx.core.app.NotificationCompat$Builder setAutoCancel(boolean);
    androidx.core.app.NotificationCompat$Builder setLocalOnly(boolean);
    androidx.core.app.NotificationCompat$Builder setCategory(java.lang.String);
    androidx.core.app.NotificationCompat$Builder setDefaults(int);
    void setFlag(int,boolean);
    androidx.core.app.NotificationCompat$Builder setPriority(int);
    androidx.core.app.NotificationCompat$Builder addPerson(java.lang.String);
    androidx.core.app.NotificationCompat$Builder addPerson(androidx.core.app.Person);
    androidx.core.app.NotificationCompat$Builder clearPeople();
    androidx.core.app.NotificationCompat$Builder setGroup(java.lang.String);
    androidx.core.app.NotificationCompat$Builder setGroupSummary(boolean);
    androidx.core.app.NotificationCompat$Builder setSortKey(java.lang.String);
    androidx.core.app.NotificationCompat$Builder addExtras(android.os.Bundle);
    androidx.core.app.NotificationCompat$Builder setExtras(android.os.Bundle);
    android.os.Bundle getExtras();
    androidx.core.app.NotificationCompat$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent);
    androidx.core.app.NotificationCompat$Builder addAction(androidx.core.app.NotificationCompat$Action);
    androidx.core.app.NotificationCompat$Builder clearActions();
    androidx.core.app.NotificationCompat$Builder addInvisibleAction(int,java.lang.CharSequence,android.app.PendingIntent);
    androidx.core.app.NotificationCompat$Builder addInvisibleAction(androidx.core.app.NotificationCompat$Action);
    androidx.core.app.NotificationCompat$Builder clearInvisibleActions();
    androidx.core.app.NotificationCompat$Builder setStyle(androidx.core.app.NotificationCompat$Style);
    androidx.core.app.NotificationCompat$Builder setColor(int);
    androidx.core.app.NotificationCompat$Builder setVisibility(int);
    androidx.core.app.NotificationCompat$Builder setPublicVersion(android.app.Notification);
    boolean useExistingRemoteView();
    android.widget.RemoteViews createContentView();
    android.widget.RemoteViews createBigContentView();
    android.widget.RemoteViews createHeadsUpContentView();
    androidx.core.app.NotificationCompat$Builder setCustomContentView(android.widget.RemoteViews);
    androidx.core.app.NotificationCompat$Builder setCustomBigContentView(android.widget.RemoteViews);
    androidx.core.app.NotificationCompat$Builder setCustomHeadsUpContentView(android.widget.RemoteViews);
    androidx.core.app.NotificationCompat$Builder setChannelId(java.lang.String);
    androidx.core.app.NotificationCompat$Builder setTimeoutAfter(long);
    androidx.core.app.NotificationCompat$Builder setShortcutId(java.lang.String);
    androidx.core.app.NotificationCompat$Builder setShortcutInfo(androidx.core.content.pm.ShortcutInfoCompat);
    androidx.core.app.NotificationCompat$Builder setLocusId(androidx.core.content.LocusIdCompat);
    androidx.core.app.NotificationCompat$Builder setBadgeIconType(int);
    androidx.core.app.NotificationCompat$Builder setGroupAlertBehavior(int);
    androidx.core.app.NotificationCompat$Builder setBubbleMetadata(androidx.core.app.NotificationCompat$BubbleMetadata);
    androidx.core.app.NotificationCompat$Builder extend(androidx.core.app.NotificationCompat$Extender);
    androidx.core.app.NotificationCompat$Builder setAllowSystemGeneratedContextualActions(boolean);
    android.app.Notification getNotification();
    android.app.Notification build();
    java.lang.CharSequence limitCharSequenceLength(java.lang.CharSequence);
    android.widget.RemoteViews getContentView();
    android.widget.RemoteViews getBigContentView();
    android.widget.RemoteViews getHeadsUpContentView();
    long getWhenIfShowing();
    int getPriority();
    int getColor();
    androidx.core.app.NotificationCompat$BubbleMetadata getBubbleMetadata();
}

-keepclassmembers,allowobfuscation class androidx.core.app.NotificationCompat$CarExtender {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$CarExtender {
    java.lang.String EXTRA_CAR_EXTENDER;    java.lang.String EXTRA_LARGE_ICON;    java.lang.String EXTRA_CONVERSATION;    java.lang.String EXTRA_COLOR;    java.lang.String EXTRA_INVISIBLE_ACTIONS;    java.lang.String KEY_AUTHOR;    java.lang.String KEY_TEXT;    java.lang.String KEY_MESSAGES;    java.lang.String KEY_REMOTE_INPUT;    java.lang.String KEY_ON_REPLY;    java.lang.String KEY_ON_READ;    java.lang.String KEY_PARTICIPANTS;    java.lang.String KEY_TIMESTAMP;    android.graphics.Bitmap mLargeIcon;    androidx.core.app.NotificationCompat$CarExtender$UnreadConversation mUnreadConversation;    int mColor;    <init>(android.app.Notification);
    androidx.core.app.NotificationCompat$CarExtender$UnreadConversation getUnreadConversationFromBundle(android.os.Bundle);
    android.os.Bundle getBundleForUnreadConversation(androidx.core.app.NotificationCompat$CarExtender$UnreadConversation);
    androidx.core.app.NotificationCompat$Builder extend(androidx.core.app.NotificationCompat$Builder);
    androidx.core.app.NotificationCompat$CarExtender setColor(int);
    int getColor();
    androidx.core.app.NotificationCompat$CarExtender setLargeIcon(android.graphics.Bitmap);
    android.graphics.Bitmap getLargeIcon();
    androidx.core.app.NotificationCompat$CarExtender setUnreadConversation(androidx.core.app.NotificationCompat$CarExtender$UnreadConversation);
    androidx.core.app.NotificationCompat$CarExtender$UnreadConversation getUnreadConversation();
}

-keep class androidx.core.app.NotificationCompat$CarExtender$UnreadConversation

-keep class androidx.core.app.NotificationCompat$CarExtender$UnreadConversation

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$CarExtender$UnreadConversation {
    java.lang.String[] mMessages;    androidx.core.app.RemoteInput mRemoteInput;    android.app.PendingIntent mReplyPendingIntent;    android.app.PendingIntent mReadPendingIntent;    java.lang.String[] mParticipants;    long mLatestTimestamp;    <init>(java.lang.String[],androidx.core.app.RemoteInput,android.app.PendingIntent,android.app.PendingIntent,java.lang.String[],long);
    java.lang.String[] getMessages();
    androidx.core.app.RemoteInput getRemoteInput();
    android.app.PendingIntent getReplyPendingIntent();
    android.app.PendingIntent getReadPendingIntent();
    java.lang.String[] getParticipants();
    java.lang.String getParticipant();
    long getLatestTimestamp();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$CarExtender$UnreadConversation$Builder {
    java.util.List mMessages;    java.lang.String mParticipant;    androidx.core.app.RemoteInput mRemoteInput;    android.app.PendingIntent mReadPendingIntent;    android.app.PendingIntent mReplyPendingIntent;    long mLatestTimestamp;    <init>(java.lang.String);
    androidx.core.app.NotificationCompat$CarExtender$UnreadConversation$Builder addMessage(java.lang.String);
    androidx.core.app.NotificationCompat$CarExtender$UnreadConversation$Builder setReplyAction(android.app.PendingIntent,androidx.core.app.RemoteInput);
    androidx.core.app.NotificationCompat$CarExtender$UnreadConversation$Builder setReadPendingIntent(android.app.PendingIntent);
    androidx.core.app.NotificationCompat$CarExtender$UnreadConversation$Builder setLatestTimestamp(long);
    androidx.core.app.NotificationCompat$CarExtender$UnreadConversation build();
}

-keep class androidx.core.app.NotificationCompat$CarExtender$UnreadConversation$Builder

-keepclassmembers,allowobfuscation class androidx.core.app.NotificationCompat$DecoratedCustomViewStyle {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$DecoratedCustomViewStyle {
    java.lang.String TEMPLATE_CLASS_NAME;    int MAX_ACTION_BUTTONS;    java.lang.String getClassName();
    boolean displayCustomViewInline();
    void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor);
    android.widget.RemoteViews makeContentView(androidx.core.app.NotificationBuilderWithBuilderAccessor);
    android.widget.RemoteViews makeBigContentView(androidx.core.app.NotificationBuilderWithBuilderAccessor);
    android.widget.RemoteViews makeHeadsUpContentView(androidx.core.app.NotificationBuilderWithBuilderAccessor);
    android.widget.RemoteViews createRemoteViews(android.widget.RemoteViews,boolean);
    java.util.List getNonContextualActions(java.util.List);
    android.widget.RemoteViews generateActionButton(androidx.core.app.NotificationCompat$Action);
}

-keep class androidx.core.app.NotificationBuilderWithBuilderAccessor

-keep class androidx.core.app.NotificationCompat$Extender

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$Extender {
    androidx.core.app.NotificationCompat$Builder extend(androidx.core.app.NotificationCompat$Builder);
}

-keepclassmembers,allowobfuscation class androidx.core.app.NotificationCompat$InboxStyle {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$InboxStyle {
    java.lang.String TEMPLATE_CLASS_NAME;    java.util.ArrayList mTexts;    <init>(androidx.core.app.NotificationCompat$Builder);
    androidx.core.app.NotificationCompat$InboxStyle setBigContentTitle(java.lang.CharSequence);
    androidx.core.app.NotificationCompat$InboxStyle setSummaryText(java.lang.CharSequence);
    androidx.core.app.NotificationCompat$InboxStyle addLine(java.lang.CharSequence);
    java.lang.String getClassName();
    void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor);
    void restoreFromCompatExtras(android.os.Bundle);
    void clearCompatExtraKeys(android.os.Bundle);
}

-keep class androidx.core.app.NotificationCompat$Builder

-keepclassmembers,allowobfuscation class androidx.core.app.NotificationCompat$MessagingStyle {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$MessagingStyle {
    java.lang.String TEMPLATE_CLASS_NAME;    int MAXIMUM_RETAINED_MESSAGES;    java.util.List mMessages;    java.util.List mHistoricMessages;    androidx.core.app.Person mUser;    java.lang.CharSequence mConversationTitle;    java.lang.Boolean mIsGroupConversation;    <init>(java.lang.CharSequence);
    <init>(androidx.core.app.Person);
    java.lang.CharSequence getUserDisplayName();
    androidx.core.app.Person getUser();
    androidx.core.app.NotificationCompat$MessagingStyle setConversationTitle(java.lang.CharSequence);
    java.lang.CharSequence getConversationTitle();
    androidx.core.app.NotificationCompat$MessagingStyle addMessage(java.lang.CharSequence,long,java.lang.CharSequence);
    androidx.core.app.NotificationCompat$MessagingStyle addMessage(java.lang.CharSequence,long,androidx.core.app.Person);
    androidx.core.app.NotificationCompat$MessagingStyle addMessage(androidx.core.app.NotificationCompat$MessagingStyle$Message);
    androidx.core.app.NotificationCompat$MessagingStyle addHistoricMessage(androidx.core.app.NotificationCompat$MessagingStyle$Message);
    java.util.List getMessages();
    java.util.List getHistoricMessages();
    androidx.core.app.NotificationCompat$MessagingStyle setGroupConversation(boolean);
    boolean isGroupConversation();
    androidx.core.app.NotificationCompat$MessagingStyle extractMessagingStyleFromNotification(android.app.Notification);
    java.lang.String getClassName();
    void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor);
    androidx.core.app.NotificationCompat$MessagingStyle$Message findLatestIncomingMessage();
    boolean hasMessagesWithoutSender();
    java.lang.CharSequence makeMessageLine(androidx.core.app.NotificationCompat$MessagingStyle$Message);
    android.text.style.TextAppearanceSpan makeFontColorSpan(int);
    void addCompatExtras(android.os.Bundle);
    void restoreFromCompatExtras(android.os.Bundle);
    void clearCompatExtraKeys(android.os.Bundle);
}

-keep class androidx.core.app.Person

-keep class androidx.core.app.NotificationCompat$MessagingStyle$Message

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$MessagingStyle$Message {
    java.lang.String KEY_TEXT;    java.lang.String KEY_TIMESTAMP;    java.lang.String KEY_SENDER;    java.lang.String KEY_DATA_MIME_TYPE;    java.lang.String KEY_DATA_URI;    java.lang.String KEY_EXTRAS_BUNDLE;    java.lang.String KEY_PERSON;    java.lang.String KEY_NOTIFICATION_PERSON;    java.lang.CharSequence mText;    long mTimestamp;    androidx.core.app.Person mPerson;    android.os.Bundle mExtras;    java.lang.String mDataMimeType;    android.net.Uri mDataUri;    <init>(java.lang.CharSequence,long,androidx.core.app.Person);
    <init>(java.lang.CharSequence,long,java.lang.CharSequence);
    androidx.core.app.NotificationCompat$MessagingStyle$Message setData(java.lang.String,android.net.Uri);
    java.lang.CharSequence getText();
    long getTimestamp();
    android.os.Bundle getExtras();
    java.lang.CharSequence getSender();
    androidx.core.app.Person getPerson();
    java.lang.String getDataMimeType();
    android.net.Uri getDataUri();
    android.os.Bundle toBundle();
    android.os.Bundle[] getBundleArrayForMessages(java.util.List);
    java.util.List getMessagesFromBundleArray(android.os.Parcelable[]);
    androidx.core.app.NotificationCompat$MessagingStyle$Message getMessageFromBundle(android.os.Bundle);
    android.app.Notification$MessagingStyle$Message toAndroidMessage();
}

-keep class androidx.core.app.NotificationCompat$Style

-keepclassmembers,allowobfuscation class androidx.core.app.NotificationCompat$Style {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$Style {
    androidx.core.app.NotificationCompat$Builder mBuilder;    java.lang.CharSequence mBigContentTitle;    java.lang.CharSequence mSummaryText;    boolean mSummaryTextSet;    void setBuilder(androidx.core.app.NotificationCompat$Builder);
    android.app.Notification build();
    java.lang.String getClassName();
    void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor);
    boolean displayCustomViewInline();
    android.widget.RemoteViews makeContentView(androidx.core.app.NotificationBuilderWithBuilderAccessor);
    android.widget.RemoteViews makeBigContentView(androidx.core.app.NotificationBuilderWithBuilderAccessor);
    android.widget.RemoteViews makeHeadsUpContentView(androidx.core.app.NotificationBuilderWithBuilderAccessor);
    void addCompatExtras(android.os.Bundle);
    void restoreFromCompatExtras(android.os.Bundle);
    void clearCompatExtraKeys(android.os.Bundle);
    androidx.core.app.NotificationCompat$Style extractStyleFromNotification(android.app.Notification);
    androidx.core.app.NotificationCompat$Style constructCompatStyleByPlatformName(java.lang.String);
    androidx.core.app.NotificationCompat$Style constructCompatStyleByName(java.lang.String);
    androidx.core.app.NotificationCompat$Style constructCompatStyleForBundle(android.os.Bundle);
    androidx.core.app.NotificationCompat$Style constructStyleForExtras(android.os.Bundle);
    android.widget.RemoteViews applyStandardTemplate(boolean,int,boolean);
    android.graphics.Bitmap createColoredBitmap(int,int);
    android.graphics.Bitmap createColoredBitmap(androidx.core.graphics.drawable.IconCompat,int);
    android.graphics.Bitmap createColoredBitmap(int,int,int);
    android.graphics.Bitmap createColoredBitmap(androidx.core.graphics.drawable.IconCompat,int,int);
    android.graphics.Bitmap createIconWithBackground(int,int,int,int);
    void buildIntoRemoteViews(android.widget.RemoteViews,android.widget.RemoteViews);
    void hideNormalContent(android.widget.RemoteViews);
    int calculateTopPadding();
    float constrain(float,float,float);
}

-keepclassmembers,allowobfuscation class androidx.core.app.NotificationCompat$WearableExtender {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompat$WearableExtender {
    int UNSET_ACTION_INDEX;    int SIZE_DEFAULT;    int SIZE_XSMALL;    int SIZE_SMALL;    int SIZE_MEDIUM;    int SIZE_LARGE;    int SIZE_FULL_SCREEN;    int SCREEN_TIMEOUT_SHORT;    int SCREEN_TIMEOUT_LONG;    java.lang.String EXTRA_WEARABLE_EXTENSIONS;    java.lang.String KEY_ACTIONS;    java.lang.String KEY_FLAGS;    java.lang.String KEY_DISPLAY_INTENT;    java.lang.String KEY_PAGES;    java.lang.String KEY_BACKGROUND;    java.lang.String KEY_CONTENT_ICON;    java.lang.String KEY_CONTENT_ICON_GRAVITY;    java.lang.String KEY_CONTENT_ACTION_INDEX;    java.lang.String KEY_CUSTOM_SIZE_PRESET;    java.lang.String KEY_CUSTOM_CONTENT_HEIGHT;    java.lang.String KEY_GRAVITY;    java.lang.String KEY_HINT_SCREEN_TIMEOUT;    java.lang.String KEY_DISMISSAL_ID;    java.lang.String KEY_BRIDGE_TAG;    int FLAG_CONTENT_INTENT_AVAILABLE_OFFLINE;    int FLAG_HINT_HIDE_ICON;    int FLAG_HINT_SHOW_BACKGROUND_ONLY;    int FLAG_START_SCROLL_BOTTOM;    int FLAG_HINT_AVOID_BACKGROUND_CLIPPING;    int FLAG_BIG_PICTURE_AMBIENT;    int FLAG_HINT_CONTENT_INTENT_LAUNCHES_ACTIVITY;    int DEFAULT_FLAGS;    int DEFAULT_CONTENT_ICON_GRAVITY;    int DEFAULT_GRAVITY;    java.util.ArrayList mActions;    int mFlags;    android.app.PendingIntent mDisplayIntent;    java.util.ArrayList mPages;    android.graphics.Bitmap mBackground;    int mContentIcon;    int mContentIconGravity;    int mContentActionIndex;    int mCustomSizePreset;    int mCustomContentHeight;    int mGravity;    int mHintScreenTimeout;    java.lang.String mDismissalId;    java.lang.String mBridgeTag;    <init>(android.app.Notification);
    androidx.core.app.NotificationCompat$Builder extend(androidx.core.app.NotificationCompat$Builder);
    android.app.Notification$Action getActionFromActionCompat(androidx.core.app.NotificationCompat$Action);
    androidx.core.app.NotificationCompat$WearableExtender clone();
    androidx.core.app.NotificationCompat$WearableExtender addAction(androidx.core.app.NotificationCompat$Action);
    androidx.core.app.NotificationCompat$WearableExtender addActions(java.util.List);
    androidx.core.app.NotificationCompat$WearableExtender clearActions();
    java.util.List getActions();
    androidx.core.app.NotificationCompat$WearableExtender setDisplayIntent(android.app.PendingIntent);
    android.app.PendingIntent getDisplayIntent();
    androidx.core.app.NotificationCompat$WearableExtender addPage(android.app.Notification);
    androidx.core.app.NotificationCompat$WearableExtender addPages(java.util.List);
    androidx.core.app.NotificationCompat$WearableExtender clearPages();
    java.util.List getPages();
    androidx.core.app.NotificationCompat$WearableExtender setBackground(android.graphics.Bitmap);
    android.graphics.Bitmap getBackground();
    androidx.core.app.NotificationCompat$WearableExtender setContentIcon(int);
    int getContentIcon();
    androidx.core.app.NotificationCompat$WearableExtender setContentIconGravity(int);
    int getContentIconGravity();
    androidx.core.app.NotificationCompat$WearableExtender setContentAction(int);
    int getContentAction();
    androidx.core.app.NotificationCompat$WearableExtender setGravity(int);
    int getGravity();
    androidx.core.app.NotificationCompat$WearableExtender setCustomSizePreset(int);
    int getCustomSizePreset();
    androidx.core.app.NotificationCompat$WearableExtender setCustomContentHeight(int);
    int getCustomContentHeight();
    androidx.core.app.NotificationCompat$WearableExtender setStartScrollBottom(boolean);
    boolean getStartScrollBottom();
    androidx.core.app.NotificationCompat$WearableExtender setContentIntentAvailableOffline(boolean);
    boolean getContentIntentAvailableOffline();
    androidx.core.app.NotificationCompat$WearableExtender setHintHideIcon(boolean);
    boolean getHintHideIcon();
    androidx.core.app.NotificationCompat$WearableExtender setHintShowBackgroundOnly(boolean);
    boolean getHintShowBackgroundOnly();
    androidx.core.app.NotificationCompat$WearableExtender setHintAvoidBackgroundClipping(boolean);
    boolean getHintAvoidBackgroundClipping();
    androidx.core.app.NotificationCompat$WearableExtender setHintScreenTimeout(int);
    int getHintScreenTimeout();
    androidx.core.app.NotificationCompat$WearableExtender setHintAmbientBigPicture(boolean);
    boolean getHintAmbientBigPicture();
    androidx.core.app.NotificationCompat$WearableExtender setHintContentIntentLaunchesActivity(boolean);
    boolean getHintContentIntentLaunchesActivity();
    androidx.core.app.NotificationCompat$WearableExtender setDismissalId(java.lang.String);
    java.lang.String getDismissalId();
    androidx.core.app.NotificationCompat$WearableExtender setBridgeTag(java.lang.String);
    java.lang.String getBridgeTag();
    void setFlag(int,boolean);
    java.lang.Object clone();
}

-keep class androidx.core.app.NotificationCompat$Builder

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompatBuilder {
    android.content.Context mContext;    android.app.Notification$Builder mBuilder;    androidx.core.app.NotificationCompat$Builder mBuilderCompat;    android.widget.RemoteViews mContentView;    android.widget.RemoteViews mBigContentView;    java.util.List mActionExtrasList;    android.os.Bundle mExtras;    int mGroupAlertBehavior;    android.widget.RemoteViews mHeadsUpContentView;    <init>(androidx.core.app.NotificationCompat$Builder);
    java.util.List combineLists(java.util.List,java.util.List);
    java.util.List getPeople(java.util.List);
    android.app.Notification$Builder getBuilder();
    android.content.Context getContext();
    android.app.Notification build();
    void addAction(androidx.core.app.NotificationCompat$Action);
    android.app.Notification buildInternal();
    void removeSoundAndVibration(android.app.Notification);
}

-keep class androidx.core.app.NotificationCompat$Builder

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompatExtras {
    java.lang.String EXTRA_LOCAL_ONLY;    java.lang.String EXTRA_GROUP_KEY;    java.lang.String EXTRA_GROUP_SUMMARY;    java.lang.String EXTRA_SORT_KEY;    java.lang.String EXTRA_ACTION_EXTRAS;    java.lang.String EXTRA_REMOTE_INPUTS;    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompatJellybean {
    java.lang.String TAG;    java.lang.String EXTRA_DATA_ONLY_REMOTE_INPUTS;    java.lang.String EXTRA_ALLOW_GENERATED_REPLIES;    java.lang.String KEY_ICON;    java.lang.String KEY_TITLE;    java.lang.String KEY_ACTION_INTENT;    java.lang.String KEY_EXTRAS;    java.lang.String KEY_REMOTE_INPUTS;    java.lang.String KEY_DATA_ONLY_REMOTE_INPUTS;    java.lang.String KEY_RESULT_KEY;    java.lang.String KEY_LABEL;    java.lang.String KEY_CHOICES;    java.lang.String KEY_ALLOW_FREE_FORM_INPUT;    java.lang.String KEY_ALLOWED_DATA_TYPES;    java.lang.String KEY_SEMANTIC_ACTION;    java.lang.String KEY_SHOWS_USER_INTERFACE;    java.lang.Object sExtrasLock;    java.lang.reflect.Field sExtrasField;    boolean sExtrasFieldAccessFailed;    java.lang.Object sActionsLock;    java.lang.reflect.Field sActionsField;    java.lang.reflect.Field sActionIconField;    java.lang.reflect.Field sActionTitleField;    java.lang.reflect.Field sActionIntentField;    boolean sActionsAccessFailed;    android.util.SparseArray buildActionExtrasMap(java.util.List);
    android.os.Bundle getExtras(android.app.Notification);
    androidx.core.app.NotificationCompat$Action readAction(int,java.lang.CharSequence,android.app.PendingIntent,android.os.Bundle);
    android.os.Bundle writeActionAndGetExtras(android.app.Notification$Builder,androidx.core.app.NotificationCompat$Action);
    int getActionCount(android.app.Notification);
    androidx.core.app.NotificationCompat$Action getAction(android.app.Notification,int);
    java.lang.Object[] getActionObjectsLocked(android.app.Notification);
    boolean ensureActionReflectionReadyLocked();
    androidx.core.app.NotificationCompat$Action getActionFromBundle(android.os.Bundle);
    android.os.Bundle getBundleForAction(androidx.core.app.NotificationCompat$Action);
    androidx.core.app.RemoteInput fromBundle(android.os.Bundle);
    android.os.Bundle toBundle(androidx.core.app.RemoteInput);
    androidx.core.app.RemoteInput[] fromBundleArray(android.os.Bundle[]);
    android.os.Bundle[] toBundleArray(androidx.core.app.RemoteInput[]);
    android.os.Bundle[] getBundleArrayFromBundle(android.os.Bundle,java.lang.String);
    <init>();
    void <clinit>();
}

-keep class androidx.core.app.NotificationCompat$Action

-keepclassmembers,allowobfuscation class androidx.core.app.NotificationCompatSideChannelService {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompatSideChannelService {
    android.os.IBinder onBind(android.content.Intent);
    void notify(java.lang.String,int,java.lang.String,android.app.Notification);
    void cancel(java.lang.String,int,java.lang.String);
    void cancelAll(java.lang.String);
    void checkPermission(int,java.lang.String);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationCompatSideChannelService$NotificationSideChannelStub {
    androidx.core.app.NotificationCompatSideChannelService this$0;    <init>(androidx.core.app.NotificationCompatSideChannelService);
    void notify(java.lang.String,int,java.lang.String,android.app.Notification);
    void cancel(java.lang.String,int,java.lang.String);
    void cancelAll(java.lang.String);
}

-keep class androidx.core.app.NotificationCompatSideChannelService

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationManagerCompat {
    java.lang.String TAG;    java.lang.String CHECK_OP_NO_THROW;    java.lang.String OP_POST_NOTIFICATION;    java.lang.String EXTRA_USE_SIDE_CHANNEL;    java.lang.String ACTION_BIND_SIDE_CHANNEL;    int MAX_SIDE_CHANNEL_SDK_VERSION;    int SIDE_CHANNEL_RETRY_BASE_INTERVAL_MS;    int SIDE_CHANNEL_RETRY_MAX_COUNT;    java.lang.String SETTING_ENABLED_NOTIFICATION_LISTENERS;    java.lang.Object sEnabledNotificationListenersLock;    java.lang.String sEnabledNotificationListeners;    java.util.Set sEnabledNotificationListenerPackages;    android.content.Context mContext;    android.app.NotificationManager mNotificationManager;    java.lang.Object sLock;    androidx.core.app.NotificationManagerCompat$SideChannelManager sSideChannelManager;    int IMPORTANCE_UNSPECIFIED;    int IMPORTANCE_NONE;    int IMPORTANCE_MIN;    int IMPORTANCE_LOW;    int IMPORTANCE_DEFAULT;    int IMPORTANCE_HIGH;    int IMPORTANCE_MAX;    androidx.core.app.NotificationManagerCompat from(android.content.Context);
    <init>(android.content.Context);
    void cancel(int);
    void cancel(java.lang.String,int);
    void cancelAll();
    void notify(int,android.app.Notification);
    void notify(java.lang.String,int,android.app.Notification);
    boolean areNotificationsEnabled();
    int getImportance();
    void createNotificationChannel(android.app.NotificationChannel);
    void createNotificationChannel(androidx.core.app.NotificationChannelCompat);
    void createNotificationChannelGroup(android.app.NotificationChannelGroup);
    void createNotificationChannelGroup(androidx.core.app.NotificationChannelGroupCompat);
    void createNotificationChannels(java.util.List);
    void createNotificationChannelsCompat(java.util.List);
    void createNotificationChannelGroups(java.util.List);
    void createNotificationChannelGroupsCompat(java.util.List);
    void deleteNotificationChannel(java.lang.String);
    void deleteNotificationChannelGroup(java.lang.String);
    void deleteUnlistedNotificationChannels(java.util.Collection);
    android.app.NotificationChannel getNotificationChannel(java.lang.String);
    androidx.core.app.NotificationChannelCompat getNotificationChannelCompat(java.lang.String);
    android.app.NotificationChannel getNotificationChannel(java.lang.String,java.lang.String);
    androidx.core.app.NotificationChannelCompat getNotificationChannelCompat(java.lang.String,java.lang.String);
    android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String);
    androidx.core.app.NotificationChannelGroupCompat getNotificationChannelGroupCompat(java.lang.String);
    java.util.List getNotificationChannels();
    java.util.List getNotificationChannelsCompat();
    java.util.List getNotificationChannelGroups();
    java.util.List getNotificationChannelGroupsCompat();
    java.util.Set getEnabledListenerPackages(android.content.Context);
    boolean useSideChannelForNotification(android.app.Notification);
    void pushSideChannelQueue(androidx.core.app.NotificationManagerCompat$Task);
    void <clinit>();
}

-keep class androidx.core.app.NotificationManagerCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationManagerCompat$CancelTask {
    java.lang.String packageName;    int id;    java.lang.String tag;    boolean all;    <init>(java.lang.String);
    <init>(java.lang.String,int,java.lang.String);
    void send(android.support.v4.app.INotificationSideChannel);
    java.lang.String toString();
}

-keep class android.support.v4.app.INotificationSideChannel

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationManagerCompat$NotifyTask {
    java.lang.String packageName;    int id;    java.lang.String tag;    android.app.Notification notif;    <init>(java.lang.String,int,java.lang.String,android.app.Notification);
    void send(android.support.v4.app.INotificationSideChannel);
    java.lang.String toString();
}

-keep class android.support.v4.app.INotificationSideChannel

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationManagerCompat$ServiceConnectedEvent {
    android.content.ComponentName componentName;    android.os.IBinder iBinder;    <init>(android.content.ComponentName,android.os.IBinder);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationManagerCompat$SideChannelManager {
    int MSG_QUEUE_TASK;    int MSG_SERVICE_CONNECTED;    int MSG_SERVICE_DISCONNECTED;    int MSG_RETRY_LISTENER_QUEUE;    android.content.Context mContext;    android.os.HandlerThread mHandlerThread;    android.os.Handler mHandler;    java.util.Map mRecordMap;    java.util.Set mCachedEnabledPackages;    <init>(android.content.Context);
    void queueTask(androidx.core.app.NotificationManagerCompat$Task);
    boolean handleMessage(android.os.Message);
    void handleQueueTask(androidx.core.app.NotificationManagerCompat$Task);
    void handleServiceConnected(android.content.ComponentName,android.os.IBinder);
    void handleServiceDisconnected(android.content.ComponentName);
    void handleRetryListenerQueue(android.content.ComponentName);
    void onServiceConnected(android.content.ComponentName,android.os.IBinder);
    void onServiceDisconnected(android.content.ComponentName);
    void updateListenerMap();
    boolean ensureServiceBound(androidx.core.app.NotificationManagerCompat$SideChannelManager$ListenerRecord);
    void ensureServiceUnbound(androidx.core.app.NotificationManagerCompat$SideChannelManager$ListenerRecord);
    void scheduleListenerRetry(androidx.core.app.NotificationManagerCompat$SideChannelManager$ListenerRecord);
    void processListenerQueue(androidx.core.app.NotificationManagerCompat$SideChannelManager$ListenerRecord);
}

-keep class androidx.core.app.NotificationManagerCompat$Task

-keep class androidx.core.app.NotificationManagerCompat$SideChannelManager$ListenerRecord

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationManagerCompat$SideChannelManager$ListenerRecord {
    android.content.ComponentName componentName;    boolean bound;    android.support.v4.app.INotificationSideChannel service;    java.util.ArrayDeque taskQueue;    int retryCount;    <init>(android.content.ComponentName);
}

-keep class androidx.core.app.NotificationManagerCompat$Task

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.NotificationManagerCompat$Task {
    void send(android.support.v4.app.INotificationSideChannel);
}

-keep class androidx.core.app.Person

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.app.Person$Builder {
    <init>();
}

-keep class androidx.core.app.RemoteActionCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.RemoteActionCompat {
    androidx.core.graphics.drawable.IconCompat mIcon;    java.lang.CharSequence mTitle;    java.lang.CharSequence mContentDescription;    android.app.PendingIntent mActionIntent;    boolean mEnabled;    boolean mShouldShowIcon;    <init>(androidx.core.graphics.drawable.IconCompat,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent);
    <init>(androidx.core.app.RemoteActionCompat);
    androidx.core.app.RemoteActionCompat createFromRemoteAction(android.app.RemoteAction);
    void setEnabled(boolean);
    boolean isEnabled();
    void setShouldShowIcon(boolean);
    boolean shouldShowIcon();
    androidx.core.graphics.drawable.IconCompat getIcon();
    java.lang.CharSequence getTitle();
    java.lang.CharSequence getContentDescription();
    android.app.PendingIntent getActionIntent();
    android.app.RemoteAction toRemoteAction();
}

-keepclassmembers,allowobfuscation class androidx.core.app.RemoteActionCompat {
    <init>();
}

-keepclassmembers,allowobfuscation class androidx.core.app.RemoteActionCompatParcelizer {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.RemoteActionCompatParcelizer {
    androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel);
    void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel);
}

-keep class androidx.versionedparcelable.VersionedParcel

-keep class androidx.core.app.RemoteInput

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.RemoteInput {
    java.lang.String mResultKey;    java.lang.CharSequence mLabel;    java.lang.CharSequence[] mChoices;    boolean mAllowFreeFormTextInput;    int mEditChoicesBeforeSending;    android.os.Bundle mExtras;    java.util.Set mAllowedDataTypes;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.RemoteInput$Builder {
    java.lang.String mResultKey;    java.util.Set mAllowedDataTypes;    android.os.Bundle mExtras;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ServiceCompat {
    int START_STICKY;    int STOP_FOREGROUND_REMOVE;    int STOP_FOREGROUND_DETACH;    <init>();
    void stopForeground(android.app.Service,int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ShareCompat {
    java.lang.String EXTRA_CALLING_PACKAGE;    java.lang.String EXTRA_CALLING_PACKAGE_INTEROP;    java.lang.String EXTRA_CALLING_ACTIVITY;    java.lang.String EXTRA_CALLING_ACTIVITY_INTEROP;    java.lang.String HISTORY_FILENAME_PREFIX;    <init>();
    java.lang.String getCallingPackage(android.app.Activity);
    java.lang.String getCallingPackage(android.content.Intent);
    android.content.ComponentName getCallingActivity(android.app.Activity);
    android.content.ComponentName getCallingActivity(android.content.Intent);
    void configureMenuItem(android.view.MenuItem,androidx.core.app.ShareCompat$IntentBuilder);
    void configureMenuItem(android.view.Menu,int,androidx.core.app.ShareCompat$IntentBuilder);
}

-keep class androidx.core.app.ShareCompat$IntentBuilder

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ShareCompat$Api16Impl {
    <init>();
    void migrateExtraStreamToClipData(android.content.Intent,java.util.ArrayList);
    void removeClipData(android.content.Intent);
}

-keep class androidx.core.app.ShareCompat$IntentBuilder

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ShareCompat$IntentBuilder {
    android.content.Context mContext;    android.content.Intent mIntent;    java.lang.CharSequence mChooserTitle;    java.util.ArrayList mToAddresses;    java.util.ArrayList mCcAddresses;    java.util.ArrayList mBccAddresses;    java.util.ArrayList mStreams;    androidx.core.app.ShareCompat$IntentBuilder from(android.app.Activity);
    <init>(android.content.Context);
    android.content.Intent getIntent();
    android.content.Context getContext();
    void combineArrayExtra(java.lang.String,java.util.ArrayList);
    void combineArrayExtra(java.lang.String,java.lang.String[]);
    android.content.Intent createChooserIntent();
    void startChooser();
    androidx.core.app.ShareCompat$IntentBuilder setChooserTitle(java.lang.CharSequence);
    androidx.core.app.ShareCompat$IntentBuilder setChooserTitle(int);
    androidx.core.app.ShareCompat$IntentBuilder setType(java.lang.String);
    androidx.core.app.ShareCompat$IntentBuilder setText(java.lang.CharSequence);
    androidx.core.app.ShareCompat$IntentBuilder setHtmlText(java.lang.String);
    androidx.core.app.ShareCompat$IntentBuilder setStream(android.net.Uri);
    androidx.core.app.ShareCompat$IntentBuilder addStream(android.net.Uri);
    androidx.core.app.ShareCompat$IntentBuilder setEmailTo(java.lang.String[]);
    androidx.core.app.ShareCompat$IntentBuilder addEmailTo(java.lang.String);
    androidx.core.app.ShareCompat$IntentBuilder addEmailTo(java.lang.String[]);
    androidx.core.app.ShareCompat$IntentBuilder setEmailCc(java.lang.String[]);
    androidx.core.app.ShareCompat$IntentBuilder addEmailCc(java.lang.String);
    androidx.core.app.ShareCompat$IntentBuilder addEmailCc(java.lang.String[]);
    androidx.core.app.ShareCompat$IntentBuilder setEmailBcc(java.lang.String[]);
    androidx.core.app.ShareCompat$IntentBuilder addEmailBcc(java.lang.String);
    androidx.core.app.ShareCompat$IntentBuilder addEmailBcc(java.lang.String[]);
    androidx.core.app.ShareCompat$IntentBuilder setSubject(java.lang.String);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.ShareCompat$IntentReader {
    java.lang.String TAG;    android.content.Context mContext;    android.content.Intent mIntent;    java.lang.String mCallingPackage;    android.content.ComponentName mCallingActivity;    java.util.ArrayList mStreams;    androidx.core.app.ShareCompat$IntentReader from(android.app.Activity);
    <init>(android.app.Activity);
    <init>(android.content.Context,android.content.Intent);
    boolean isShareIntent();
    boolean isSingleShare();
    boolean isMultipleShare();
    java.lang.String getType();
    java.lang.CharSequence getText();
    java.lang.String getHtmlText();
    void withinStyle(java.lang.StringBuilder,java.lang.CharSequence,int,int);
    android.net.Uri getStream();
    android.net.Uri getStream(int);
    int getStreamCount();
    java.lang.String[] getEmailTo();
    java.lang.String[] getEmailCc();
    java.lang.String[] getEmailBcc();
    java.lang.String getSubject();
    java.lang.String getCallingPackage();
    android.content.ComponentName getCallingActivity();
    android.graphics.drawable.Drawable getCallingActivityIcon();
    android.graphics.drawable.Drawable getCallingApplicationIcon();
    java.lang.CharSequence getCallingApplicationLabel();
}

-keep class androidx.core.app.ShareCompat$IntentReader

-keep class androidx.core.app.SharedElementCallback

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.app.SharedElementCallback {
    <init>();
}

-keep class androidx.core.app.TaskStackBuilder

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.app.TaskStackBuilder {
    java.util.ArrayList mIntents;    android.content.Context mSourceContext;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.ContentProviderCompat {
    <init>();
    android.content.Context requireContext(android.content.ContentProvider);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.ContentResolverCompat {
    <init>();
    android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,androidx.core.os.CancellationSignal);
}

-keep class androidx.core.os.CancellationSignal

-keepclassmembers,allowobfuscation class androidx.core.content.ContextCompat {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.ContextCompat {
    java.lang.String TAG;    java.lang.Object sLock;    android.util.TypedValue sTempValue;    boolean startActivities(android.content.Context,android.content.Intent[]);
    boolean startActivities(android.content.Context,android.content.Intent[],android.os.Bundle);
    void startActivity(android.content.Context,android.content.Intent,android.os.Bundle);
    java.io.File getDataDir(android.content.Context);
    java.io.File[] getObbDirs(android.content.Context);
    java.io.File[] getExternalFilesDirs(android.content.Context,java.lang.String);
    java.io.File[] getExternalCacheDirs(android.content.Context);
    android.graphics.drawable.Drawable getDrawable(android.content.Context,int);
    android.content.res.ColorStateList getColorStateList(android.content.Context,int);
    int getColor(android.content.Context,int);
    int checkSelfPermission(android.content.Context,java.lang.String);
    java.io.File getNoBackupFilesDir(android.content.Context);
    java.io.File getCodeCacheDir(android.content.Context);
    java.io.File createFilesDir(java.io.File);
    android.content.Context createDeviceProtectedStorageContext(android.content.Context);
    boolean isDeviceProtectedStorage(android.content.Context);
    java.util.concurrent.Executor getMainExecutor(android.content.Context);
    void startForegroundService(android.content.Context,android.content.Intent);
    java.lang.Object getSystemService(android.content.Context,java.lang.Class);
    java.lang.String getSystemServiceName(android.content.Context,java.lang.Class);
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.ContextCompat$LegacyServiceMapHolder {
    java.util.HashMap SERVICES;    <init>();
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.ContextCompat$MainHandlerExecutor {
    android.os.Handler mHandler;    <init>(android.os.Handler);
    void execute(java.lang.Runnable);
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.content.FileProvider {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.FileProvider$SimplePathStrategy {
    java.lang.String mAuthority;    java.util.HashMap mRoots;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.IntentCompat {
    java.lang.String ACTION_CREATE_REMINDER;    java.lang.String EXTRA_HTML_TEXT;    java.lang.String EXTRA_START_PLAYBACK;    java.lang.String EXTRA_TIME;    java.lang.String CATEGORY_LEANBACK_LAUNCHER;    <init>();
    android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String);
}

-keep class androidx.core.content.LocusIdCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.LocusIdCompat {
    java.lang.String mId;    android.content.LocusId mWrapped;    <init>(java.lang.String);
    java.lang.String getId();
    int hashCode();
    boolean equals(java.lang.Object);
    java.lang.String toString();
    android.content.LocusId toLocusId();
    androidx.core.content.LocusIdCompat toLocusIdCompat(android.content.LocusId);
    java.lang.String getSanitizedId();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.LocusIdCompat$Api29Impl {
    <init>();
    android.content.LocusId create(java.lang.String);
    java.lang.String getId(android.content.LocusId);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.SharedPreferencesCompat {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.SharedPreferencesCompat$EditorCompat {
    androidx.core.content.SharedPreferencesCompat$EditorCompat sInstance;    androidx.core.content.SharedPreferencesCompat$EditorCompat$Helper mHelper;    <init>();
    androidx.core.content.SharedPreferencesCompat$EditorCompat getInstance();
    void apply(android.content.SharedPreferences$Editor);
}

-keep class androidx.core.content.SharedPreferencesCompat$EditorCompat

-keepclassmembers,allowobfuscation class androidx.core.content.SharedPreferencesCompat$EditorCompat$Helper {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.SharedPreferencesCompat$EditorCompat$Helper {
    void apply(android.content.SharedPreferences$Editor);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.pm.ActivityInfoCompat {
    int CONFIG_UI_MODE;    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.pm.PackageInfoCompat {
    long getLongVersionCode(android.content.pm.PackageInfo);
    java.util.List getSignatures(android.content.pm.PackageManager,java.lang.String);
    boolean hasSignatures(android.content.pm.PackageManager,java.lang.String,java.util.Map,boolean);
    boolean byteArrayContains(byte[][],byte[]);
    byte[] computeSHA256Digest(byte[]);
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.pm.PackageInfoCompat$Api28Impl {
    <init>();
    boolean hasSigningCertificate(android.content.pm.PackageManager,java.lang.String,byte[],int);
    boolean hasMultipleSigners(android.content.pm.SigningInfo);
    android.content.pm.Signature[] getApkContentsSigners(android.content.pm.SigningInfo);
    android.content.pm.Signature[] getSigningCertificateHistory(android.content.pm.SigningInfo);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.pm.PermissionInfoCompat {
    <init>();
    int getProtection(android.content.pm.PermissionInfo);
    int getProtectionFlags(android.content.pm.PermissionInfo);
}

-keep class androidx.core.content.pm.ShortcutInfoCompat

-keepclassmembers,allowobfuscation class androidx.core.content.pm.ShortcutInfoCompat {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.pm.ShortcutInfoCompat {
    java.lang.String EXTRA_PERSON_COUNT;    java.lang.String EXTRA_PERSON_;    java.lang.String EXTRA_LOCUS_ID;    java.lang.String EXTRA_LONG_LIVED;    android.content.Context mContext;    java.lang.String mId;    java.lang.String mPackageName;    android.content.Intent[] mIntents;    android.content.ComponentName mActivity;    java.lang.CharSequence mLabel;    java.lang.CharSequence mLongLabel;    java.lang.CharSequence mDisabledMessage;    androidx.core.graphics.drawable.IconCompat mIcon;    boolean mIsAlwaysBadged;    androidx.core.app.Person[] mPersons;    java.util.Set mCategories;    androidx.core.content.LocusIdCompat mLocusId;    boolean mIsLongLived;    int mRank;    android.os.PersistableBundle mExtras;    long mLastChangedTimestamp;    android.os.UserHandle mUser;    boolean mIsCached;    boolean mIsDynamic;    boolean mIsPinned;    boolean mIsDeclaredInManifest;    boolean mIsImmutable;    boolean mIsEnabled;    boolean mHasKeyFieldsOnly;    int mDisabledReason;    android.content.pm.ShortcutInfo toShortcutInfo();
    android.os.PersistableBundle buildLegacyExtrasBundle();
    android.content.Intent addToIntent(android.content.Intent);
    java.lang.String getId();
    java.lang.String getPackage();
    android.content.ComponentName getActivity();
    java.lang.CharSequence getShortLabel();
    java.lang.CharSequence getLongLabel();
    java.lang.CharSequence getDisabledMessage();
    int getDisabledReason();
    android.content.Intent getIntent();
    android.content.Intent[] getIntents();
    java.util.Set getCategories();
    androidx.core.content.LocusIdCompat getLocusId();
    int getRank();
    androidx.core.graphics.drawable.IconCompat getIcon();
    androidx.core.app.Person[] getPersonsFromExtra(android.os.PersistableBundle);
    boolean getLongLivedFromExtra(android.os.PersistableBundle);
    java.util.List fromShortcuts(android.content.Context,java.util.List);
    android.os.PersistableBundle getExtras();
    android.os.UserHandle getUserHandle();
    long getLastChangedTimestamp();
    boolean isCached();
    boolean isDynamic();
    boolean isPinned();
    boolean isDeclaredInManifest();
    boolean isImmutable();
    boolean isEnabled();
    boolean hasKeyFieldsOnly();
    androidx.core.content.LocusIdCompat getLocusId(android.content.pm.ShortcutInfo);
    androidx.core.content.LocusIdCompat getLocusIdFromExtra(android.os.PersistableBundle);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.pm.ShortcutInfoCompat$Builder {
    androidx.core.content.pm.ShortcutInfoCompat mInfo;    boolean mIsConversation;    <init>(android.content.Context,java.lang.String);
    <init>(androidx.core.content.pm.ShortcutInfoCompat);
    <init>(android.content.Context,android.content.pm.ShortcutInfo);
    androidx.core.content.pm.ShortcutInfoCompat$Builder setShortLabel(java.lang.CharSequence);
    androidx.core.content.pm.ShortcutInfoCompat$Builder setLongLabel(java.lang.CharSequence);
    androidx.core.content.pm.ShortcutInfoCompat$Builder setDisabledMessage(java.lang.CharSequence);
    androidx.core.content.pm.ShortcutInfoCompat$Builder setIntent(android.content.Intent);
    androidx.core.content.pm.ShortcutInfoCompat$Builder setIntents(android.content.Intent[]);
    androidx.core.content.pm.ShortcutInfoCompat$Builder setIcon(androidx.core.graphics.drawable.IconCompat);
    androidx.core.content.pm.ShortcutInfoCompat$Builder setLocusId(androidx.core.content.LocusIdCompat);
    androidx.core.content.pm.ShortcutInfoCompat$Builder setIsConversation();
    androidx.core.content.pm.ShortcutInfoCompat$Builder setActivity(android.content.ComponentName);
    androidx.core.content.pm.ShortcutInfoCompat$Builder setAlwaysBadged();
    androidx.core.content.pm.ShortcutInfoCompat$Builder setPerson(androidx.core.app.Person);
    androidx.core.content.pm.ShortcutInfoCompat$Builder setPersons(androidx.core.app.Person[]);
    androidx.core.content.pm.ShortcutInfoCompat$Builder setCategories(java.util.Set);
    androidx.core.content.pm.ShortcutInfoCompat$Builder setLongLived();
    androidx.core.content.pm.ShortcutInfoCompat$Builder setLongLived(boolean);
    androidx.core.content.pm.ShortcutInfoCompat$Builder setRank(int);
    androidx.core.content.pm.ShortcutInfoCompat$Builder setExtras(android.os.PersistableBundle);
    androidx.core.content.pm.ShortcutInfoCompat build();
}

-keep class androidx.core.content.pm.ShortcutInfoCompat

-keepclassmembers,allowobfuscation class androidx.core.content.pm.ShortcutInfoCompatSaver {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.pm.ShortcutInfoCompatSaver {
    java.lang.Object addShortcuts(java.util.List);
    java.lang.Object removeShortcuts(java.util.List);
    java.lang.Object removeAllShortcuts();
    java.util.List getShortcuts();
}

-keepclassmembers,allowobfuscation class androidx.core.content.pm.ShortcutInfoCompatSaver$NoopImpl {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.pm.ShortcutInfoCompatSaver$NoopImpl {
    java.lang.Void addShortcuts(java.util.List);
    java.lang.Void removeShortcuts(java.util.List);
    java.lang.Void removeAllShortcuts();
    java.lang.Object removeAllShortcuts();
    java.lang.Object removeShortcuts(java.util.List);
    java.lang.Object addShortcuts(java.util.List);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.pm.ShortcutManagerCompat {
    int FLAG_MATCH_MANIFEST;    int FLAG_MATCH_DYNAMIC;    int FLAG_MATCH_PINNED;    int FLAG_MATCH_CACHED;    java.lang.String ACTION_INSTALL_SHORTCUT;    java.lang.String INSTALL_SHORTCUT_PERMISSION;    int DEFAULT_MAX_ICON_DIMENSION_DP;    int DEFAULT_MAX_ICON_DIMENSION_LOWRAM_DP;    java.lang.String EXTRA_SHORTCUT_ID;    androidx.core.content.pm.ShortcutInfoCompatSaver sShortcutInfoCompatSaver;    <init>();
    boolean isRequestPinShortcutSupported(android.content.Context);
    boolean requestPinShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat,android.content.IntentSender);
    android.content.Intent createShortcutResultIntent(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat);
    java.util.List getShortcuts(android.content.Context,int);
    boolean addDynamicShortcuts(android.content.Context,java.util.List);
    int getMaxShortcutCountPerActivity(android.content.Context);
    boolean isRateLimitingActive(android.content.Context);
    int getIconMaxWidth(android.content.Context);
    int getIconMaxHeight(android.content.Context);
    void reportShortcutUsed(android.content.Context,java.lang.String);
    boolean setDynamicShortcuts(android.content.Context,java.util.List);
    java.util.List getDynamicShortcuts(android.content.Context);
    boolean updateShortcuts(android.content.Context,java.util.List);
    boolean convertUriIconToBitmapIcon(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat);
    void convertUriIconsToBitmapIcons(android.content.Context,java.util.List);
    void disableShortcuts(android.content.Context,java.util.List,java.lang.CharSequence);
    void enableShortcuts(android.content.Context,java.util.List);
    void removeDynamicShortcuts(android.content.Context,java.util.List);
    void removeAllDynamicShortcuts(android.content.Context);
    void removeLongLivedShortcuts(android.content.Context,java.util.List);
    boolean pushDynamicShortcut(android.content.Context,androidx.core.content.pm.ShortcutInfoCompat);
    java.lang.String getShortcutInfoCompatWithLowestRank(java.util.List);
    void setShortcutInfoCompatSaver(androidx.core.content.pm.ShortcutInfoCompatSaver);
    int getIconDimensionInternal(android.content.Context,boolean);
    androidx.core.content.pm.ShortcutInfoCompatSaver getShortcutInfoSaverInstance(android.content.Context);
    void <clinit>();
}

-keep class androidx.core.content.pm.ShortcutInfoCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.pm.ShortcutManagerCompat$1 {
    android.content.IntentSender val$callback;    <init>(android.content.IntentSender);
    void onReceive(android.content.Context,android.content.Intent);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.pm.ShortcutManagerCompat$Api25Impl {
    <init>();
    java.lang.String getShortcutInfoWithLowestRank(java.util.List);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.res.ColorStateListInflaterCompat {
    <init>();
    android.content.res.ColorStateList inflate(android.content.res.Resources,int,android.content.res.Resources$Theme);
    android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme);
    android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme);
    android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme);
    android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[]);
    int modulateColorAlpha(int,float);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.res.ComplexColorCompat {
    java.lang.String LOG_TAG;    android.graphics.Shader mShader;    android.content.res.ColorStateList mColorStateList;    int mColor;    <init>(android.graphics.Shader,android.content.res.ColorStateList,int);
    androidx.core.content.res.ComplexColorCompat from(android.graphics.Shader);
    androidx.core.content.res.ComplexColorCompat from(android.content.res.ColorStateList);
    androidx.core.content.res.ComplexColorCompat from(int);
    android.graphics.Shader getShader();
    int getColor();
    void setColor(int);
    boolean isGradient();
    boolean isStateful();
    boolean onStateChanged(int[]);
    boolean willDraw();
    androidx.core.content.res.ComplexColorCompat inflate(android.content.res.Resources,int,android.content.res.Resources$Theme);
    androidx.core.content.res.ComplexColorCompat createFromXml(android.content.res.Resources,int,android.content.res.Resources$Theme);
}

-keep class androidx.core.content.res.ComplexColorCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.res.FontResourcesParserCompat {
    int NORMAL_WEIGHT;    int ITALIC;    int FETCH_STRATEGY_BLOCKING;    int FETCH_STRATEGY_ASYNC;    int INFINITE_TIMEOUT_VALUE;    int DEFAULT_TIMEOUT_MILLIS;    androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry parse(org.xmlpull.v1.XmlPullParser,android.content.res.Resources);
    androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamilies(org.xmlpull.v1.XmlPullParser,android.content.res.Resources);
    androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry readFamily(org.xmlpull.v1.XmlPullParser,android.content.res.Resources);
    int getType(android.content.res.TypedArray,int);
    java.util.List readCerts(android.content.res.Resources,int);
    java.util.List toByteArrayList(java.lang.String[]);
    androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry readFont(org.xmlpull.v1.XmlPullParser,android.content.res.Resources);
    void skip(org.xmlpull.v1.XmlPullParser);
    <init>();
}

-keep class androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry

-keep class androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry {
    androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] mEntries;    <init>(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[]);
    androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry[] getEntries();
}

-keep class androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry

-keep class androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry {
    java.lang.String mFileName;    int mWeight;    boolean mItalic;    java.lang.String mVariationSettings;    int mTtcIndex;    int mResourceId;    <init>(java.lang.String,int,boolean,java.lang.String,int,int);
    java.lang.String getFileName();
    int getWeight();
    boolean isItalic();
    java.lang.String getVariationSettings();
    int getTtcIndex();
    int getResourceId();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.res.FontResourcesParserCompat$ProviderResourceEntry {
    androidx.core.provider.FontRequest mRequest;    int mTimeoutMs;    int mStrategy;    java.lang.String mSystemFontFamilyName;    <init>(androidx.core.provider.FontRequest,int,int,java.lang.String);
    <init>(androidx.core.provider.FontRequest,int,int);
    androidx.core.provider.FontRequest getRequest();
    int getFetchStrategy();
    int getTimeout();
    java.lang.String getSystemFontFamilyName();
}

-keep class androidx.core.provider.FontRequest

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.res.GradientColorInflaterCompat {
    int TILE_MODE_CLAMP;    int TILE_MODE_REPEAT;    int TILE_MODE_MIRROR;    <init>();
    android.graphics.Shader createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme);
    android.graphics.Shader createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme);
    androidx.core.content.res.GradientColorInflaterCompat$ColorStops inflateChildElements(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme);
    androidx.core.content.res.GradientColorInflaterCompat$ColorStops checkColors(androidx.core.content.res.GradientColorInflaterCompat$ColorStops,int,int,boolean,int);
    android.graphics.Shader$TileMode parseTileMode(int);
}

-keep class androidx.core.content.res.GradientColorInflaterCompat$ColorStops

-keep class androidx.core.content.res.GradientColorInflaterCompat$ColorStops

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.res.GradientColorInflaterCompat$ColorStops {
    int[] mColors;    float[] mOffsets;    <init>(java.util.List,java.util.List);
    <init>(int,int);
    <init>(int,int,int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.res.ResourcesCompat {
    java.lang.String TAG;    int ID_NULL;    android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme);
    android.graphics.drawable.Drawable getDrawableForDensity(android.content.res.Resources,int,int,android.content.res.Resources$Theme);
    int getColor(android.content.res.Resources,int,android.content.res.Resources$Theme);
    android.content.res.ColorStateList getColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme);
    float getFloat(android.content.res.Resources,int);
    android.graphics.Typeface getFont(android.content.Context,int);
    android.graphics.Typeface getCachedFont(android.content.Context,int);
    void getFont(android.content.Context,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler);
    android.graphics.Typeface getFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback);
    android.graphics.Typeface loadFont(android.content.Context,int,android.util.TypedValue,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean,boolean);
    android.graphics.Typeface loadFont(android.content.Context,android.content.res.Resources,android.util.TypedValue,int,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean,boolean);
    <init>();
}

-keep class androidx.core.content.res.ResourcesCompat$FontCallback

-keep class androidx.core.content.res.ResourcesCompat$FontCallback

-keepclassmembers,allowobfuscation class androidx.core.content.res.ResourcesCompat$FontCallback {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.res.ResourcesCompat$FontCallback {
    void onFontRetrieved(android.graphics.Typeface);
    void onFontRetrievalFailed(int);
    void callbackSuccessAsync(android.graphics.Typeface,android.os.Handler);
    void callbackFailAsync(int,android.os.Handler);
    android.os.Handler getHandler(android.os.Handler);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.res.ResourcesCompat$FontCallback$1 {
    android.graphics.Typeface val$typeface;    androidx.core.content.res.ResourcesCompat$FontCallback this$0;    <init>(androidx.core.content.res.ResourcesCompat$FontCallback,android.graphics.Typeface);
    void run();
}

-keep class androidx.core.content.res.ResourcesCompat$FontCallback

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.res.ResourcesCompat$FontCallback$2 {
    int val$reason;    androidx.core.content.res.ResourcesCompat$FontCallback this$0;    <init>(androidx.core.content.res.ResourcesCompat$FontCallback,int);
    void run();
}

-keep class androidx.core.content.res.ResourcesCompat$FontCallback

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.res.ResourcesCompat$ThemeCompat {
    <init>();
    void rebase(android.content.res.Resources$Theme);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.res.ResourcesCompat$ThemeCompat$ImplApi23 {
    java.lang.Object sRebaseMethodLock;    java.lang.reflect.Method sRebaseMethod;    boolean sRebaseMethodFetched;    <init>();
    void rebase(android.content.res.Resources$Theme);
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.content.res.ResourcesCompat$ThemeCompat$ImplApi29 {
    <init>();
    void rebase(android.content.res.Resources$Theme);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.database.CursorWindowCompat {
    <init>();
    android.database.CursorWindow create(java.lang.String,long);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.database.DatabaseUtilsCompat {
    <init>();
    java.lang.String concatenateWhere(java.lang.String,java.lang.String);
    java.lang.String[] appendSelectionArgs(java.lang.String[],java.lang.String[]);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.database.sqlite.SQLiteCursorCompat {
    <init>();
    void setFillWindowForwardOnly(android.database.sqlite.SQLiteCursor,boolean);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.BitmapCompat {
    boolean hasMipMap(android.graphics.Bitmap);
    void setHasMipMap(android.graphics.Bitmap,boolean);
    int getAllocationByteCount(android.graphics.Bitmap);
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.BlendModeColorFilterCompat {
    android.graphics.ColorFilter createBlendModeColorFilterCompat(int,androidx.core.graphics.BlendModeCompat);
    <init>();
}

-keep class androidx.core.graphics.BlendModeCompat

-keep class androidx.core.graphics.BlendModeCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.BlendModeCompat {
    androidx.core.graphics.BlendModeCompat CLEAR;    androidx.core.graphics.BlendModeCompat SRC;    androidx.core.graphics.BlendModeCompat DST;    androidx.core.graphics.BlendModeCompat SRC_OVER;    androidx.core.graphics.BlendModeCompat DST_OVER;    androidx.core.graphics.BlendModeCompat SRC_IN;    androidx.core.graphics.BlendModeCompat DST_IN;    androidx.core.graphics.BlendModeCompat SRC_OUT;    androidx.core.graphics.BlendModeCompat DST_OUT;    androidx.core.graphics.BlendModeCompat SRC_ATOP;    androidx.core.graphics.BlendModeCompat DST_ATOP;    androidx.core.graphics.BlendModeCompat XOR;    androidx.core.graphics.BlendModeCompat PLUS;    androidx.core.graphics.BlendModeCompat MODULATE;    androidx.core.graphics.BlendModeCompat SCREEN;    androidx.core.graphics.BlendModeCompat OVERLAY;    androidx.core.graphics.BlendModeCompat DARKEN;    androidx.core.graphics.BlendModeCompat LIGHTEN;    androidx.core.graphics.BlendModeCompat COLOR_DODGE;    androidx.core.graphics.BlendModeCompat COLOR_BURN;    androidx.core.graphics.BlendModeCompat HARD_LIGHT;    androidx.core.graphics.BlendModeCompat SOFT_LIGHT;    androidx.core.graphics.BlendModeCompat DIFFERENCE;    androidx.core.graphics.BlendModeCompat EXCLUSION;    androidx.core.graphics.BlendModeCompat MULTIPLY;    androidx.core.graphics.BlendModeCompat HUE;    androidx.core.graphics.BlendModeCompat SATURATION;    androidx.core.graphics.BlendModeCompat COLOR;    androidx.core.graphics.BlendModeCompat LUMINOSITY;    androidx.core.graphics.BlendModeCompat[] $VALUES;    <init>(java.lang.String,int);
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.Insets {
    int left;    int top;    int right;    int bottom;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.PaintCompat {
    java.lang.String TOFU_STRING;    java.lang.String EM_STRING;    java.lang.ThreadLocal sRectThreadLocal;    boolean hasGlyph(android.graphics.Paint,java.lang.String);
    boolean setBlendMode(android.graphics.Paint,androidx.core.graphics.BlendModeCompat);
    androidx.core.util.Pair obtainEmptyRects();
    <init>();
    void <clinit>();
}

-keep class androidx.core.graphics.BlendModeCompat

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.graphics.PathParser$ExtractFloatResult {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.PathSegment {
    android.graphics.PointF mStart;    float mStartFraction;    android.graphics.PointF mEnd;    float mEndFraction;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.TypefaceCompat {
    androidx.core.graphics.TypefaceCompatBaseImpl sTypefaceCompatImpl;    androidx.collection.LruCache sTypefaceCache;    <init>();
    android.graphics.Typeface findFromCache(android.content.res.Resources,int,int);
    java.lang.String createResourceUid(android.content.res.Resources,int,int);
    android.graphics.Typeface getSystemFontFamily(java.lang.String);
    android.graphics.Typeface createFromResourcesFamilyXml(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry,android.content.res.Resources,int,int,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean);
    android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int);
    android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int);
    android.graphics.Typeface getBestFontFromFamily(android.content.Context,android.graphics.Typeface,int);
    android.graphics.Typeface create(android.content.Context,android.graphics.Typeface,int);
    void clearCache();
    void <clinit>();
}

-keep class androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.TypefaceCompat$ResourcesCallbackAdapter {
    androidx.core.content.res.ResourcesCompat$FontCallback mFontCallback;    <init>(androidx.core.content.res.ResourcesCompat$FontCallback);
    void onTypefaceRetrieved(android.graphics.Typeface);
    void onTypefaceRequestFailed(int);
}

-keep class androidx.core.content.res.ResourcesCompat$FontCallback

-keepclassmembers,allowobfuscation class androidx.core.graphics.TypefaceCompatApi21Impl {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.TypefaceCompatApi21Impl {
    java.lang.String TAG;    java.lang.String FONT_FAMILY_CLASS;    java.lang.String ADD_FONT_WEIGHT_STYLE_METHOD;    java.lang.String CREATE_FROM_FAMILIES_WITH_DEFAULT_METHOD;    java.lang.Class sFontFamily;    java.lang.reflect.Constructor sFontFamilyCtor;    java.lang.reflect.Method sAddFontWeightStyle;    java.lang.reflect.Method sCreateFromFamiliesWithDefault;    boolean sHasInitBeenCalled;    void init();
    java.io.File getFile(android.os.ParcelFileDescriptor);
    java.lang.Object newFamily();
    android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object);
    boolean addFontWeightStyle(java.lang.Object,java.lang.String,int,boolean);
    android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int);
    android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int);
    void <clinit>();
}

-keep class androidx.core.provider.FontsContractCompat$FontInfo

-keepclassmembers,allowobfuscation class androidx.core.graphics.TypefaceCompatApi24Impl {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.TypefaceCompatApi24Impl {
    java.lang.String TAG;    java.lang.String FONT_FAMILY_CLASS;    java.lang.String ADD_FONT_WEIGHT_STYLE_METHOD;    java.lang.String CREATE_FROM_FAMILIES_WITH_DEFAULT_METHOD;    java.lang.Class sFontFamily;    java.lang.reflect.Constructor sFontFamilyCtor;    java.lang.reflect.Method sAddFontWeightStyle;    java.lang.reflect.Method sCreateFromFamiliesWithDefault;    boolean isUsable();
    java.lang.Object newFamily();
    boolean addFontWeightStyle(java.lang.Object,java.nio.ByteBuffer,int,int,boolean);
    android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object);
    android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int);
    android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int);
    void <clinit>();
}

-keep class androidx.core.provider.FontsContractCompat$FontInfo

-keepclassmembers,allowobfuscation class androidx.core.graphics.TypefaceCompatApi26Impl {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.TypefaceCompatApi26Impl {
    java.lang.String TAG;    java.lang.String FONT_FAMILY_CLASS;    java.lang.String ADD_FONT_FROM_ASSET_MANAGER_METHOD;    java.lang.String ADD_FONT_FROM_BUFFER_METHOD;    java.lang.String CREATE_FROM_FAMILIES_WITH_DEFAULT_METHOD;    java.lang.String FREEZE_METHOD;    java.lang.String ABORT_CREATION_METHOD;    int RESOLVE_BY_FONT_TABLE;    java.lang.Class mFontFamily;    java.lang.reflect.Constructor mFontFamilyCtor;    java.lang.reflect.Method mAddFontFromAssetManager;    java.lang.reflect.Method mAddFontFromBuffer;    java.lang.reflect.Method mFreeze;    java.lang.reflect.Method mAbortCreation;    java.lang.reflect.Method mCreateFromFamiliesWithDefault;    boolean isFontFamilyPrivateAPIAvailable();
    java.lang.Object newFamily();
    boolean addFontFromAssetManager(android.content.Context,java.lang.Object,java.lang.String,int,int,int,android.graphics.fonts.FontVariationAxis[]);
    boolean addFontFromBuffer(java.lang.Object,java.nio.ByteBuffer,int,int,int);
    android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object);
    boolean freeze(java.lang.Object);
    void abortCreation(java.lang.Object);
    android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int);
    android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int);
    android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int);
    java.lang.Class obtainFontFamily();
    java.lang.reflect.Constructor obtainFontFamilyCtor(java.lang.Class);
    java.lang.reflect.Method obtainAddFontFromAssetManagerMethod(java.lang.Class);
    java.lang.reflect.Method obtainAddFontFromBufferMethod(java.lang.Class);
    java.lang.reflect.Method obtainFreezeMethod(java.lang.Class);
    java.lang.reflect.Method obtainAbortCreationMethod(java.lang.Class);
    java.lang.reflect.Method obtainCreateFromFamiliesWithDefaultMethod(java.lang.Class);
}

-keep class androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry

-keepclassmembers,allowobfuscation class androidx.core.graphics.TypefaceCompatApi28Impl {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.TypefaceCompatApi28Impl {
    java.lang.String CREATE_FROM_FAMILIES_WITH_DEFAULT_METHOD;    int RESOLVE_BY_FONT_TABLE;    java.lang.String DEFAULT_FAMILY;    android.graphics.Typeface createFromFamiliesWithDefault(java.lang.Object);
    java.lang.reflect.Method obtainCreateFromFamiliesWithDefaultMethod(java.lang.Class);
}

-keepclassmembers,allowobfuscation class androidx.core.graphics.TypefaceCompatApi29Impl {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.TypefaceCompatApi29Impl {
    androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[],int);
    android.graphics.Typeface createFromInputStream(android.content.Context,java.io.InputStream);
    android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int);
    android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int);
    android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int);
}

-keep class androidx.core.provider.FontsContractCompat$FontInfo

-keepclassmembers,allowobfuscation class androidx.core.graphics.TypefaceCompatBaseImpl {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.TypefaceCompatBaseImpl {
    java.lang.String TAG;    int INVALID_KEY;    java.util.concurrent.ConcurrentHashMap mFontFamilies;    java.lang.Object findBestFont(java.lang.Object[],int,androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor);
    long getUniqueKey(android.graphics.Typeface);
    androidx.core.provider.FontsContractCompat$FontInfo findBestInfo(androidx.core.provider.FontsContractCompat$FontInfo[],int);
    android.graphics.Typeface createFromInputStream(android.content.Context,java.io.InputStream);
    android.graphics.Typeface createFromFontInfo(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[],int);
    androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry findBestEntry(androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,int);
    android.graphics.Typeface createFromFontFamilyFilesResourceEntry(android.content.Context,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry,android.content.res.Resources,int);
    android.graphics.Typeface createFromResourcesFontFile(android.content.Context,android.content.res.Resources,int,java.lang.String,int);
    androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry getFontFamily(android.graphics.Typeface);
    void addFontFamily(android.graphics.Typeface,androidx.core.content.res.FontResourcesParserCompat$FontFamilyFilesResourceEntry);
}

-keep class androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.TypefaceCompatBaseImpl$1 {
    androidx.core.graphics.TypefaceCompatBaseImpl this$0;    <init>(androidx.core.graphics.TypefaceCompatBaseImpl);
    int getWeight(androidx.core.provider.FontsContractCompat$FontInfo);
    boolean isItalic(androidx.core.provider.FontsContractCompat$FontInfo);
    boolean isItalic(java.lang.Object);
    int getWeight(java.lang.Object);
}

-keep class androidx.core.graphics.TypefaceCompatBaseImpl

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.TypefaceCompatBaseImpl$2 {
    androidx.core.graphics.TypefaceCompatBaseImpl this$0;    <init>(androidx.core.graphics.TypefaceCompatBaseImpl);
    int getWeight(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry);
    boolean isItalic(androidx.core.content.res.FontResourcesParserCompat$FontFileResourceEntry);
    boolean isItalic(java.lang.Object);
    int getWeight(java.lang.Object);
}

-keep class androidx.core.graphics.TypefaceCompatBaseImpl

-keep class androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.TypefaceCompatBaseImpl$StyleExtractor {
    int getWeight(java.lang.Object);
    boolean isItalic(java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.TypefaceCompatUtil {
    java.lang.String TAG;    java.lang.String CACHE_FILE_PREFIX;    <init>();
    java.io.File getTempFile(android.content.Context);
    java.nio.ByteBuffer mmap(java.io.File);
    java.nio.ByteBuffer mmap(android.content.Context,android.os.CancellationSignal,android.net.Uri);
    java.nio.ByteBuffer copyToDirectBuffer(android.content.Context,android.content.res.Resources,int);
    boolean copyToFile(java.io.File,java.io.InputStream);
    boolean copyToFile(java.io.File,android.content.res.Resources,int);
    void closeQuietly(java.io.Closeable);
    java.util.Map readFontInfoIntoByteBuffer(android.content.Context,androidx.core.provider.FontsContractCompat$FontInfo[],android.os.CancellationSignal);
}

-keep class androidx.core.provider.FontsContractCompat$FontInfo

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.drawable.DrawableCompat {
    java.lang.String TAG;    java.lang.reflect.Method sSetLayoutDirectionMethod;    boolean sSetLayoutDirectionMethodFetched;    java.lang.reflect.Method sGetLayoutDirectionMethod;    boolean sGetLayoutDirectionMethodFetched;    void jumpToCurrentState(android.graphics.drawable.Drawable);
    void setAutoMirrored(android.graphics.drawable.Drawable,boolean);
    boolean isAutoMirrored(android.graphics.drawable.Drawable);
    void setHotspot(android.graphics.drawable.Drawable,float,float);
    void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int);
    void setTint(android.graphics.drawable.Drawable,int);
    void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList);
    void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode);
    int getAlpha(android.graphics.drawable.Drawable);
    void applyTheme(android.graphics.drawable.Drawable,android.content.res.Resources$Theme);
    boolean canApplyTheme(android.graphics.drawable.Drawable);
    android.graphics.ColorFilter getColorFilter(android.graphics.drawable.Drawable);
    void clearColorFilter(android.graphics.drawable.Drawable);
    void inflate(android.graphics.drawable.Drawable,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme);
    android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable);
    android.graphics.drawable.Drawable unwrap(android.graphics.drawable.Drawable);
    boolean setLayoutDirection(android.graphics.drawable.Drawable,int);
    int getLayoutDirection(android.graphics.drawable.Drawable);
    <init>();
}

-keep class androidx.core.graphics.drawable.IconCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.drawable.IconCompat {
    java.lang.String TAG;    int TYPE_UNKNOWN;    int TYPE_BITMAP;    int TYPE_RESOURCE;    int TYPE_DATA;    int TYPE_URI;    int TYPE_ADAPTIVE_BITMAP;    int TYPE_URI_ADAPTIVE_BITMAP;    float ADAPTIVE_ICON_INSET_FACTOR;    float DEFAULT_VIEW_PORT_SCALE;    float ICON_DIAMETER_FACTOR;    float BLUR_FACTOR;    float KEY_SHADOW_OFFSET_FACTOR;    int KEY_SHADOW_ALPHA;    int AMBIENT_SHADOW_ALPHA;    java.lang.String EXTRA_TYPE;    java.lang.String EXTRA_OBJ;    java.lang.String EXTRA_INT1;    java.lang.String EXTRA_INT2;    java.lang.String EXTRA_TINT_LIST;    java.lang.String EXTRA_TINT_MODE;    java.lang.String EXTRA_STRING1;    int mType;    java.lang.Object mObj1;    byte[] mData;    android.os.Parcelable mParcelable;    int mInt1;    int mInt2;    android.content.res.ColorStateList mTintList;    android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE;    android.graphics.PorterDuff$Mode mTintMode;    java.lang.String mTintModeStr;    java.lang.String mString1;    androidx.core.graphics.drawable.IconCompat createWithResource(android.content.Context,int);
    androidx.core.graphics.drawable.IconCompat createWithResource(android.content.res.Resources,java.lang.String,int);
    androidx.core.graphics.drawable.IconCompat createWithBitmap(android.graphics.Bitmap);
    androidx.core.graphics.drawable.IconCompat createWithAdaptiveBitmap(android.graphics.Bitmap);
    androidx.core.graphics.drawable.IconCompat createWithData(byte[],int,int);
    androidx.core.graphics.drawable.IconCompat createWithContentUri(java.lang.String);
    androidx.core.graphics.drawable.IconCompat createWithContentUri(android.net.Uri);
    androidx.core.graphics.drawable.IconCompat createWithAdaptiveBitmapContentUri(java.lang.String);
    androidx.core.graphics.drawable.IconCompat createWithAdaptiveBitmapContentUri(android.net.Uri);
    <init>(int);
    int getType();
    java.lang.String getResPackage();
    int getResId();
    android.graphics.Bitmap getBitmap();
    android.net.Uri getUri();
    androidx.core.graphics.drawable.IconCompat setTint(int);
    androidx.core.graphics.drawable.IconCompat setTintList(android.content.res.ColorStateList);
    androidx.core.graphics.drawable.IconCompat setTintMode(android.graphics.PorterDuff$Mode);
    android.graphics.drawable.Icon toIcon();
    android.graphics.drawable.Icon toIcon(android.content.Context);
    void checkResource(android.content.Context);
    android.graphics.drawable.Drawable loadDrawable(android.content.Context);
    android.graphics.drawable.Drawable loadDrawableInner(android.content.Context);
    java.io.InputStream getUriInputStream(android.content.Context);
    android.content.res.Resources getResources(android.content.Context,java.lang.String);
    void addToShortcutIntent(android.content.Intent,android.graphics.drawable.Drawable,android.content.Context);
    android.os.Bundle toBundle();
    java.lang.String toString();
    void onPreParceling(boolean);
    void onPostParceling();
    java.lang.String typeToString(int);
    androidx.core.graphics.drawable.IconCompat createFromBundle(android.os.Bundle);
    androidx.core.graphics.drawable.IconCompat createFromIcon(android.content.Context,android.graphics.drawable.Icon);
    androidx.core.graphics.drawable.IconCompat createFromIcon(android.graphics.drawable.Icon);
    androidx.core.graphics.drawable.IconCompat createFromIconOrNullIfZeroResId(android.graphics.drawable.Icon);
    int getType(android.graphics.drawable.Icon);
    java.lang.String getResPackage(android.graphics.drawable.Icon);
    int getResId(android.graphics.drawable.Icon);
    android.net.Uri getUri(android.graphics.drawable.Icon);
    android.graphics.Bitmap createLegacyIconFromAdaptiveIcon(android.graphics.Bitmap,boolean);
    void <clinit>();
}

-keepclassmembers,allowobfuscation class androidx.core.graphics.drawable.IconCompat {
    <init>();
}

-keepclassmembers,allowobfuscation class androidx.core.graphics.drawable.IconCompatParcelizer {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.drawable.IconCompatParcelizer {
    androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel);
    void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel);
}

-keep class androidx.versionedparcelable.VersionedParcel

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.drawable.RoundedBitmapDrawable {
    int DEFAULT_PAINT_FLAGS;    android.graphics.Bitmap mBitmap;    int mTargetDensity;    int mGravity;    android.graphics.Paint mPaint;    android.graphics.BitmapShader mBitmapShader;    android.graphics.Matrix mShaderMatrix;    float mCornerRadius;    android.graphics.Rect mDstRect;    android.graphics.RectF mDstRectF;    boolean mApplyGravity;    boolean mIsCircular;    int mBitmapWidth;    int mBitmapHeight;    android.graphics.Paint getPaint();
    android.graphics.Bitmap getBitmap();
    void computeBitmapSize();
    void setTargetDensity(android.graphics.Canvas);
    void setTargetDensity(android.util.DisplayMetrics);
    void setTargetDensity(int);
    int getGravity();
    void setGravity(int);
    void setMipMap(boolean);
    boolean hasMipMap();
    void setAntiAlias(boolean);
    boolean hasAntiAlias();
    void setFilterBitmap(boolean);
    void setDither(boolean);
    void gravityCompatApply(int,int,int,android.graphics.Rect,android.graphics.Rect);
    void updateDstRect();
    void draw(android.graphics.Canvas);
    void setAlpha(int);
    int getAlpha();
    void setColorFilter(android.graphics.ColorFilter);
    android.graphics.ColorFilter getColorFilter();
    void setCircular(boolean);
    void updateCircularCornerRadius();
    boolean isCircular();
    void setCornerRadius(float);
    void onBoundsChange(android.graphics.Rect);
    float getCornerRadius();
    int getIntrinsicWidth();
    int getIntrinsicHeight();
    int getOpacity();
    <init>(android.content.res.Resources,android.graphics.Bitmap);
    boolean isGreaterThanZero(float);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.drawable.RoundedBitmapDrawable21 {
    <init>(android.content.res.Resources,android.graphics.Bitmap);
    void getOutline(android.graphics.Outline);
    void setMipMap(boolean);
    boolean hasMipMap();
    void gravityCompatApply(int,int,int,android.graphics.Rect,android.graphics.Rect);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.drawable.WrappedDrawableApi14 {
    android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE;    int mCurrentColor;    android.graphics.PorterDuff$Mode mCurrentMode;    boolean mColorFilterSet;    androidx.core.graphics.drawable.WrappedDrawableState mState;    boolean mMutated;    android.graphics.drawable.Drawable mDrawable;    <init>(androidx.core.graphics.drawable.WrappedDrawableState,android.content.res.Resources);
    <init>(android.graphics.drawable.Drawable);
    void updateLocalState(android.content.res.Resources);
    void jumpToCurrentState();
    void draw(android.graphics.Canvas);
    void onBoundsChange(android.graphics.Rect);
    void setChangingConfigurations(int);
    int getChangingConfigurations();
    void setDither(boolean);
    void setFilterBitmap(boolean);
    void setAlpha(int);
    void setColorFilter(android.graphics.ColorFilter);
    boolean isStateful();
    boolean setState(int[]);
    int[] getState();
    android.graphics.drawable.Drawable getCurrent();
    boolean setVisible(boolean,boolean);
    int getOpacity();
    android.graphics.Region getTransparentRegion();
    int getIntrinsicWidth();
    int getIntrinsicHeight();
    int getMinimumWidth();
    int getMinimumHeight();
    boolean getPadding(android.graphics.Rect);
    void setAutoMirrored(boolean);
    boolean isAutoMirrored();
    boolean onLayoutDirectionChanged(int);
    int getLayoutDirection();
    android.graphics.drawable.Drawable$ConstantState getConstantState();
    android.graphics.drawable.Drawable mutate();
    androidx.core.graphics.drawable.WrappedDrawableState mutateConstantState();
    void invalidateDrawable(android.graphics.drawable.Drawable);
    void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long);
    void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable);
    boolean onLevelChange(int);
    void setTint(int);
    void setTintList(android.content.res.ColorStateList);
    void setTintMode(android.graphics.PorterDuff$Mode);
    boolean updateTint(int[]);
    android.graphics.drawable.Drawable getWrappedDrawable();
    void setWrappedDrawable(android.graphics.drawable.Drawable);
    boolean isCompatTintEnabled();
    void <clinit>();
}

-keep class androidx.core.graphics.drawable.WrappedDrawableState

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.graphics.drawable.WrappedDrawableApi21 {
    java.lang.String TAG;    java.lang.reflect.Method sIsProjectedDrawableMethod;    <init>(android.graphics.drawable.Drawable);
    <init>(androidx.core.graphics.drawable.WrappedDrawableState,android.content.res.Resources);
    void setHotspot(float,float);
    void setHotspotBounds(int,int,int,int);
    void getOutline(android.graphics.Outline);
    android.graphics.Rect getDirtyBounds();
    void setTintList(android.content.res.ColorStateList);
    void setTint(int);
    void setTintMode(android.graphics.PorterDuff$Mode);
    boolean setState(int[]);
    boolean isCompatTintEnabled();
    boolean isProjected();
    void findAndCacheIsProjectedDrawableMethod();
}

-keep class androidx.core.graphics.drawable.WrappedDrawableState

-keep class androidx.core.graphics.drawable.WrappedDrawableState

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.hardware.display.DisplayManagerCompat {
    java.util.WeakHashMap sInstances;    java.lang.String DISPLAY_CATEGORY_PRESENTATION;    android.content.Context mContext;    <init>(android.content.Context);
    androidx.core.hardware.display.DisplayManagerCompat getInstance(android.content.Context);
    android.view.Display getDisplay(int);
    android.view.Display[] getDisplays();
    android.view.Display[] getDisplays(java.lang.String);
    void <clinit>();
}

-keep class androidx.core.hardware.display.DisplayManagerCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.hardware.fingerprint.FingerprintManagerCompat {
    android.content.Context mContext;    androidx.core.hardware.fingerprint.FingerprintManagerCompat from(android.content.Context);
    <init>(android.content.Context);
    boolean hasEnrolledFingerprints();
    boolean isHardwareDetected();
    void authenticate(androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject,int,androidx.core.os.CancellationSignal,androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback,android.os.Handler);
    android.hardware.fingerprint.FingerprintManager getFingerprintManagerOrNull(android.content.Context);
    android.hardware.fingerprint.FingerprintManager$CryptoObject wrapCryptoObject(androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject);
    androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject unwrapCryptoObject(android.hardware.fingerprint.FingerprintManager$CryptoObject);
    android.hardware.fingerprint.FingerprintManager$AuthenticationCallback wrapCallback(androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback);
}

-keep class androidx.core.hardware.fingerprint.FingerprintManagerCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.hardware.fingerprint.FingerprintManagerCompat$1 {
    androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback val$callback;    <init>(androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback);
    void onAuthenticationError(int,java.lang.CharSequence);
    void onAuthenticationHelp(int,java.lang.CharSequence);
    void onAuthenticationSucceeded(android.hardware.fingerprint.FingerprintManager$AuthenticationResult);
    void onAuthenticationFailed();
}

-keep class androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback

-keep class androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback

-keepclassmembers,allowobfuscation class androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationCallback {
    void onAuthenticationError(int,java.lang.CharSequence);
    void onAuthenticationHelp(int,java.lang.CharSequence);
    void onAuthenticationSucceeded(androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationResult);
    void onAuthenticationFailed();
}

-keep class androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationResult

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.hardware.fingerprint.FingerprintManagerCompat$AuthenticationResult {
    androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject mCryptoObject;    <init>(androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject);
    androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject getCryptoObject();
}

-keep class androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject {
    java.security.Signature mSignature;    javax.crypto.Cipher mCipher;    javax.crypto.Mac mMac;    <init>(java.security.Signature);
    <init>(javax.crypto.Cipher);
    <init>(javax.crypto.Mac);
    java.security.Signature getSignature();
    javax.crypto.Cipher getCipher();
    javax.crypto.Mac getMac();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.GnssStatusCompat {
    int CONSTELLATION_UNKNOWN;    int CONSTELLATION_GPS;    int CONSTELLATION_SBAS;    int CONSTELLATION_GLONASS;    int CONSTELLATION_QZSS;    int CONSTELLATION_BEIDOU;    int CONSTELLATION_GALILEO;    int CONSTELLATION_IRNSS;    androidx.core.location.GnssStatusCompat wrap(android.location.GnssStatus);
    androidx.core.location.GnssStatusCompat wrap(android.location.GpsStatus);
    int getSatelliteCount();
    int getConstellationType(int);
    int getSvid(int);
    float getCn0DbHz(int);
    float getElevationDegrees(int);
    float getAzimuthDegrees(int);
    boolean hasEphemerisData(int);
    boolean hasAlmanacData(int);
    boolean usedInFix(int);
    boolean hasCarrierFrequencyHz(int);
    float getCarrierFrequencyHz(int);
    boolean hasBasebandCn0DbHz(int);
    float getBasebandCn0DbHz(int);
}

-keep class androidx.core.location.GnssStatusCompat

-keepclassmembers,allowobfuscation class androidx.core.location.GnssStatusCompat {
    <init>();
}

-keepclassmembers,allowobfuscation class androidx.core.location.GnssStatusCompat$Callback {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.GnssStatusCompat$Callback {
    void onStarted();
    void onStopped();
    void onFirstFix(int);
    void onSatelliteStatusChanged(androidx.core.location.GnssStatusCompat);
}

-keep class androidx.core.location.GnssStatusCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.GnssStatusWrapper {
    android.location.GnssStatus mWrapped;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.GpsStatusWrapper {
    android.location.GpsStatus mWrapped;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.LocationManagerCompat {
    long PRE_N_LOOPER_TIMEOUT_S;    java.lang.reflect.Field sContextField;    androidx.collection.SimpleArrayMap sGnssStatusListeners;    boolean isLocationEnabled(android.location.LocationManager);
    boolean registerGnssStatusCallback(android.location.LocationManager,androidx.core.location.GnssStatusCompat$Callback,android.os.Handler);
    boolean registerGnssStatusCallback(android.location.LocationManager,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback);
    boolean registerGnssStatusCallback(android.location.LocationManager,android.os.Handler,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat$Callback);
    void unregisterGnssStatusCallback(android.location.LocationManager,androidx.core.location.GnssStatusCompat$Callback);
    <init>();
    void <clinit>();
}

-keep class androidx.core.location.GnssStatusCompat$Callback

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.LocationManagerCompat$1 {
    android.location.LocationManager val$locationManager;    androidx.core.location.LocationManagerCompat$GpsStatusTransport val$myTransport;    <init>(android.location.LocationManager,androidx.core.location.LocationManagerCompat$GpsStatusTransport);
    java.lang.Boolean call();
    java.lang.Object call();
}

-keep class androidx.core.location.LocationManagerCompat$GpsStatusTransport

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.LocationManagerCompat$Api28Impl {
    <init>();
    boolean isLocationEnabled(android.location.LocationManager);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.LocationManagerCompat$GnssStatusTransport {
    androidx.core.location.GnssStatusCompat$Callback mCallback;    <init>(androidx.core.location.GnssStatusCompat$Callback);
    void onStarted();
    void onStopped();
    void onFirstFix(int);
    void onSatelliteStatusChanged(android.location.GnssStatus);
}

-keep class androidx.core.location.GnssStatusCompat$Callback

-keep class androidx.core.location.LocationManagerCompat$GpsStatusTransport

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.LocationManagerCompat$GpsStatusTransport {
    android.location.LocationManager mLocationManager;    androidx.core.location.GnssStatusCompat$Callback mCallback;    java.util.concurrent.Executor mExecutor;    <init>(android.location.LocationManager,androidx.core.location.GnssStatusCompat$Callback);
    void register(java.util.concurrent.Executor);
    void unregister();
    void onGpsStatusChanged(int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.LocationManagerCompat$GpsStatusTransport$1 {
    java.util.concurrent.Executor val$executor;    androidx.core.location.LocationManagerCompat$GpsStatusTransport this$0;    <init>(androidx.core.location.LocationManagerCompat$GpsStatusTransport,java.util.concurrent.Executor);
    void run();
}

-keep class androidx.core.location.LocationManagerCompat$GpsStatusTransport

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.LocationManagerCompat$GpsStatusTransport$2 {
    java.util.concurrent.Executor val$executor;    androidx.core.location.LocationManagerCompat$GpsStatusTransport this$0;    <init>(androidx.core.location.LocationManagerCompat$GpsStatusTransport,java.util.concurrent.Executor);
    void run();
}

-keep class androidx.core.location.LocationManagerCompat$GpsStatusTransport

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.LocationManagerCompat$GpsStatusTransport$3 {
    java.util.concurrent.Executor val$executor;    int val$ttff;    androidx.core.location.LocationManagerCompat$GpsStatusTransport this$0;    <init>(androidx.core.location.LocationManagerCompat$GpsStatusTransport,java.util.concurrent.Executor,int);
    void run();
}

-keep class androidx.core.location.LocationManagerCompat$GpsStatusTransport

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.LocationManagerCompat$GpsStatusTransport$4 {
    java.util.concurrent.Executor val$executor;    androidx.core.location.GnssStatusCompat val$gnssStatus;    androidx.core.location.LocationManagerCompat$GpsStatusTransport this$0;    <init>(androidx.core.location.LocationManagerCompat$GpsStatusTransport,java.util.concurrent.Executor,androidx.core.location.GnssStatusCompat);
    void run();
}

-keep class androidx.core.location.LocationManagerCompat$GpsStatusTransport

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.LocationManagerCompat$InlineHandlerExecutor {
    android.os.Handler mHandler;    <init>(android.os.Handler);
    void execute(java.lang.Runnable);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport {
    androidx.core.location.GnssStatusCompat$Callback mCallback;    java.util.concurrent.Executor mExecutor;    <init>(androidx.core.location.GnssStatusCompat$Callback);
    void register(java.util.concurrent.Executor);
    void unregister();
    void onStarted();
    void onStopped();
    void onFirstFix(int);
    void onSatelliteStatusChanged(android.location.GnssStatus);
}

-keep class androidx.core.location.GnssStatusCompat$Callback

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport$1 {
    java.util.concurrent.Executor val$executor;    androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport this$0;    <init>(androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport,java.util.concurrent.Executor);
    void run();
}

-keep class androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport$2 {
    java.util.concurrent.Executor val$executor;    androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport this$0;    <init>(androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport,java.util.concurrent.Executor);
    void run();
}

-keep class androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport$3 {
    java.util.concurrent.Executor val$executor;    int val$ttffMillis;    androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport this$0;    <init>(androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport,java.util.concurrent.Executor,int);
    void run();
}

-keep class androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport$4 {
    java.util.concurrent.Executor val$executor;    android.location.GnssStatus val$status;    androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport this$0;    <init>(androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport,java.util.concurrent.Executor,android.location.GnssStatus);
    void run();
}

-keep class androidx.core.location.LocationManagerCompat$PreRGnssStatusTransport

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.net.ConnectivityManagerCompat {
    int RESTRICT_BACKGROUND_STATUS_DISABLED;    int RESTRICT_BACKGROUND_STATUS_WHITELISTED;    int RESTRICT_BACKGROUND_STATUS_ENABLED;    boolean isActiveNetworkMetered(android.net.ConnectivityManager);
    android.net.NetworkInfo getNetworkInfoFromBroadcast(android.net.ConnectivityManager,android.content.Intent);
    int getRestrictBackgroundStatus(android.net.ConnectivityManager);
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.net.ParseException {
    java.lang.String response;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.net.TrafficStatsCompat {
    void clearThreadStatsTag();
    int getThreadStatsTag();
    void incrementOperationCount(int);
    void incrementOperationCount(int,int);
    void setThreadStatsTag(int);
    void tagSocket(java.net.Socket);
    void untagSocket(java.net.Socket);
    void tagDatagramSocket(java.net.DatagramSocket);
    void untagDatagramSocket(java.net.DatagramSocket);
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.net.UriCompat {
    <init>();
    java.lang.String toSafeString(android.net.Uri);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.BuildCompat {
    <init>();
    boolean isAtLeastN();
    boolean isAtLeastNMR1();
    boolean isAtLeastO();
    boolean isAtLeastOMR1();
    boolean isAtLeastP();
    boolean isAtLeastQ();
    boolean isAtLeastR();
    boolean isAtLeastS();
}

-keep class androidx.core.os.CancellationSignal

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.os.CancellationSignal {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.ConfigurationCompat {
    <init>();
    androidx.core.os.LocaleListCompat getLocales(android.content.res.Configuration);
}

-keep class androidx.core.os.LocaleListCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.EnvironmentCompat {
    java.lang.String TAG;    java.lang.String MEDIA_UNKNOWN;    java.lang.String getStorageState(java.io.File);
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.ExecutorCompat {
    java.util.concurrent.Executor create(android.os.Handler);
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.ExecutorCompat$HandlerExecutor {
    android.os.Handler mHandler;    <init>(android.os.Handler);
    void execute(java.lang.Runnable);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.HandlerCompat {
    java.lang.String TAG;    android.os.Handler createAsync(android.os.Looper);
    android.os.Handler createAsync(android.os.Looper,android.os.Handler$Callback);
    boolean postDelayed(android.os.Handler,java.lang.Runnable,java.lang.Object,long);
    <init>();
}

-keep class androidx.core.os.LocaleListCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.LocaleListCompat {
    androidx.core.os.LocaleListCompat sEmptyLocaleList;    androidx.core.os.LocaleListInterface mImpl;    <init>(androidx.core.os.LocaleListInterface);
    androidx.core.os.LocaleListCompat wrap(java.lang.Object);
    androidx.core.os.LocaleListCompat wrap(android.os.LocaleList);
    java.lang.Object unwrap();
    androidx.core.os.LocaleListCompat create(java.util.Locale[]);
    java.util.Locale get(int);
    boolean isEmpty();
    int size();
    int indexOf(java.util.Locale);
    java.lang.String toLanguageTags();
    java.util.Locale getFirstMatch(java.lang.String[]);
    androidx.core.os.LocaleListCompat getEmptyLocaleList();
    androidx.core.os.LocaleListCompat forLanguageTags(java.lang.String);
    java.util.Locale forLanguageTagCompat(java.lang.String);
    androidx.core.os.LocaleListCompat getAdjustedDefault();
    androidx.core.os.LocaleListCompat getDefault();
    boolean equals(java.lang.Object);
    int hashCode();
    java.lang.String toString();
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.LocaleListCompatWrapper {
    java.util.Locale[] mList;    java.lang.String mStringRepresentation;    java.util.Locale[] sEmptyList;    java.util.Locale LOCALE_EN_XA;    java.util.Locale LOCALE_AR_XB;    java.util.Locale EN_LATN;    java.lang.Object getLocaleList();
    java.util.Locale get(int);
    boolean isEmpty();
    int size();
    int indexOf(java.util.Locale);
    boolean equals(java.lang.Object);
    int hashCode();
    java.lang.String toString();
    java.lang.String toLanguageTags();
    <init>(java.util.Locale[]);
    void toLanguageTag(java.lang.StringBuilder,java.util.Locale);
    java.lang.String getLikelyScript(java.util.Locale);
    boolean isPseudoLocale(java.util.Locale);
    int matchScore(java.util.Locale,java.util.Locale);
    int findFirstMatchIndex(java.util.Locale);
    int computeFirstMatchIndex(java.util.Collection,boolean);
    java.util.Locale computeFirstMatch(java.util.Collection,boolean);
    java.util.Locale getFirstMatch(java.lang.String[]);
    void <clinit>();
}

-keep class androidx.core.os.LocaleListInterface

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.LocaleListPlatformWrapper {
    android.os.LocaleList mLocaleList;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.MessageCompat {
    boolean sTrySetAsynchronous;    boolean sTryIsAsynchronous;    void setAsynchronous(android.os.Message,boolean);
    boolean isAsynchronous(android.os.Message);
    <init>();
    void <clinit>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.os.OperationCanceledException {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.ParcelCompat {
    boolean readBoolean(android.os.Parcel);
    void writeBoolean(android.os.Parcel,boolean);
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.ParcelableCompat {
    android.os.Parcelable$Creator newCreator(androidx.core.os.ParcelableCompatCreatorCallbacks);
    <init>();
}

-keep class androidx.core.os.ParcelableCompatCreatorCallbacks

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.ParcelableCompat$ParcelableCompatCreatorHoneycombMR2 {
    androidx.core.os.ParcelableCompatCreatorCallbacks mCallbacks;    <init>(androidx.core.os.ParcelableCompatCreatorCallbacks);
    java.lang.Object createFromParcel(android.os.Parcel);
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader);
    java.lang.Object[] newArray(int);
}

-keep class androidx.core.os.ParcelableCompatCreatorCallbacks

-keep class androidx.core.os.ParcelableCompatCreatorCallbacks

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.ParcelableCompatCreatorCallbacks {
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader);
    java.lang.Object[] newArray(int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.ProcessCompat {
    <init>();
    boolean isApplicationUid(int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.ProcessCompat$Api16Impl {
    java.lang.Object sResolvedLock;    java.lang.reflect.Method sMethodUserIdIsAppMethod;    boolean sResolved;    <init>();
    boolean isApplicationUid(int);
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.ProcessCompat$Api17Impl {
    java.lang.Object sResolvedLock;    java.lang.reflect.Method sMethodUserHandleIsAppMethod;    boolean sResolved;    <init>();
    boolean isApplicationUid(int);
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.ProcessCompat$Api24Impl {
    <init>();
    boolean isApplicationUid(int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.TraceCompat {
    java.lang.String TAG;    long sTraceTagApp;    java.lang.reflect.Method sIsTagEnabledMethod;    java.lang.reflect.Method sAsyncTraceBeginMethod;    java.lang.reflect.Method sAsyncTraceEndMethod;    java.lang.reflect.Method sTraceCounterMethod;    boolean isEnabled();
    void beginSection(java.lang.String);
    void endSection();
    void beginAsyncSection(java.lang.String,int);
    void endAsyncSection(java.lang.String,int);
    void setCounter(java.lang.String,int);
    <init>();
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.os.UserManagerCompat {
    <init>();
    boolean isUserUnlocked(android.content.Context);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.CallbackWithHandler {
    androidx.core.provider.FontsContractCompat$FontRequestCallback mCallback;    android.os.Handler mCallbackHandler;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.CallbackWithHandler$1 {
    androidx.core.provider.FontsContractCompat$FontRequestCallback val$callback;    android.graphics.Typeface val$typeface;    androidx.core.provider.CallbackWithHandler this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.CallbackWithHandler$2 {
    androidx.core.provider.FontsContractCompat$FontRequestCallback val$callback;    int val$reason;    androidx.core.provider.CallbackWithHandler this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.provider.FontProvider$1 {
    <init>();
}

-keep class androidx.core.provider.FontRequest

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.FontRequest {
    java.lang.String mProviderAuthority;    java.lang.String mProviderPackage;    java.lang.String mQuery;    java.util.List mCertificates;    int mCertificatesArray;    java.lang.String mIdentifier;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.FontRequestWorker$1 {
    java.lang.String val$id;    android.content.Context val$context;    androidx.core.provider.FontRequest val$request;    int val$style;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.FontRequestWorker$2 {
    androidx.core.provider.CallbackWithHandler val$callback;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.FontRequestWorker$3 {
    java.lang.String val$id;    android.content.Context val$context;    androidx.core.provider.FontRequest val$request;    int val$style;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.FontRequestWorker$4 {
    java.lang.String val$id;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.FontRequestWorker$TypefaceResult {
    android.graphics.Typeface mTypeface;    int mResult;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.FontsContractCompat {
    java.lang.String PARCEL_FONT_RESULTS;    int RESULT_CODE_PROVIDER_NOT_FOUND;    int RESULT_CODE_WRONG_CERTIFICATES;    <init>();
    android.graphics.Typeface buildTypeface(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontsContractCompat$FontInfo[]);
    androidx.core.provider.FontsContractCompat$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,androidx.core.provider.FontRequest);
    void requestFont(android.content.Context,androidx.core.provider.FontRequest,androidx.core.provider.FontsContractCompat$FontRequestCallback,android.os.Handler);
    android.graphics.Typeface requestFont(android.content.Context,androidx.core.provider.FontRequest,int,boolean,int,android.os.Handler,androidx.core.provider.FontsContractCompat$FontRequestCallback);
    void resetTypefaceCache();
    android.graphics.Typeface getFontSync(android.content.Context,androidx.core.provider.FontRequest,androidx.core.content.res.ResourcesCompat$FontCallback,android.os.Handler,boolean,int,int);
    void resetCache();
    java.util.Map prepareFontData(android.content.Context,androidx.core.provider.FontsContractCompat$FontInfo[],android.os.CancellationSignal);
    android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,androidx.core.provider.FontRequest,android.content.res.Resources);
}

-keep class androidx.core.provider.FontsContractCompat$FontInfo

-keepclassmembers,allowobfuscation class androidx.core.provider.FontsContractCompat$Columns {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.FontsContractCompat$Columns {
    java.lang.String FILE_ID;    java.lang.String TTC_INDEX;    java.lang.String VARIATION_SETTINGS;    java.lang.String WEIGHT;    java.lang.String ITALIC;    java.lang.String RESULT_CODE;    int RESULT_CODE_OK;    int RESULT_CODE_FONT_NOT_FOUND;    int RESULT_CODE_FONT_UNAVAILABLE;    int RESULT_CODE_MALFORMED_QUERY;}

-keep class androidx.core.provider.FontsContractCompat$FontFamilyResult

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.FontsContractCompat$FontFamilyResult {
    int STATUS_OK;    int STATUS_WRONG_CERTIFICATES;    int STATUS_UNEXPECTED_DATA_PROVIDED;    int mStatusCode;    androidx.core.provider.FontsContractCompat$FontInfo[] mFonts;    <init>(int,androidx.core.provider.FontsContractCompat$FontInfo[]);
    int getStatusCode();
    androidx.core.provider.FontsContractCompat$FontInfo[] getFonts();
    androidx.core.provider.FontsContractCompat$FontFamilyResult create(int,androidx.core.provider.FontsContractCompat$FontInfo[]);
}

-keep class androidx.core.provider.FontsContractCompat$FontInfo

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.FontsContractCompat$FontInfo {
    android.net.Uri mUri;    int mTtcIndex;    int mWeight;    boolean mItalic;    int mResultCode;    <init>(android.net.Uri,int,int,boolean,int);
    androidx.core.provider.FontsContractCompat$FontInfo create(android.net.Uri,int,int,boolean,int);
    android.net.Uri getUri();
    int getTtcIndex();
    int getWeight();
    boolean isItalic();
    int getResultCode();
}

-keep class androidx.core.provider.FontsContractCompat$FontRequestCallback

-keepclassmembers,allowobfuscation class androidx.core.provider.FontsContractCompat$FontRequestCallback {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.FontsContractCompat$FontRequestCallback {
    int RESULT_OK;    int RESULT_SUCCESS;    int FAIL_REASON_PROVIDER_NOT_FOUND;    int FAIL_REASON_WRONG_CERTIFICATES;    int FAIL_REASON_FONT_LOAD_ERROR;    int FAIL_REASON_SECURITY_VIOLATION;    int FAIL_REASON_FONT_NOT_FOUND;    int FAIL_REASON_FONT_UNAVAILABLE;    int FAIL_REASON_MALFORMED_QUERY;    void onTypefaceRetrieved(android.graphics.Typeface);
    void onTypefaceRequestFailed(int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.RequestExecutor$DefaultThreadFactory$ProcessPriorityThread {
    int mPriority;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.RequestExecutor$HandlerExecutor {
    android.os.Handler mHandler;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.RequestExecutor$ReplyRunnable$1 {
    androidx.core.util.Consumer val$consumer;    java.lang.Object val$result;    androidx.core.provider.RequestExecutor$ReplyRunnable this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.SelfDestructiveThread {
    java.lang.Object mLock;    int mDestructAfterMillisec;    int mPriority;    java.lang.String mThreadName;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.SelfDestructiveThread$1 {
    androidx.core.provider.SelfDestructiveThread this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.SelfDestructiveThread$2 {
    java.util.concurrent.Callable val$callable;    android.os.Handler val$calleeHandler;    androidx.core.provider.SelfDestructiveThread$ReplyCallback val$reply;    androidx.core.provider.SelfDestructiveThread this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.SelfDestructiveThread$2$1 {
    java.lang.Object val$result;    androidx.core.provider.SelfDestructiveThread$2 this$1;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.provider.SelfDestructiveThread$3 {
    java.util.concurrent.atomic.AtomicReference val$holder;    java.util.concurrent.Callable val$callable;    java.util.concurrent.locks.ReentrantLock val$lock;    java.util.concurrent.atomic.AtomicBoolean val$running;    java.util.concurrent.locks.Condition val$cond;    androidx.core.provider.SelfDestructiveThread this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.BidiFormatter {
    boolean mIsRtlContext;    int mFlags;    androidx.core.text.TextDirectionHeuristicCompat mDefaultTextDirectionHeuristicCompat;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.text.BidiFormatter$Builder {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.BidiFormatter$DirectionalityEstimator {
    java.lang.CharSequence text;    boolean isHtml;    int length;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.HtmlCompat {
    int TO_HTML_PARAGRAPH_LINES_CONSECUTIVE;    int TO_HTML_PARAGRAPH_LINES_INDIVIDUAL;    int FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH;    int FROM_HTML_SEPARATOR_LINE_BREAK_HEADING;    int FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM;    int FROM_HTML_SEPARATOR_LINE_BREAK_LIST;    int FROM_HTML_SEPARATOR_LINE_BREAK_DIV;    int FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE;    int FROM_HTML_OPTION_USE_CSS_COLORS;    int FROM_HTML_MODE_LEGACY;    int FROM_HTML_MODE_COMPACT;    android.text.Spanned fromHtml(java.lang.String,int);
    android.text.Spanned fromHtml(java.lang.String,int,android.text.Html$ImageGetter,android.text.Html$TagHandler);
    java.lang.String toHtml(android.text.Spanned,int);
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.ICUCompat {
    java.lang.String TAG;    java.lang.reflect.Method sGetScriptMethod;    java.lang.reflect.Method sAddLikelySubtagsMethod;    java.lang.String maximizeAndGetScript(java.util.Locale);
    java.lang.String getScript(java.lang.String);
    java.lang.String addLikelySubtags(java.util.Locale);
    <init>();
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.PrecomputedTextCompat {
    char LINE_FEED;    java.lang.Object sLock;    java.util.concurrent.Executor sExecutor;    android.text.Spannable mText;    androidx.core.text.PrecomputedTextCompat$Params mParams;    int[] mParagraphEnds;    android.text.PrecomputedText mWrapped;    androidx.core.text.PrecomputedTextCompat create(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params);
    <init>(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params,int[]);
    <init>(android.text.PrecomputedText,androidx.core.text.PrecomputedTextCompat$Params);
    android.text.PrecomputedText getPrecomputedText();
    androidx.core.text.PrecomputedTextCompat$Params getParams();
    int getParagraphCount();
    int getParagraphStart(int);
    int getParagraphEnd(int);
    java.util.concurrent.Future getTextFuture(java.lang.CharSequence,androidx.core.text.PrecomputedTextCompat$Params,java.util.concurrent.Executor);
    void setSpan(java.lang.Object,int,int,int);
    void removeSpan(java.lang.Object);
    java.lang.Object[] getSpans(int,int,java.lang.Class);
    int getSpanStart(java.lang.Object);
    int getSpanEnd(java.lang.Object);
    int getSpanFlags(java.lang.Object);
    int nextSpanTransition(int,int,java.lang.Class);
    int length();
    char charAt(int);
    java.lang.CharSequence subSequence(int,int);
    java.lang.String toString();
    void <clinit>();
}

-keep class androidx.core.text.PrecomputedTextCompat$Params

-keep class androidx.core.text.PrecomputedTextCompat$Params

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.PrecomputedTextCompat$Params {
    android.text.TextPaint mPaint;    android.text.TextDirectionHeuristic mTextDir;    int mBreakStrategy;    int mHyphenationFrequency;    android.text.PrecomputedText$Params mWrapped;    <init>(android.text.TextPaint,android.text.TextDirectionHeuristic,int,int);
    <init>(android.text.PrecomputedText$Params);
    android.text.TextPaint getTextPaint();
    android.text.TextDirectionHeuristic getTextDirection();
    int getBreakStrategy();
    int getHyphenationFrequency();
    boolean equalsWithoutTextDirection(androidx.core.text.PrecomputedTextCompat$Params);
    boolean equals(java.lang.Object);
    int hashCode();
    java.lang.String toString();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.PrecomputedTextCompat$Params$Builder {
    android.text.TextPaint mPaint;    android.text.TextDirectionHeuristic mTextDir;    int mBreakStrategy;    int mHyphenationFrequency;    <init>(android.text.TextPaint);
    androidx.core.text.PrecomputedTextCompat$Params$Builder setBreakStrategy(int);
    androidx.core.text.PrecomputedTextCompat$Params$Builder setHyphenationFrequency(int);
    androidx.core.text.PrecomputedTextCompat$Params$Builder setTextDirection(android.text.TextDirectionHeuristic);
    androidx.core.text.PrecomputedTextCompat$Params build();
}

-keep class androidx.core.text.PrecomputedTextCompat$Params$Builder

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.PrecomputedTextCompat$PrecomputedTextFutureTask {
    <init>(androidx.core.text.PrecomputedTextCompat$Params,java.lang.CharSequence);
}

-keep class androidx.core.text.PrecomputedTextCompat$Params

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.PrecomputedTextCompat$PrecomputedTextFutureTask$PrecomputedTextCallback {
    androidx.core.text.PrecomputedTextCompat$Params mParams;    java.lang.CharSequence mText;    <init>(androidx.core.text.PrecomputedTextCompat$Params,java.lang.CharSequence);
    androidx.core.text.PrecomputedTextCompat call();
    java.lang.Object call();
}

-keep class androidx.core.text.PrecomputedTextCompat$Params

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.TextDirectionHeuristicCompat {
    boolean isRtl(char[],int,int);
    boolean isRtl(java.lang.CharSequence,int,int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.TextDirectionHeuristicsCompat {
    androidx.core.text.TextDirectionHeuristicCompat LTR;    androidx.core.text.TextDirectionHeuristicCompat RTL;    androidx.core.text.TextDirectionHeuristicCompat FIRSTSTRONG_LTR;    androidx.core.text.TextDirectionHeuristicCompat FIRSTSTRONG_RTL;    androidx.core.text.TextDirectionHeuristicCompat ANYRTL_LTR;    androidx.core.text.TextDirectionHeuristicCompat LOCALE;    int STATE_TRUE;    int STATE_FALSE;    int STATE_UNKNOWN;    int isRtlText(int);
    int isRtlTextOrFormat(int);
    <init>();
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.TextDirectionHeuristicsCompat$AnyStrong {
    boolean mLookForRtl;    androidx.core.text.TextDirectionHeuristicsCompat$AnyStrong INSTANCE_RTL;    int checkRtl(java.lang.CharSequence,int,int);
    <init>(boolean);
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.TextDirectionHeuristicsCompat$FirstStrong {
    androidx.core.text.TextDirectionHeuristicsCompat$FirstStrong INSTANCE;    int checkRtl(java.lang.CharSequence,int,int);
    <init>();
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm {
    int checkRtl(java.lang.CharSequence,int,int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl {
    androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm mAlgorithm;    <init>(androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm);
    boolean defaultIsRtl();
    boolean isRtl(char[],int,int);
    boolean isRtl(java.lang.CharSequence,int,int);
    boolean doCheck(java.lang.CharSequence,int,int);
}

-keep class androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicInternal {
    boolean mDefaultIsRtl;    <init>(androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm,boolean);
    boolean defaultIsRtl();
}

-keep class androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm

-keepclassmembers,allowobfuscation class androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicLocale {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicLocale {
    androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicLocale INSTANCE;    boolean defaultIsRtl();
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.TextUtilsCompat {
    java.util.Locale ROOT;    java.lang.String ARAB_SCRIPT_SUBTAG;    java.lang.String HEBR_SCRIPT_SUBTAG;    java.lang.String htmlEncode(java.lang.String);
    int getLayoutDirectionFromLocale(java.util.Locale);
    int getLayoutDirectionFromFirstChar(java.util.Locale);
    <init>();
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.util.LinkifyCompat {
    java.lang.String[] EMPTY_STRING;    java.util.Comparator COMPARATOR;    boolean addLinks(android.text.Spannable,int);
    boolean addLinks(android.widget.TextView,int);
    void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String);
    void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter);
    void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter);
    boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String);
    boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter);
    boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter);
    boolean shouldAddLinksFallbackToFramework();
    void addLinkMovementMethod(android.widget.TextView);
    java.lang.String makeUrl(java.lang.String,java.lang.String[],java.util.regex.Matcher,android.text.util.Linkify$TransformFilter);
    void gatherLinks(java.util.ArrayList,android.text.Spannable,java.util.regex.Pattern,java.lang.String[],android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter);
    void applyLink(java.lang.String,int,int,android.text.Spannable);
    void gatherMapLinks(java.util.ArrayList,android.text.Spannable);
    java.lang.String findAddress(java.lang.String);
    void pruneOverlaps(java.util.ArrayList,android.text.Spannable);
    <init>();
    void <clinit>();
}

-keepclassmembers,allowobfuscation class androidx.core.text.util.LinkifyCompat$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.util.LinkifyCompat$1 {
    int compare(androidx.core.text.util.LinkifyCompat$LinkSpec,androidx.core.text.util.LinkifyCompat$LinkSpec);
    int compare(java.lang.Object,java.lang.Object);
}

-keep class androidx.core.text.util.LinkifyCompat$LinkSpec

-keep class androidx.core.text.util.LinkifyCompat$LinkSpec

-keepclassmembers,allowobfuscation class androidx.core.text.util.LinkifyCompat$LinkSpec {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.text.util.LinkifyCompat$LinkSpec {
    android.text.style.URLSpan frameworkAddedSpan;    java.lang.String url;    int start;    int end;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.util.AtomicFile {
    java.io.File mBaseName;    java.io.File mNewName;    java.io.File mLegacyBackupName;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.util.LogWriter {
    java.lang.String mTag;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.util.ObjectsCompat {
    <init>();
    boolean equals(java.lang.Object,java.lang.Object);
    int hashCode(java.lang.Object);
    int hash(java.lang.Object[]);
    java.lang.String toString(java.lang.Object,java.lang.String);
}

-keep class androidx.core.util.Pair

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.util.Pair {
    java.lang.Object first;    java.lang.Object second;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.util.PatternsCompat {
    java.lang.String IANA_TOP_LEVEL_DOMAINS;    java.util.regex.Pattern IP_ADDRESS;    java.lang.String UCS_CHAR;    java.lang.String LABEL_CHAR;    java.lang.String TLD_CHAR;    java.lang.String IRI_LABEL;    java.lang.String PUNYCODE_TLD;    java.lang.String TLD;    java.lang.String HOST_NAME;    java.util.regex.Pattern DOMAIN_NAME;    java.lang.String PROTOCOL;    java.lang.String WORD_BOUNDARY;    java.lang.String USER_INFO;    java.lang.String PORT_NUMBER;    java.lang.String PATH_AND_QUERY;    java.util.regex.Pattern WEB_URL;    java.lang.String STRICT_TLD;    java.lang.String STRICT_HOST_NAME;    java.util.regex.Pattern STRICT_DOMAIN_NAME;    java.lang.String RELAXED_DOMAIN_NAME;    java.lang.String WEB_URL_WITHOUT_PROTOCOL;    java.lang.String WEB_URL_WITH_PROTOCOL;    java.util.regex.Pattern AUTOLINK_WEB_URL;    java.lang.String EMAIL_CHAR;    java.lang.String EMAIL_ADDRESS_LOCAL_PART;    java.lang.String EMAIL_ADDRESS_DOMAIN;    java.util.regex.Pattern AUTOLINK_EMAIL_ADDRESS;    java.util.regex.Pattern EMAIL_ADDRESS;    <init>();
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.util.Pools$SimplePool {
    java.lang.Object[] mPool;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.util.Pools$SynchronizedPool {
    java.lang.Object mLock;}

-keepclassmembers,allowobfuscation class androidx.core.view.AccessibilityDelegateCompat {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.AccessibilityDelegateCompat {
    android.view.View$AccessibilityDelegate DEFAULT_DELEGATE;    android.view.View$AccessibilityDelegate mOriginalDelegate;    android.view.View$AccessibilityDelegate mBridge;    <init>(android.view.View$AccessibilityDelegate);
    android.view.View$AccessibilityDelegate getBridge();
    void sendAccessibilityEvent(android.view.View,int);
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent);
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent);
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent);
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent);
    void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat);
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent);
    androidx.core.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View);
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle);
    boolean performClickableSpanAction(int,android.view.View);
    boolean isSpanStillValid(android.text.style.ClickableSpan,android.view.View);
    java.util.List getActionList(android.view.View);
    void <clinit>();
}

-keep class androidx.core.view.accessibility.AccessibilityNodeInfoCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.AccessibilityDelegateCompat$AccessibilityDelegateAdapter {
    androidx.core.view.AccessibilityDelegateCompat mCompat;    <init>(androidx.core.view.AccessibilityDelegateCompat);
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent);
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent);
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo);
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent);
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent);
    void sendAccessibilityEvent(android.view.View,int);
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent);
    android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View);
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle);
}

-keep class androidx.core.view.AccessibilityDelegateCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ActionProvider {
    java.lang.String TAG;    android.content.Context mContext;    androidx.core.view.ActionProvider$SubUiVisibilityListener mSubUiVisibilityListener;    androidx.core.view.ActionProvider$VisibilityListener mVisibilityListener;    android.content.Context getContext();
    android.view.View onCreateActionView();
    android.view.View onCreateActionView(android.view.MenuItem);
    boolean overridesItemVisibility();
    boolean isVisible();
    void refreshVisibility();
    boolean onPerformDefaultAction();
    boolean hasSubMenu();
    void onPrepareSubMenu(android.view.SubMenu);
    void subUiVisibilityChanged(boolean);
    void setSubUiVisibilityListener(androidx.core.view.ActionProvider$SubUiVisibilityListener);
    void setVisibilityListener(androidx.core.view.ActionProvider$VisibilityListener);
    void reset();
}

-keep class androidx.core.view.ActionProvider$SubUiVisibilityListener

-keep class androidx.core.view.ActionProvider$SubUiVisibilityListener

-keep class androidx.core.view.ActionProvider$VisibilityListener

-keep class androidx.core.view.ContentInfoCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ContentInfoCompat {
    int SOURCE_APP;    int SOURCE_CLIPBOARD;    int SOURCE_INPUT_METHOD;    int SOURCE_DRAG_AND_DROP;    int FLAG_CONVERT_TO_PLAIN_TEXT;    android.content.ClipData mClip;    int mSource;    int mFlags;    android.net.Uri mLinkUri;    android.os.Bundle mExtras;    java.lang.String sourceToString(int);
    java.lang.String flagsToString(int);
    <init>(androidx.core.view.ContentInfoCompat$Builder);
    java.lang.String toString();
    android.content.ClipData getClip();
    int getSource();
    int getFlags();
    android.net.Uri getLinkUri();
    android.os.Bundle getExtras();
    android.util.Pair partition(androidx.core.util.Predicate);
    android.content.ClipData buildClipData(android.content.ClipDescription,java.util.List);
}

-keep class androidx.core.view.ContentInfoCompat$Builder

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ContentInfoCompat$Builder {
    android.content.ClipData mClip;    int mSource;    int mFlags;    android.net.Uri mLinkUri;    android.os.Bundle mExtras;    <init>(androidx.core.view.ContentInfoCompat);
    <init>(android.content.ClipData,int);
    androidx.core.view.ContentInfoCompat$Builder setClip(android.content.ClipData);
    androidx.core.view.ContentInfoCompat$Builder setSource(int);
    androidx.core.view.ContentInfoCompat$Builder setFlags(int);
    androidx.core.view.ContentInfoCompat$Builder setLinkUri(android.net.Uri);
    androidx.core.view.ContentInfoCompat$Builder setExtras(android.os.Bundle);
    androidx.core.view.ContentInfoCompat build();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.DisplayCompat {
    int DISPLAY_SIZE_4K_WIDTH;    int DISPLAY_SIZE_4K_HEIGHT;    <init>();
    androidx.core.view.DisplayCompat$ModeCompat getMode(android.content.Context,android.view.Display);
    android.graphics.Point getDisplaySize(android.content.Context,android.view.Display);
    androidx.core.view.DisplayCompat$ModeCompat[] getSupportedModes(android.content.Context,android.view.Display);
    android.graphics.Point parseDisplaySize(java.lang.String);
    java.lang.String getSystemProperty(java.lang.String);
    boolean isTv(android.content.Context);
    android.graphics.Point parsePhysicalDisplaySizeFromSystemProperties(java.lang.String,android.view.Display);
    android.graphics.Point getCurrentDisplaySizeFromWorkarounds(android.content.Context,android.view.Display);
    boolean isSonyBravia4kTv(android.content.Context);
    boolean isCurrentModeTheLargestMode(android.view.Display);
}

-keep class androidx.core.view.DisplayCompat$ModeCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.DisplayCompat$Api17Impl {
    <init>();
    void getRealSize(android.view.Display,android.graphics.Point);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.DisplayCompat$Api23Impl {
    <init>();
    androidx.core.view.DisplayCompat$ModeCompat getMode(android.content.Context,android.view.Display);
    androidx.core.view.DisplayCompat$ModeCompat[] getSupportedModes(android.content.Context,android.view.Display);
    boolean isCurrentModeTheLargestMode(android.view.Display);
    boolean physicalSizeEquals(android.view.Display$Mode,android.graphics.Point);
    boolean physicalSizeEquals(android.view.Display$Mode,android.view.Display$Mode);
}

-keep class androidx.core.view.DisplayCompat$ModeCompat

-keep class androidx.core.view.DisplayCompat$ModeCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.DisplayCompat$ModeCompat {
    android.view.Display$Mode mMode;    android.graphics.Point mPhysicalSize;    boolean mIsNative;    <init>(android.graphics.Point);
    <init>(android.view.Display$Mode,boolean);
    <init>(android.view.Display$Mode,android.graphics.Point);
    int getPhysicalWidth();
    int getPhysicalHeight();
    boolean isNative();
    android.view.Display$Mode toMode();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.DisplayCutoutCompat {
    java.lang.Object mDisplayCutout;    <init>(android.graphics.Rect,java.util.List);
    <init>(androidx.core.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,androidx.core.graphics.Insets);
    android.view.DisplayCutout constructDisplayCutout(androidx.core.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,androidx.core.graphics.Insets);
    <init>(java.lang.Object);
    int getSafeInsetTop();
    int getSafeInsetBottom();
    int getSafeInsetLeft();
    int getSafeInsetRight();
    java.util.List getBoundingRects();
    androidx.core.graphics.Insets getWaterfallInsets();
    boolean equals(java.lang.Object);
    int hashCode();
    java.lang.String toString();
    androidx.core.view.DisplayCutoutCompat wrap(java.lang.Object);
    android.view.DisplayCutout unwrap();
}

-keep class androidx.core.graphics.Insets

-keep class androidx.core.view.DragAndDropPermissionsCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.DragAndDropPermissionsCompat {
    java.lang.Object mDragAndDropPermissions;    <init>(java.lang.Object);
    androidx.core.view.DragAndDropPermissionsCompat request(android.app.Activity,android.view.DragEvent);
    void release();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.DragStartHelper {
    android.view.View mView;    androidx.core.view.DragStartHelper$OnDragStartListener mListener;    android.view.View$OnLongClickListener mLongClickListener;    android.view.View$OnTouchListener mTouchListener;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.DragStartHelper$1 {
    androidx.core.view.DragStartHelper this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.DragStartHelper$2 {
    androidx.core.view.DragStartHelper this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.GestureDetectorCompat {
    androidx.core.view.GestureDetectorCompat$GestureDetectorCompatImpl mImpl;    <init>(android.content.Context,android.view.GestureDetector$OnGestureListener);
    <init>(android.content.Context,android.view.GestureDetector$OnGestureListener,android.os.Handler);
    boolean isLongpressEnabled();
    boolean onTouchEvent(android.view.MotionEvent);
    void setIsLongpressEnabled(boolean);
    void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.GestureDetectorCompat$GestureDetectorCompatImpl {
    boolean isLongpressEnabled();
    boolean onTouchEvent(android.view.MotionEvent);
    void setIsLongpressEnabled(boolean);
    void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.GestureDetectorCompat$GestureDetectorCompatImplBase {
    int mTouchSlopSquare;    int mDoubleTapSlopSquare;    int mMinimumFlingVelocity;    int mMaximumFlingVelocity;    int LONGPRESS_TIMEOUT;    int TAP_TIMEOUT;    int DOUBLE_TAP_TIMEOUT;    int SHOW_PRESS;    int LONG_PRESS;    int TAP;    android.os.Handler mHandler;    android.view.GestureDetector$OnGestureListener mListener;    android.view.GestureDetector$OnDoubleTapListener mDoubleTapListener;    boolean mStillDown;    boolean mDeferConfirmSingleTap;    boolean mInLongPress;    boolean mAlwaysInTapRegion;    boolean mAlwaysInBiggerTapRegion;    android.view.MotionEvent mCurrentDownEvent;    android.view.MotionEvent mPreviousUpEvent;    boolean mIsDoubleTapping;    float mLastFocusX;    float mLastFocusY;    float mDownFocusX;    float mDownFocusY;    boolean mIsLongpressEnabled;    android.view.VelocityTracker mVelocityTracker;    <init>(android.content.Context,android.view.GestureDetector$OnGestureListener,android.os.Handler);
    void init(android.content.Context);
    void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener);
    void setIsLongpressEnabled(boolean);
    boolean isLongpressEnabled();
    boolean onTouchEvent(android.view.MotionEvent);
    void cancel();
    void cancelTaps();
    boolean isConsideredDoubleTap(android.view.MotionEvent,android.view.MotionEvent,android.view.MotionEvent);
    void dispatchLongPress();
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.GestureDetectorCompat$GestureDetectorCompatImplBase$GestureHandler {
    androidx.core.view.GestureDetectorCompat$GestureDetectorCompatImplBase this$0;    <init>(androidx.core.view.GestureDetectorCompat$GestureDetectorCompatImplBase);
    <init>(androidx.core.view.GestureDetectorCompat$GestureDetectorCompatImplBase,android.os.Handler);
    void handleMessage(android.os.Message);
}

-keep class androidx.core.view.GestureDetectorCompat$GestureDetectorCompatImplBase

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.GestureDetectorCompat$GestureDetectorCompatImplJellybeanMr2 {
    android.view.GestureDetector mDetector;    <init>(android.content.Context,android.view.GestureDetector$OnGestureListener,android.os.Handler);
    boolean isLongpressEnabled();
    boolean onTouchEvent(android.view.MotionEvent);
    void setIsLongpressEnabled(boolean);
    void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.GravityCompat {
    int RELATIVE_LAYOUT_DIRECTION;    int START;    int END;    int RELATIVE_HORIZONTAL_GRAVITY_MASK;    void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int);
    void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect,int);
    void applyDisplay(int,android.graphics.Rect,android.graphics.Rect,int);
    int getAbsoluteGravity(int,int);
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.InputDeviceCompat {
    int SOURCE_CLASS_MASK;    int SOURCE_CLASS_NONE;    int SOURCE_CLASS_BUTTON;    int SOURCE_CLASS_POINTER;    int SOURCE_CLASS_TRACKBALL;    int SOURCE_CLASS_POSITION;    int SOURCE_CLASS_JOYSTICK;    int SOURCE_UNKNOWN;    int SOURCE_KEYBOARD;    int SOURCE_DPAD;    int SOURCE_GAMEPAD;    int SOURCE_TOUCHSCREEN;    int SOURCE_MOUSE;    int SOURCE_STYLUS;    int SOURCE_TRACKBALL;    int SOURCE_TOUCHPAD;    int SOURCE_TOUCH_NAVIGATION;    int SOURCE_ROTARY_ENCODER;    int SOURCE_JOYSTICK;    int SOURCE_HDMI;    int SOURCE_ANY;    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.LayoutInflaterCompat {
    java.lang.String TAG;    java.lang.reflect.Field sLayoutInflaterFactory2Field;    boolean sCheckedField;    void forceSetFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2);
    <init>();
    void setFactory(android.view.LayoutInflater,androidx.core.view.LayoutInflaterFactory);
    void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2);
    androidx.core.view.LayoutInflaterFactory getFactory(android.view.LayoutInflater);
}

-keep class androidx.core.view.LayoutInflaterFactory

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.LayoutInflaterCompat$Factory2Wrapper {
    androidx.core.view.LayoutInflaterFactory mDelegateFactory;    <init>(androidx.core.view.LayoutInflaterFactory);
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet);
    android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet);
    java.lang.String toString();
}

-keep class androidx.core.view.LayoutInflaterFactory

-keep class androidx.core.view.LayoutInflaterFactory

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.MarginLayoutParamsCompat {
    int getMarginStart(android.view.ViewGroup$MarginLayoutParams);
    int getMarginEnd(android.view.ViewGroup$MarginLayoutParams);
    void setMarginStart(android.view.ViewGroup$MarginLayoutParams,int);
    void setMarginEnd(android.view.ViewGroup$MarginLayoutParams,int);
    boolean isMarginRelative(android.view.ViewGroup$MarginLayoutParams);
    int getLayoutDirection(android.view.ViewGroup$MarginLayoutParams);
    void setLayoutDirection(android.view.ViewGroup$MarginLayoutParams,int);
    void resolveLayoutDirection(android.view.ViewGroup$MarginLayoutParams,int);
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.MenuCompat {
    void setShowAsAction(android.view.MenuItem,int);
    void setGroupDividerEnabled(android.view.Menu,boolean);
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.MenuItemCompat {
    java.lang.String TAG;    int SHOW_AS_ACTION_NEVER;    int SHOW_AS_ACTION_IF_ROOM;    int SHOW_AS_ACTION_ALWAYS;    int SHOW_AS_ACTION_WITH_TEXT;    int SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW;    void setShowAsAction(android.view.MenuItem,int);
    android.view.MenuItem setActionView(android.view.MenuItem,android.view.View);
    android.view.MenuItem setActionView(android.view.MenuItem,int);
    android.view.View getActionView(android.view.MenuItem);
    android.view.MenuItem setActionProvider(android.view.MenuItem,androidx.core.view.ActionProvider);
    androidx.core.view.ActionProvider getActionProvider(android.view.MenuItem);
    boolean expandActionView(android.view.MenuItem);
    boolean collapseActionView(android.view.MenuItem);
    boolean isActionViewExpanded(android.view.MenuItem);
    android.view.MenuItem setOnActionExpandListener(android.view.MenuItem,androidx.core.view.MenuItemCompat$OnActionExpandListener);
    void setContentDescription(android.view.MenuItem,java.lang.CharSequence);
    java.lang.CharSequence getContentDescription(android.view.MenuItem);
    void setTooltipText(android.view.MenuItem,java.lang.CharSequence);
    java.lang.CharSequence getTooltipText(android.view.MenuItem);
    void setShortcut(android.view.MenuItem,char,char,int,int);
    void setNumericShortcut(android.view.MenuItem,char,int);
    int getNumericModifiers(android.view.MenuItem);
    void setAlphabeticShortcut(android.view.MenuItem,char,int);
    int getAlphabeticModifiers(android.view.MenuItem);
    void setIconTintList(android.view.MenuItem,android.content.res.ColorStateList);
    android.content.res.ColorStateList getIconTintList(android.view.MenuItem);
    void setIconTintMode(android.view.MenuItem,android.graphics.PorterDuff$Mode);
    android.graphics.PorterDuff$Mode getIconTintMode(android.view.MenuItem);
    <init>();
}

-keep class androidx.core.view.ActionProvider

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.MenuItemCompat$1 {
    androidx.core.view.MenuItemCompat$OnActionExpandListener val$listener;    <init>(androidx.core.view.MenuItemCompat$OnActionExpandListener);
    boolean onMenuItemActionExpand(android.view.MenuItem);
    boolean onMenuItemActionCollapse(android.view.MenuItem);
}

-keep class androidx.core.view.MenuItemCompat$OnActionExpandListener

-keep class androidx.core.view.MenuItemCompat$OnActionExpandListener

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.MenuItemCompat$OnActionExpandListener {
    boolean onMenuItemActionExpand(android.view.MenuItem);
    boolean onMenuItemActionCollapse(android.view.MenuItem);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.MotionEventCompat {
    int ACTION_MASK;    int ACTION_POINTER_DOWN;    int ACTION_POINTER_UP;    int ACTION_HOVER_MOVE;    int ACTION_SCROLL;    int ACTION_POINTER_INDEX_MASK;    int ACTION_POINTER_INDEX_SHIFT;    int ACTION_HOVER_ENTER;    int ACTION_HOVER_EXIT;    int AXIS_X;    int AXIS_Y;    int AXIS_PRESSURE;    int AXIS_SIZE;    int AXIS_TOUCH_MAJOR;    int AXIS_TOUCH_MINOR;    int AXIS_TOOL_MAJOR;    int AXIS_TOOL_MINOR;    int AXIS_ORIENTATION;    int AXIS_VSCROLL;    int AXIS_HSCROLL;    int AXIS_Z;    int AXIS_RX;    int AXIS_RY;    int AXIS_RZ;    int AXIS_HAT_X;    int AXIS_HAT_Y;    int AXIS_LTRIGGER;    int AXIS_RTRIGGER;    int AXIS_THROTTLE;    int AXIS_RUDDER;    int AXIS_WHEEL;    int AXIS_GAS;    int AXIS_BRAKE;    int AXIS_DISTANCE;    int AXIS_TILT;    int AXIS_SCROLL;    int AXIS_RELATIVE_X;    int AXIS_RELATIVE_Y;    int AXIS_GENERIC_1;    int AXIS_GENERIC_2;    int AXIS_GENERIC_3;    int AXIS_GENERIC_4;    int AXIS_GENERIC_5;    int AXIS_GENERIC_6;    int AXIS_GENERIC_7;    int AXIS_GENERIC_8;    int AXIS_GENERIC_9;    int AXIS_GENERIC_10;    int AXIS_GENERIC_11;    int AXIS_GENERIC_12;    int AXIS_GENERIC_13;    int AXIS_GENERIC_14;    int AXIS_GENERIC_15;    int AXIS_GENERIC_16;    int BUTTON_PRIMARY;    int getActionMasked(android.view.MotionEvent);
    int getActionIndex(android.view.MotionEvent);
    int findPointerIndex(android.view.MotionEvent,int);
    int getPointerId(android.view.MotionEvent,int);
    float getX(android.view.MotionEvent,int);
    float getY(android.view.MotionEvent,int);
    int getPointerCount(android.view.MotionEvent);
    int getSource(android.view.MotionEvent);
    boolean isFromSource(android.view.MotionEvent,int);
    float getAxisValue(android.view.MotionEvent,int);
    float getAxisValue(android.view.MotionEvent,int,int);
    int getButtonState(android.view.MotionEvent);
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.NestedScrollingChildHelper {
    android.view.View mView;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.OneShotPreDrawListener {
    android.view.View mView;    java.lang.Runnable mRunnable;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.PointerIconCompat {
    int TYPE_NULL;    int TYPE_ARROW;    int TYPE_CONTEXT_MENU;    int TYPE_HAND;    int TYPE_HELP;    int TYPE_WAIT;    int TYPE_CELL;    int TYPE_CROSSHAIR;    int TYPE_TEXT;    int TYPE_VERTICAL_TEXT;    int TYPE_ALIAS;    int TYPE_COPY;    int TYPE_NO_DROP;    int TYPE_ALL_SCROLL;    int TYPE_HORIZONTAL_DOUBLE_ARROW;    int TYPE_VERTICAL_DOUBLE_ARROW;    int TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW;    int TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW;    int TYPE_ZOOM_IN;    int TYPE_ZOOM_OUT;    int TYPE_GRAB;    int TYPE_GRABBING;    int TYPE_DEFAULT;    java.lang.Object mPointerIcon;    <init>(java.lang.Object);
    java.lang.Object getPointerIcon();
    androidx.core.view.PointerIconCompat getSystemIcon(android.content.Context,int);
    androidx.core.view.PointerIconCompat create(android.graphics.Bitmap,float,float);
    androidx.core.view.PointerIconCompat load(android.content.res.Resources,int);
}

-keep class androidx.core.view.PointerIconCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ScaleGestureDetectorCompat {
    <init>();
    void setQuickScaleEnabled(java.lang.Object,boolean);
    void setQuickScaleEnabled(android.view.ScaleGestureDetector,boolean);
    boolean isQuickScaleEnabled(java.lang.Object);
    boolean isQuickScaleEnabled(android.view.ScaleGestureDetector);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.VelocityTrackerCompat {
    float getXVelocity(android.view.VelocityTracker,int);
    float getYVelocity(android.view.VelocityTracker,int);
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewCompat {
    java.lang.String TAG;    int OVER_SCROLL_ALWAYS;    int OVER_SCROLL_IF_CONTENT_SCROLLS;    int OVER_SCROLL_NEVER;    int IMPORTANT_FOR_ACCESSIBILITY_AUTO;    int IMPORTANT_FOR_ACCESSIBILITY_YES;    int IMPORTANT_FOR_ACCESSIBILITY_NO;    int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS;    int ACCESSIBILITY_LIVE_REGION_NONE;    int ACCESSIBILITY_LIVE_REGION_POLITE;    int ACCESSIBILITY_LIVE_REGION_ASSERTIVE;    int LAYER_TYPE_NONE;    int LAYER_TYPE_SOFTWARE;    int LAYER_TYPE_HARDWARE;    int LAYOUT_DIRECTION_LTR;    int LAYOUT_DIRECTION_RTL;    int LAYOUT_DIRECTION_INHERIT;    int LAYOUT_DIRECTION_LOCALE;    int MEASURED_SIZE_MASK;    int MEASURED_STATE_MASK;    int MEASURED_HEIGHT_STATE_SHIFT;    int MEASURED_STATE_TOO_SMALL;    int SCROLL_AXIS_NONE;    int SCROLL_AXIS_HORIZONTAL;    int SCROLL_AXIS_VERTICAL;    int TYPE_TOUCH;    int TYPE_NON_TOUCH;    int SCROLL_INDICATOR_TOP;    int SCROLL_INDICATOR_BOTTOM;    int SCROLL_INDICATOR_LEFT;    int SCROLL_INDICATOR_RIGHT;    int SCROLL_INDICATOR_START;    int SCROLL_INDICATOR_END;    java.util.concurrent.atomic.AtomicInteger sNextGeneratedId;    java.lang.reflect.Field sMinWidthField;    boolean sMinWidthFieldFetched;    java.lang.reflect.Field sMinHeightField;    boolean sMinHeightFieldFetched;    java.lang.reflect.Method sDispatchStartTemporaryDetach;    java.lang.reflect.Method sDispatchFinishTemporaryDetach;    boolean sTempDetachBound;    java.util.WeakHashMap sTransitionNameMap;    java.util.WeakHashMap sViewPropertyAnimatorMap;    java.lang.reflect.Method sChildrenDrawingOrderMethod;    java.lang.reflect.Field sAccessibilityDelegateField;    boolean sAccessibilityDelegateCheckFailed;    java.lang.ThreadLocal sThreadLocalRect;    int[] ACCESSIBILITY_ACTIONS_RESOURCE_IDS;    androidx.core.view.OnReceiveContentViewBehavior NO_OP_ON_RECEIVE_CONTENT_VIEW_BEHAVIOR;    androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager sAccessibilityPaneVisibilityManager;    android.graphics.Rect getEmptyTempRect();
    void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int);
    boolean canScrollHorizontally(android.view.View,int);
    boolean canScrollVertically(android.view.View,int);
    int getOverScrollMode(android.view.View);
    void setOverScrollMode(android.view.View,int);
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent);
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent);
    void onInitializeAccessibilityNodeInfo(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat);
    void setAccessibilityDelegate(android.view.View,androidx.core.view.AccessibilityDelegateCompat);
    void setAutofillHints(android.view.View,java.lang.String[]);
    int getImportantForAutofill(android.view.View);
    void setImportantForAutofill(android.view.View,int);
    boolean isImportantForAutofill(android.view.View);
    boolean hasAccessibilityDelegate(android.view.View);
    androidx.core.view.AccessibilityDelegateCompat getAccessibilityDelegate(android.view.View);
    androidx.core.view.AccessibilityDelegateCompat getOrCreateAccessibilityDelegateCompat(android.view.View);
    android.view.View$AccessibilityDelegate getAccessibilityDelegateInternal(android.view.View);
    android.view.View$AccessibilityDelegate getAccessibilityDelegateThroughReflection(android.view.View);
    boolean hasTransientState(android.view.View);
    void setHasTransientState(android.view.View,boolean);
    void postInvalidateOnAnimation(android.view.View);
    void postInvalidateOnAnimation(android.view.View,int,int,int,int);
    void postOnAnimation(android.view.View,java.lang.Runnable);
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long);
    int getImportantForAccessibility(android.view.View);
    void setImportantForAccessibility(android.view.View,int);
    boolean isImportantForAccessibility(android.view.View);
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle);
    int addAccessibilityAction(android.view.View,java.lang.CharSequence,androidx.core.view.accessibility.AccessibilityViewCommand);
    int getAvailableActionIdFromResources(android.view.View);
    void replaceAccessibilityAction(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat,java.lang.CharSequence,androidx.core.view.accessibility.AccessibilityViewCommand);
    void addAccessibilityAction(android.view.View,androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat);
    void removeAccessibilityAction(android.view.View,int);
    void removeActionWithId(int,android.view.View);
    java.util.List getActionList(android.view.View);
    void setStateDescription(android.view.View,java.lang.CharSequence);
    java.lang.CharSequence getStateDescription(android.view.View);
    void enableAccessibleClickableSpanSupport(android.view.View);
    androidx.core.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View);
    float getAlpha(android.view.View);
    void setLayerType(android.view.View,int,android.graphics.Paint);
    int getLayerType(android.view.View);
    int getLabelFor(android.view.View);
    void setLabelFor(android.view.View,int);
    void setLayerPaint(android.view.View,android.graphics.Paint);
    int getLayoutDirection(android.view.View);
    void setLayoutDirection(android.view.View,int);
    android.view.ViewParent getParentForAccessibility(android.view.View);
    android.view.View requireViewById(android.view.View,int);
    boolean isOpaque(android.view.View);
    int resolveSizeAndState(int,int,int);
    int getMeasuredWidthAndState(android.view.View);
    int getMeasuredHeightAndState(android.view.View);
    int getMeasuredState(android.view.View);
    int combineMeasuredStates(int,int);
    int getAccessibilityLiveRegion(android.view.View);
    void setAccessibilityLiveRegion(android.view.View,int);
    int getPaddingStart(android.view.View);
    int getPaddingEnd(android.view.View);
    void setPaddingRelative(android.view.View,int,int,int,int);
    void bindTempDetach();
    void dispatchStartTemporaryDetach(android.view.View);
    void dispatchFinishTemporaryDetach(android.view.View);
    float getTranslationX(android.view.View);
    float getTranslationY(android.view.View);
    android.graphics.Matrix getMatrix(android.view.View);
    int getMinimumWidth(android.view.View);
    int getMinimumHeight(android.view.View);
    androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View);
    void setTranslationX(android.view.View,float);
    void setTranslationY(android.view.View,float);
    void setAlpha(android.view.View,float);
    void setX(android.view.View,float);
    void setY(android.view.View,float);
    void setRotation(android.view.View,float);
    void setRotationX(android.view.View,float);
    void setRotationY(android.view.View,float);
    void setScaleX(android.view.View,float);
    void setScaleY(android.view.View,float);
    float getPivotX(android.view.View);
    void setPivotX(android.view.View,float);
    float getPivotY(android.view.View);
    void setPivotY(android.view.View,float);
    float getRotation(android.view.View);
    float getRotationX(android.view.View);
    float getRotationY(android.view.View);
    float getScaleX(android.view.View);
    float getScaleY(android.view.View);
    float getX(android.view.View);
    float getY(android.view.View);
    void setElevation(android.view.View,float);
    float getElevation(android.view.View);
    void setTranslationZ(android.view.View,float);
    float getTranslationZ(android.view.View);
    void setTransitionName(android.view.View,java.lang.String);
    java.lang.String getTransitionName(android.view.View);
    int getWindowSystemUiVisibility(android.view.View);
    void requestApplyInsets(android.view.View);
    void setChildrenDrawingOrderEnabled(android.view.ViewGroup,boolean);
    boolean getFitsSystemWindows(android.view.View);
    void setFitsSystemWindows(android.view.View,boolean);
    void jumpDrawablesToCurrentState(android.view.View);
    void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener);
    androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat);
    androidx.core.view.WindowInsetsCompat dispatchApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat);
    void setSystemGestureExclusionRects(android.view.View,java.util.List);
    java.util.List getSystemGestureExclusionRects(android.view.View);
    androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View);
    androidx.core.view.WindowInsetsCompat computeSystemWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat,android.graphics.Rect);
    androidx.core.view.WindowInsetsControllerCompat getWindowInsetsController(android.view.View);
    void setWindowInsetsAnimationCallback(android.view.View,androidx.core.view.WindowInsetsAnimationCompat$Callback);
    void setOnReceiveContentListener(android.view.View,java.lang.String[],androidx.core.view.OnReceiveContentListener);
    java.lang.String[] getOnReceiveContentMimeTypes(android.view.View);
    androidx.core.view.ContentInfoCompat performReceiveContent(android.view.View,androidx.core.view.ContentInfoCompat);
    androidx.core.view.OnReceiveContentViewBehavior getFallback(android.view.View);
    void setSaveFromParentEnabled(android.view.View,boolean);
    void setActivated(android.view.View,boolean);
    boolean hasOverlappingRendering(android.view.View);
    boolean isPaddingRelative(android.view.View);
    void setBackground(android.view.View,android.graphics.drawable.Drawable);
    android.content.res.ColorStateList getBackgroundTintList(android.view.View);
    void setBackgroundTintList(android.view.View,android.content.res.ColorStateList);
    android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View);
    void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode);
    void setNestedScrollingEnabled(android.view.View,boolean);
    boolean isNestedScrollingEnabled(android.view.View);
    boolean startNestedScroll(android.view.View,int);
    void stopNestedScroll(android.view.View);
    boolean hasNestedScrollingParent(android.view.View);
    boolean dispatchNestedScroll(android.view.View,int,int,int,int,int[]);
    boolean dispatchNestedPreScroll(android.view.View,int,int,int[],int[]);
    boolean startNestedScroll(android.view.View,int,int);
    void stopNestedScroll(android.view.View,int);
    boolean hasNestedScrollingParent(android.view.View,int);
    void dispatchNestedScroll(android.view.View,int,int,int,int,int[],int,int[]);
    boolean dispatchNestedScroll(android.view.View,int,int,int,int,int[],int);
    boolean dispatchNestedPreScroll(android.view.View,int,int,int[],int[],int);
    boolean dispatchNestedFling(android.view.View,float,float,boolean);
    boolean dispatchNestedPreFling(android.view.View,float,float);
    boolean isInLayout(android.view.View);
    boolean isLaidOut(android.view.View);
    boolean isLayoutDirectionResolved(android.view.View);
    float getZ(android.view.View);
    void setZ(android.view.View,float);
    void offsetTopAndBottom(android.view.View,int);
    void compatOffsetTopAndBottom(android.view.View,int);
    void offsetLeftAndRight(android.view.View,int);
    void compatOffsetLeftAndRight(android.view.View,int);
    void tickleInvalidationFlag(android.view.View);
    void setClipBounds(android.view.View,android.graphics.Rect);
    android.graphics.Rect getClipBounds(android.view.View);
    boolean isAttachedToWindow(android.view.View);
    boolean hasOnClickListeners(android.view.View);
    void setScrollIndicators(android.view.View,int);
    void setScrollIndicators(android.view.View,int,int);
    int getScrollIndicators(android.view.View);
    void setPointerIcon(android.view.View,androidx.core.view.PointerIconCompat);
    android.view.Display getDisplay(android.view.View);
    void setTooltipText(android.view.View,java.lang.CharSequence);
    boolean startDragAndDrop(android.view.View,android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int);
    void cancelDragAndDrop(android.view.View);
    void updateDragShadow(android.view.View,android.view.View$DragShadowBuilder);
    int getNextClusterForwardId(android.view.View);
    void setNextClusterForwardId(android.view.View,int);
    boolean isKeyboardNavigationCluster(android.view.View);
    void setKeyboardNavigationCluster(android.view.View,boolean);
    boolean isFocusedByDefault(android.view.View);
    void setFocusedByDefault(android.view.View,boolean);
    android.view.View keyboardNavigationClusterSearch(android.view.View,android.view.View,int);
    void addKeyboardNavigationClusters(android.view.View,java.util.Collection,int);
    boolean restoreDefaultFocus(android.view.View);
    boolean hasExplicitFocusable(android.view.View);
    int generateViewId();
    void addOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat);
    void removeOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat);
    boolean dispatchUnhandledKeyEventBeforeHierarchy(android.view.View,android.view.KeyEvent);
    boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent);
    void setScreenReaderFocusable(android.view.View,boolean);
    boolean isScreenReaderFocusable(android.view.View);
    androidx.core.view.ViewCompat$AccessibilityViewProperty screenReaderFocusableProperty();
    void setAccessibilityPaneTitle(android.view.View,java.lang.CharSequence);
    java.lang.CharSequence getAccessibilityPaneTitle(android.view.View);
    androidx.core.view.ViewCompat$AccessibilityViewProperty paneTitleProperty();
    androidx.core.view.ViewCompat$AccessibilityViewProperty stateDescriptionProperty();
    boolean isAccessibilityHeading(android.view.View);
    void setAccessibilityHeading(android.view.View,boolean);
    androidx.core.view.ViewCompat$AccessibilityViewProperty accessibilityHeadingProperty();
    void notifyViewAccessibilityStateChangedIfNeeded(android.view.View,int);
    void setViewImportanceForAccessibilityIfNeeded(android.view.View);
    void <clinit>();
}

-keep class androidx.core.view.accessibility.AccessibilityNodeInfoCompat

-keepclassmembers,allowobfuscation class androidx.core.view.ViewCompat {
    <init>();
}

-keepclassmembers,allowobfuscation class androidx.core.view.ViewCompat$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewCompat$1 {
    androidx.core.view.ContentInfoCompat onReceiveContent(androidx.core.view.ContentInfoCompat);
}

-keep class androidx.core.view.ContentInfoCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewCompat$2 {
    <init>(int,java.lang.Class,int);
    java.lang.Boolean frameworkGet(android.view.View);
    void frameworkSet(android.view.View,java.lang.Boolean);
    boolean shouldUpdate(java.lang.Boolean,java.lang.Boolean);
    void frameworkSet(android.view.View,java.lang.Object);
    java.lang.Object frameworkGet(android.view.View);
    boolean shouldUpdate(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewCompat$3 {
    <init>(int,java.lang.Class,int,int);
    java.lang.CharSequence frameworkGet(android.view.View);
    void frameworkSet(android.view.View,java.lang.CharSequence);
    boolean shouldUpdate(java.lang.CharSequence,java.lang.CharSequence);
    void frameworkSet(android.view.View,java.lang.Object);
    java.lang.Object frameworkGet(android.view.View);
    boolean shouldUpdate(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewCompat$4 {
    <init>(int,java.lang.Class,int,int);
    java.lang.CharSequence frameworkGet(android.view.View);
    void frameworkSet(android.view.View,java.lang.CharSequence);
    boolean shouldUpdate(java.lang.CharSequence,java.lang.CharSequence);
    void frameworkSet(android.view.View,java.lang.Object);
    java.lang.Object frameworkGet(android.view.View);
    boolean shouldUpdate(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewCompat$5 {
    <init>(int,java.lang.Class,int);
    java.lang.Boolean frameworkGet(android.view.View);
    void frameworkSet(android.view.View,java.lang.Boolean);
    boolean shouldUpdate(java.lang.Boolean,java.lang.Boolean);
    void frameworkSet(android.view.View,java.lang.Object);
    java.lang.Object frameworkGet(android.view.View);
    boolean shouldUpdate(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowobfuscation class androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager {
    java.util.WeakHashMap mPanesToVisible;    void onGlobalLayout();
    void onViewAttachedToWindow(android.view.View);
    void onViewDetachedFromWindow(android.view.View);
    void addAccessibilityPane(android.view.View);
    void removeAccessibilityPane(android.view.View);
    void checkPaneVisibility(android.view.View,boolean);
    void registerForLayoutCallback(android.view.View);
    void unregisterForLayoutCallback(android.view.View);
}

-keep class androidx.core.view.ViewCompat$AccessibilityViewProperty

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewCompat$AccessibilityViewProperty {
    int mTagKey;    java.lang.Class mType;    int mFrameworkMinimumSdk;    int mContentChangeType;    <init>(int,java.lang.Class,int);
    <init>(int,java.lang.Class,int,int);
    void set(android.view.View,java.lang.Object);
    java.lang.Object get(android.view.View);
    boolean frameworkAvailable();
    boolean extrasAvailable();
    boolean shouldUpdate(java.lang.Object,java.lang.Object);
    java.lang.Object frameworkGet(android.view.View);
    void frameworkSet(android.view.View,java.lang.Object);
    boolean booleanNullToFalseEquals(java.lang.Boolean,java.lang.Boolean);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewCompat$Api21Impl {
    <init>();
    androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View);
    androidx.core.view.WindowInsetsCompat computeSystemWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat,android.graphics.Rect);
    void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener);
    void callCompatInsetAnimationCallback(android.view.WindowInsets,android.view.View);
}

-keep class androidx.core.view.WindowInsetsCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewCompat$Api21Impl$1 {
    androidx.core.view.WindowInsetsCompat mLastInsets;    android.view.View val$v;    androidx.core.view.OnApplyWindowInsetsListener val$listener;    <init>(android.view.View,androidx.core.view.OnApplyWindowInsetsListener);
    android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets);
}

-keep class androidx.core.view.OnApplyWindowInsetsListener

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewCompat$Api23Impl {
    <init>();
    androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View);
}

-keep class androidx.core.view.WindowInsetsCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewCompat$Api29Impl {
    <init>();
    void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewCompat$Api30Impl {
    <init>();
    androidx.core.view.WindowInsetsControllerCompat getWindowInsetsController(android.view.View);
}

-keep class androidx.core.view.WindowInsetsControllerCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewCompat$CompatImplApi28 {
    <init>();
    void addOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat);
    void removeOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat);
}

-keep class androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewCompat$CompatImplApi28$1 {
    androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat val$listener;    <init>(androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat);
    boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent);
}

-keep class androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat

-keep class androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat {
    boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent);
}

-keepclassmembers,allowobfuscation class androidx.core.view.ViewCompat$UnhandledKeyEventManager {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewCompat$UnhandledKeyEventManager {
    java.util.ArrayList sViewsWithListeners;    java.util.WeakHashMap mViewsContainingListeners;    android.util.SparseArray mCapturedKeys;    java.lang.ref.WeakReference mLastDispatchedPreViewKeyEvent;    android.util.SparseArray getCapturedKeys();
    androidx.core.view.ViewCompat$UnhandledKeyEventManager at(android.view.View);
    boolean dispatch(android.view.View,android.view.KeyEvent);
    android.view.View dispatchInOrder(android.view.View,android.view.KeyEvent);
    boolean preDispatch(android.view.KeyEvent);
    boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent);
    void registerListeningView(android.view.View);
    void unregisterListeningView(android.view.View);
    void recalcViewsWithUnhandled();
    void <clinit>();
}

-keep class androidx.core.view.ViewCompat$UnhandledKeyEventManager

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewConfigurationCompat {
    java.lang.String TAG;    java.lang.reflect.Method sGetScaledScrollFactorMethod;    int getScaledPagingTouchSlop(android.view.ViewConfiguration);
    boolean hasPermanentMenuKey(android.view.ViewConfiguration);
    float getScaledHorizontalScrollFactor(android.view.ViewConfiguration,android.content.Context);
    float getScaledVerticalScrollFactor(android.view.ViewConfiguration,android.content.Context);
    float getLegacyScrollFactor(android.view.ViewConfiguration,android.content.Context);
    int getScaledHoverSlop(android.view.ViewConfiguration);
    boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration,android.content.Context);
    <init>();
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewGroupCompat {
    int LAYOUT_MODE_CLIP_BOUNDS;    int LAYOUT_MODE_OPTICAL_BOUNDS;    <init>();
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent);
    void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean);
    int getLayoutMode(android.view.ViewGroup);
    void setLayoutMode(android.view.ViewGroup,int);
    void setTransitionGroup(android.view.ViewGroup,boolean);
    boolean isTransitionGroup(android.view.ViewGroup);
    int getNestedScrollAxes(android.view.ViewGroup);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewParentCompat {
    java.lang.String TAG;    int[] sTempNestedScrollConsumed;    <init>();
    boolean requestSendAccessibilityEvent(android.view.ViewParent,android.view.View,android.view.accessibility.AccessibilityEvent);
    boolean onStartNestedScroll(android.view.ViewParent,android.view.View,android.view.View,int);
    void onNestedScrollAccepted(android.view.ViewParent,android.view.View,android.view.View,int);
    void onStopNestedScroll(android.view.ViewParent,android.view.View);
    void onNestedScroll(android.view.ViewParent,android.view.View,int,int,int,int);
    void onNestedScroll(android.view.ViewParent,android.view.View,int,int,int,int,int);
    void onNestedPreScroll(android.view.ViewParent,android.view.View,int,int,int[]);
    boolean onStartNestedScroll(android.view.ViewParent,android.view.View,android.view.View,int,int);
    void onNestedScrollAccepted(android.view.ViewParent,android.view.View,android.view.View,int,int);
    void onStopNestedScroll(android.view.ViewParent,android.view.View,int);
    void onNestedScroll(android.view.ViewParent,android.view.View,int,int,int,int,int,int[]);
    void onNestedPreScroll(android.view.ViewParent,android.view.View,int,int,int[],int);
    boolean onNestedFling(android.view.ViewParent,android.view.View,float,float,boolean);
    boolean onNestedPreFling(android.view.ViewParent,android.view.View,float,float);
    void notifySubtreeAccessibilityStateChanged(android.view.ViewParent,android.view.View,android.view.View,int);
    int[] getTempNestedScrollConsumed();
}

-keep class androidx.core.view.ViewPropertyAnimatorCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewPropertyAnimatorCompat {
    java.lang.ref.WeakReference mView;    java.lang.Runnable mStartAction;    java.lang.Runnable mEndAction;    int mOldLayerType;    int LISTENER_TAG_ID;    <init>(android.view.View);
    androidx.core.view.ViewPropertyAnimatorCompat setDuration(long);
    androidx.core.view.ViewPropertyAnimatorCompat alpha(float);
    androidx.core.view.ViewPropertyAnimatorCompat alphaBy(float);
    androidx.core.view.ViewPropertyAnimatorCompat translationX(float);
    androidx.core.view.ViewPropertyAnimatorCompat translationY(float);
    androidx.core.view.ViewPropertyAnimatorCompat withEndAction(java.lang.Runnable);
    long getDuration();
    androidx.core.view.ViewPropertyAnimatorCompat setInterpolator(android.view.animation.Interpolator);
    android.view.animation.Interpolator getInterpolator();
    androidx.core.view.ViewPropertyAnimatorCompat setStartDelay(long);
    long getStartDelay();
    androidx.core.view.ViewPropertyAnimatorCompat rotation(float);
    androidx.core.view.ViewPropertyAnimatorCompat rotationBy(float);
    androidx.core.view.ViewPropertyAnimatorCompat rotationX(float);
    androidx.core.view.ViewPropertyAnimatorCompat rotationXBy(float);
    androidx.core.view.ViewPropertyAnimatorCompat rotationY(float);
    androidx.core.view.ViewPropertyAnimatorCompat rotationYBy(float);
    androidx.core.view.ViewPropertyAnimatorCompat scaleX(float);
    androidx.core.view.ViewPropertyAnimatorCompat scaleXBy(float);
    androidx.core.view.ViewPropertyAnimatorCompat scaleY(float);
    androidx.core.view.ViewPropertyAnimatorCompat scaleYBy(float);
    void cancel();
    androidx.core.view.ViewPropertyAnimatorCompat x(float);
    androidx.core.view.ViewPropertyAnimatorCompat xBy(float);
    androidx.core.view.ViewPropertyAnimatorCompat y(float);
    androidx.core.view.ViewPropertyAnimatorCompat yBy(float);
    androidx.core.view.ViewPropertyAnimatorCompat translationXBy(float);
    androidx.core.view.ViewPropertyAnimatorCompat translationYBy(float);
    androidx.core.view.ViewPropertyAnimatorCompat translationZBy(float);
    androidx.core.view.ViewPropertyAnimatorCompat translationZ(float);
    androidx.core.view.ViewPropertyAnimatorCompat z(float);
    androidx.core.view.ViewPropertyAnimatorCompat zBy(float);
    void start();
    androidx.core.view.ViewPropertyAnimatorCompat withLayer();
    androidx.core.view.ViewPropertyAnimatorCompat withStartAction(java.lang.Runnable);
    androidx.core.view.ViewPropertyAnimatorCompat setListener(androidx.core.view.ViewPropertyAnimatorListener);
    void setListenerInternal(android.view.View,androidx.core.view.ViewPropertyAnimatorListener);
    androidx.core.view.ViewPropertyAnimatorCompat setUpdateListener(androidx.core.view.ViewPropertyAnimatorUpdateListener);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewPropertyAnimatorCompat$1 {
    androidx.core.view.ViewPropertyAnimatorListener val$listener;    android.view.View val$view;    androidx.core.view.ViewPropertyAnimatorCompat this$0;    <init>(androidx.core.view.ViewPropertyAnimatorCompat,androidx.core.view.ViewPropertyAnimatorListener,android.view.View);
    void onAnimationCancel(android.animation.Animator);
    void onAnimationEnd(android.animation.Animator);
    void onAnimationStart(android.animation.Animator);
}

-keep class androidx.core.view.ViewPropertyAnimatorCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewPropertyAnimatorCompat$2 {
    androidx.core.view.ViewPropertyAnimatorUpdateListener val$listener;    android.view.View val$view;    androidx.core.view.ViewPropertyAnimatorCompat this$0;    <init>(androidx.core.view.ViewPropertyAnimatorCompat,androidx.core.view.ViewPropertyAnimatorUpdateListener,android.view.View);
    void onAnimationUpdate(android.animation.ValueAnimator);
}

-keep class androidx.core.view.ViewPropertyAnimatorCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewPropertyAnimatorCompat$ViewPropertyAnimatorListenerApi14 {
    androidx.core.view.ViewPropertyAnimatorCompat mVpa;    boolean mAnimEndCalled;    <init>(androidx.core.view.ViewPropertyAnimatorCompat);
    void onAnimationStart(android.view.View);
    void onAnimationEnd(android.view.View);
    void onAnimationCancel(android.view.View);
}

-keep class androidx.core.view.ViewPropertyAnimatorCompat

-keep class androidx.core.view.ViewPropertyAnimatorListener

-keepclassmembers,allowobfuscation class androidx.core.view.ViewPropertyAnimatorListenerAdapter {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.ViewPropertyAnimatorListenerAdapter {
    void onAnimationStart(android.view.View);
    void onAnimationEnd(android.view.View);
    void onAnimationCancel(android.view.View);
}

-keep class androidx.core.view.ViewPropertyAnimatorUpdateListener

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowCompat {
    int FEATURE_ACTION_BAR;    int FEATURE_ACTION_BAR_OVERLAY;    int FEATURE_ACTION_MODE_OVERLAY;    <init>();
    android.view.View requireViewById(android.view.Window,int);
    void setDecorFitsSystemWindows(android.view.Window,boolean);
    androidx.core.view.WindowInsetsControllerCompat getInsetsController(android.view.Window,android.view.View);
}

-keep class androidx.core.view.WindowInsetsControllerCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowCompat$Impl16 {
    <init>();
    void setDecorFitsSystemWindows(android.view.Window,boolean);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowCompat$Impl30 {
    <init>();
    void setDecorFitsSystemWindows(android.view.Window,boolean);
    androidx.core.view.WindowInsetsControllerCompat getInsetsController(android.view.Window);
}

-keep class androidx.core.view.WindowInsetsControllerCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsAnimationCompat {
    boolean DEBUG;    java.lang.String TAG;    androidx.core.view.WindowInsetsAnimationCompat$Impl mImpl;    <init>(int,android.view.animation.Interpolator,long);
    <init>(android.view.WindowInsetsAnimation);
    int getTypeMask();
    float getFraction();
    float getInterpolatedFraction();
    android.view.animation.Interpolator getInterpolator();
    long getDurationMillis();
    void setFraction(float);
    float getAlpha();
    void setAlpha(float);
    androidx.core.view.WindowInsetsAnimationCompat toWindowInsetsAnimationCompat(android.view.WindowInsetsAnimation);
    void setCallback(android.view.View,androidx.core.view.WindowInsetsAnimationCompat$Callback);
}

-keep class androidx.core.view.WindowInsetsAnimationCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsAnimationCompat$BoundsCompat {
    androidx.core.graphics.Insets mLowerBound;    androidx.core.graphics.Insets mUpperBound;    <init>(androidx.core.graphics.Insets,androidx.core.graphics.Insets);
    <init>(android.view.WindowInsetsAnimation$Bounds);
    androidx.core.graphics.Insets getLowerBound();
    androidx.core.graphics.Insets getUpperBound();
    androidx.core.view.WindowInsetsAnimationCompat$BoundsCompat inset(androidx.core.graphics.Insets);
    java.lang.String toString();
    android.view.WindowInsetsAnimation$Bounds toBounds();
    androidx.core.view.WindowInsetsAnimationCompat$BoundsCompat toBoundsCompat(android.view.WindowInsetsAnimation$Bounds);
}

-keep class androidx.core.graphics.Insets

-keep class androidx.core.view.WindowInsetsAnimationCompat$Callback

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsAnimationCompat$Callback {
    int DISPATCH_MODE_STOP;    int DISPATCH_MODE_CONTINUE_ON_SUBTREE;    android.view.WindowInsets mDispachedInsets;    int mDispatchMode;    <init>(int);
    int getDispatchMode();
    void onPrepare(androidx.core.view.WindowInsetsAnimationCompat);
    androidx.core.view.WindowInsetsAnimationCompat$BoundsCompat onStart(androidx.core.view.WindowInsetsAnimationCompat,androidx.core.view.WindowInsetsAnimationCompat$BoundsCompat);
    androidx.core.view.WindowInsetsCompat onProgress(androidx.core.view.WindowInsetsCompat,java.util.List);
    void onEnd(androidx.core.view.WindowInsetsAnimationCompat);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsAnimationCompat$Impl {
    int mTypeMask;    float mFraction;    android.view.animation.Interpolator mInterpolator;    long mDurationMillis;    float mAlpha;    <init>(int,android.view.animation.Interpolator,long);
    int getTypeMask();
    float getFraction();
    float getInterpolatedFraction();
    android.view.animation.Interpolator getInterpolator();
    long getDurationMillis();
    float getAlpha();
    void setFraction(float);
    void setAlpha(float);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsAnimationCompat$Impl21 {
    <init>(int,android.view.animation.Interpolator,long);
    void setCallback(android.view.View,androidx.core.view.WindowInsetsAnimationCompat$Callback);
    android.view.View$OnApplyWindowInsetsListener createProxyListener(android.view.View,androidx.core.view.WindowInsetsAnimationCompat$Callback);
    androidx.core.view.WindowInsetsAnimationCompat$BoundsCompat computeAnimationBounds(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat,int);
    int buildAnimationMask(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat);
    androidx.core.view.WindowInsetsCompat interpolateInsets(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat,float,int);
    android.view.WindowInsets forwardToViewIfNeeded(android.view.View,android.view.WindowInsets);
    void dispatchOnPrepare(android.view.View,androidx.core.view.WindowInsetsAnimationCompat,android.view.WindowInsets,boolean);
    void dispatchOnStart(android.view.View,androidx.core.view.WindowInsetsAnimationCompat,androidx.core.view.WindowInsetsAnimationCompat$BoundsCompat);
    void dispatchOnProgress(android.view.View,androidx.core.view.WindowInsetsCompat,java.util.List);
    void dispatchOnEnd(android.view.View,androidx.core.view.WindowInsetsAnimationCompat);
    androidx.core.view.WindowInsetsAnimationCompat$Callback getCallback(android.view.View);
}

-keep class androidx.core.view.WindowInsetsAnimationCompat$Callback

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsAnimationCompat$Impl21$Impl21OnApplyWindowInsetsListener {
    int COMPAT_ANIMATION_DURATION;    androidx.core.view.WindowInsetsAnimationCompat$Callback mCallback;    androidx.core.view.WindowInsetsCompat mLastInsets;    <init>(android.view.View,androidx.core.view.WindowInsetsAnimationCompat$Callback);
    android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets);
}

-keep class androidx.core.view.WindowInsetsAnimationCompat$Callback

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsAnimationCompat$Impl21$Impl21OnApplyWindowInsetsListener$1 {
    androidx.core.view.WindowInsetsAnimationCompat val$anim;    androidx.core.view.WindowInsetsCompat val$targetInsets;    androidx.core.view.WindowInsetsCompat val$startingInsets;    int val$animationMask;    android.view.View val$v;    androidx.core.view.WindowInsetsAnimationCompat$Impl21$Impl21OnApplyWindowInsetsListener this$0;    <init>(androidx.core.view.WindowInsetsAnimationCompat$Impl21$Impl21OnApplyWindowInsetsListener,androidx.core.view.WindowInsetsAnimationCompat,androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat,int,android.view.View);
    void onAnimationUpdate(android.animation.ValueAnimator);
}

-keep class androidx.core.view.WindowInsetsAnimationCompat$Impl21$Impl21OnApplyWindowInsetsListener

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsAnimationCompat$Impl21$Impl21OnApplyWindowInsetsListener$2 {
    androidx.core.view.WindowInsetsAnimationCompat val$anim;    android.view.View val$v;    androidx.core.view.WindowInsetsAnimationCompat$Impl21$Impl21OnApplyWindowInsetsListener this$0;    <init>(androidx.core.view.WindowInsetsAnimationCompat$Impl21$Impl21OnApplyWindowInsetsListener,androidx.core.view.WindowInsetsAnimationCompat,android.view.View);
    void onAnimationEnd(android.animation.Animator);
}

-keep class androidx.core.view.WindowInsetsAnimationCompat$Impl21$Impl21OnApplyWindowInsetsListener

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsAnimationCompat$Impl21$Impl21OnApplyWindowInsetsListener$3 {
    android.view.View val$v;    androidx.core.view.WindowInsetsAnimationCompat val$anim;    androidx.core.view.WindowInsetsAnimationCompat$BoundsCompat val$animationBounds;    android.animation.ValueAnimator val$animator;    androidx.core.view.WindowInsetsAnimationCompat$Impl21$Impl21OnApplyWindowInsetsListener this$0;    <init>(androidx.core.view.WindowInsetsAnimationCompat$Impl21$Impl21OnApplyWindowInsetsListener,android.view.View,androidx.core.view.WindowInsetsAnimationCompat,androidx.core.view.WindowInsetsAnimationCompat$BoundsCompat,android.animation.ValueAnimator);
    void run();
}

-keep class androidx.core.view.WindowInsetsAnimationCompat$Impl21$Impl21OnApplyWindowInsetsListener

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsAnimationCompat$Impl30 {
    android.view.WindowInsetsAnimation mWrapped;    <init>(android.view.WindowInsetsAnimation);
    <init>(int,android.view.animation.Interpolator,long);
    int getTypeMask();
    android.view.animation.Interpolator getInterpolator();
    long getDurationMillis();
    float getFraction();
    void setFraction(float);
    float getInterpolatedFraction();
    void setCallback(android.view.View,androidx.core.view.WindowInsetsAnimationCompat$Callback);
    android.view.WindowInsetsAnimation$Bounds createPlatformBounds(androidx.core.view.WindowInsetsAnimationCompat$BoundsCompat);
    androidx.core.graphics.Insets getLowerBounds(android.view.WindowInsetsAnimation$Bounds);
    androidx.core.graphics.Insets getHigherBounds(android.view.WindowInsetsAnimation$Bounds);
}

-keep class androidx.core.view.WindowInsetsAnimationCompat$Callback

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsAnimationCompat$Impl30$ProxyCallback {
    androidx.core.view.WindowInsetsAnimationCompat$Callback mCompat;    java.util.List mRORunningAnimations;    java.util.ArrayList mTmpRunningAnimations;    java.util.HashMap mAnimations;    <init>(androidx.core.view.WindowInsetsAnimationCompat$Callback);
    androidx.core.view.WindowInsetsAnimationCompat getWindowInsetsAnimationCompat(android.view.WindowInsetsAnimation);
    void onPrepare(android.view.WindowInsetsAnimation);
    android.view.WindowInsetsAnimation$Bounds onStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds);
    android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List);
    void onEnd(android.view.WindowInsetsAnimation);
}

-keep class androidx.core.view.WindowInsetsAnimationCompat$Callback

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsAnimationControlListenerCompat {
    void onReady(androidx.core.view.WindowInsetsAnimationControllerCompat,int);
    void onFinished(androidx.core.view.WindowInsetsAnimationControllerCompat);
    void onCancelled(androidx.core.view.WindowInsetsAnimationControllerCompat);
}

-keep class androidx.core.view.WindowInsetsAnimationControllerCompat

-keep class androidx.core.view.WindowInsetsAnimationControllerCompat

-keepclassmembers,allowobfuscation class androidx.core.view.WindowInsetsAnimationControllerCompat {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsAnimationControllerCompat {
    androidx.core.view.WindowInsetsAnimationControllerCompat$Impl mImpl;    <init>(android.view.WindowInsetsAnimationController);
    androidx.core.graphics.Insets getHiddenStateInsets();
    androidx.core.graphics.Insets getShownStateInsets();
    androidx.core.graphics.Insets getCurrentInsets();
    float getCurrentFraction();
    float getCurrentAlpha();
    int getTypes();
    void setInsetsAndAlpha(androidx.core.graphics.Insets,float,float);
    void finish(boolean);
    boolean isReady();
    boolean isFinished();
    boolean isCancelled();
}

-keepclassmembers,allowobfuscation class androidx.core.view.WindowInsetsAnimationControllerCompat$Impl {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsAnimationControllerCompat$Impl {
    androidx.core.graphics.Insets getHiddenStateInsets();
    androidx.core.graphics.Insets getShownStateInsets();
    androidx.core.graphics.Insets getCurrentInsets();
    float getCurrentFraction();
    float getCurrentAlpha();
    int getTypes();
    void setInsetsAndAlpha(androidx.core.graphics.Insets,float,float);
    void finish(boolean);
    boolean isReady();
    boolean isFinished();
    boolean isCancelled();
}

-keep class androidx.core.graphics.Insets

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsAnimationControllerCompat$Impl30 {
    android.view.WindowInsetsAnimationController mController;    <init>(android.view.WindowInsetsAnimationController);
    androidx.core.graphics.Insets getHiddenStateInsets();
    androidx.core.graphics.Insets getShownStateInsets();
    androidx.core.graphics.Insets getCurrentInsets();
    float getCurrentFraction();
    float getCurrentAlpha();
    int getTypes();
    void setInsetsAndAlpha(androidx.core.graphics.Insets,float,float);
    void finish(boolean);
    boolean isReady();
    boolean isFinished();
    boolean isCancelled();
}

-keep class androidx.core.graphics.Insets

-keep class androidx.core.view.WindowInsetsCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsCompat {
    java.lang.String TAG;    androidx.core.view.WindowInsetsCompat CONSUMED;    androidx.core.view.WindowInsetsCompat$Impl mImpl;    <init>(android.view.WindowInsets);
    <init>(androidx.core.view.WindowInsetsCompat);
    androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets);
    androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets,android.view.View);
    int getSystemWindowInsetLeft();
    int getSystemWindowInsetTop();
    int getSystemWindowInsetRight();
    int getSystemWindowInsetBottom();
    boolean hasSystemWindowInsets();
    boolean hasInsets();
    boolean isConsumed();
    boolean isRound();
    androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets();
    androidx.core.view.WindowInsetsCompat replaceSystemWindowInsets(int,int,int,int);
    androidx.core.view.WindowInsetsCompat replaceSystemWindowInsets(android.graphics.Rect);
    int getStableInsetTop();
    int getStableInsetLeft();
    int getStableInsetRight();
    int getStableInsetBottom();
    boolean hasStableInsets();
    androidx.core.view.WindowInsetsCompat consumeStableInsets();
    androidx.core.view.DisplayCutoutCompat getDisplayCutout();
    androidx.core.view.WindowInsetsCompat consumeDisplayCutout();
    androidx.core.graphics.Insets getSystemWindowInsets();
    androidx.core.graphics.Insets getStableInsets();
    androidx.core.graphics.Insets getMandatorySystemGestureInsets();
    androidx.core.graphics.Insets getTappableElementInsets();
    androidx.core.graphics.Insets getSystemGestureInsets();
    androidx.core.view.WindowInsetsCompat inset(androidx.core.graphics.Insets);
    androidx.core.view.WindowInsetsCompat inset(int,int,int,int);
    androidx.core.graphics.Insets getInsets(int);
    androidx.core.graphics.Insets getInsetsIgnoringVisibility(int);
    boolean isVisible(int);
    boolean equals(java.lang.Object);
    int hashCode();
    android.view.WindowInsets toWindowInsets();
    androidx.core.graphics.Insets insetInsets(androidx.core.graphics.Insets,int,int,int,int);
    void setOverriddenInsets(androidx.core.graphics.Insets[]);
    void setStableInsets(androidx.core.graphics.Insets);
    void setRootWindowInsets(androidx.core.view.WindowInsetsCompat);
    void setRootViewData(androidx.core.graphics.Insets);
    void copyRootViewBounds(android.view.View);
    void <clinit>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsCompat$Api21ReflectionHolder {
    java.lang.reflect.Field sViewAttachInfoField;    java.lang.reflect.Field sStableInsets;    java.lang.reflect.Field sContentInsets;    boolean sReflectionSucceeded;    <init>();
    androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View);
    void <clinit>();
}

-keep class androidx.core.view.WindowInsetsCompat

-keepclassmembers,allowobfuscation class androidx.core.view.WindowInsetsCompat$Builder {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsCompat$Builder {
    androidx.core.view.WindowInsetsCompat$BuilderImpl mImpl;    <init>(androidx.core.view.WindowInsetsCompat);
    androidx.core.view.WindowInsetsCompat$Builder setSystemWindowInsets(androidx.core.graphics.Insets);
    androidx.core.view.WindowInsetsCompat$Builder setSystemGestureInsets(androidx.core.graphics.Insets);
    androidx.core.view.WindowInsetsCompat$Builder setMandatorySystemGestureInsets(androidx.core.graphics.Insets);
    androidx.core.view.WindowInsetsCompat$Builder setTappableElementInsets(androidx.core.graphics.Insets);
    androidx.core.view.WindowInsetsCompat$Builder setInsets(int,androidx.core.graphics.Insets);
    androidx.core.view.WindowInsetsCompat$Builder setInsetsIgnoringVisibility(int,androidx.core.graphics.Insets);
    androidx.core.view.WindowInsetsCompat$Builder setVisible(int,boolean);
    androidx.core.view.WindowInsetsCompat$Builder setStableInsets(androidx.core.graphics.Insets);
    androidx.core.view.WindowInsetsCompat$Builder setDisplayCutout(androidx.core.view.DisplayCutoutCompat);
    androidx.core.view.WindowInsetsCompat build();
}

-keep class androidx.core.view.WindowInsetsCompat

-keepclassmembers,allowobfuscation class androidx.core.view.WindowInsetsCompat$BuilderImpl {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsCompat$BuilderImpl {
    androidx.core.view.WindowInsetsCompat mInsets;    androidx.core.graphics.Insets[] mInsetsTypeMask;    <init>(androidx.core.view.WindowInsetsCompat);
    void setSystemWindowInsets(androidx.core.graphics.Insets);
    void setSystemGestureInsets(androidx.core.graphics.Insets);
    void setMandatorySystemGestureInsets(androidx.core.graphics.Insets);
    void setTappableElementInsets(androidx.core.graphics.Insets);
    void setStableInsets(androidx.core.graphics.Insets);
    void setDisplayCutout(androidx.core.view.DisplayCutoutCompat);
    void setInsets(int,androidx.core.graphics.Insets);
    void setInsetsIgnoringVisibility(int,androidx.core.graphics.Insets);
    void setVisible(int,boolean);
    void applyInsetTypes();
    androidx.core.view.WindowInsetsCompat build();
}

-keep class androidx.core.view.WindowInsetsCompat

-keepclassmembers,allowobfuscation class androidx.core.view.WindowInsetsCompat$BuilderImpl20 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsCompat$BuilderImpl20 {
    java.lang.reflect.Field sConsumedField;    boolean sConsumedFieldFetched;    java.lang.reflect.Constructor sConstructor;    boolean sConstructorFetched;    android.view.WindowInsets mInsets;    androidx.core.graphics.Insets mStableInsets;    <init>(androidx.core.view.WindowInsetsCompat);
    void setSystemWindowInsets(androidx.core.graphics.Insets);
    void setStableInsets(androidx.core.graphics.Insets);
    androidx.core.view.WindowInsetsCompat build();
    android.view.WindowInsets createWindowInsetsInstance();
    void <clinit>();
}

-keep class androidx.core.view.WindowInsetsCompat

-keepclassmembers,allowobfuscation class androidx.core.view.WindowInsetsCompat$BuilderImpl29 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsCompat$BuilderImpl29 {
    android.view.WindowInsets$Builder mPlatBuilder;    <init>(androidx.core.view.WindowInsetsCompat);
    void setSystemWindowInsets(androidx.core.graphics.Insets);
    void setSystemGestureInsets(androidx.core.graphics.Insets);
    void setMandatorySystemGestureInsets(androidx.core.graphics.Insets);
    void setTappableElementInsets(androidx.core.graphics.Insets);
    void setStableInsets(androidx.core.graphics.Insets);
    void setDisplayCutout(androidx.core.view.DisplayCutoutCompat);
    androidx.core.view.WindowInsetsCompat build();
}

-keep class androidx.core.view.WindowInsetsCompat

-keepclassmembers,allowobfuscation class androidx.core.view.WindowInsetsCompat$BuilderImpl30 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsCompat$BuilderImpl30 {
    <init>(androidx.core.view.WindowInsetsCompat);
    void setInsets(int,androidx.core.graphics.Insets);
    void setInsetsIgnoringVisibility(int,androidx.core.graphics.Insets);
    void setVisible(int,boolean);
}

-keep class androidx.core.view.WindowInsetsCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsCompat$Type {
    int FIRST;    int STATUS_BARS;    int NAVIGATION_BARS;    int CAPTION_BAR;    int IME;    int SYSTEM_GESTURES;    int MANDATORY_SYSTEM_GESTURES;    int TAPPABLE_ELEMENT;    int DISPLAY_CUTOUT;    int LAST;    int SIZE;    int WINDOW_DECOR;    <init>();
    int statusBars();
    int navigationBars();
    int captionBar();
    int ime();
    int systemGestures();
    int mandatorySystemGestures();
    int tappableElement();
    int displayCutout();
    int systemBars();
    int all();
    int indexOf(int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsCompat$TypeImpl30 {
    <init>();
    int toPlatformType(int);
}

-keep class androidx.core.view.WindowInsetsControllerCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsControllerCompat {
    int BEHAVIOR_SHOW_BARS_BY_TOUCH;    int BEHAVIOR_SHOW_BARS_BY_SWIPE;    int BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE;    androidx.core.view.WindowInsetsControllerCompat$Impl mImpl;    <init>(android.view.WindowInsetsController);
    <init>(android.view.Window,android.view.View);
    androidx.core.view.WindowInsetsControllerCompat toWindowInsetsControllerCompat(android.view.WindowInsetsController);
    void show(int);
    void hide(int);
    boolean isAppearanceLightStatusBars();
    void setAppearanceLightStatusBars(boolean);
    boolean isAppearanceLightNavigationBars();
    void setAppearanceLightNavigationBars(boolean);
    void controlWindowInsetsAnimation(int,long,android.view.animation.Interpolator,android.os.CancellationSignal,androidx.core.view.WindowInsetsAnimationControlListenerCompat);
    void setSystemBarsBehavior(int);
    int getSystemBarsBehavior();
    void addOnControllableInsetsChangedListener(androidx.core.view.WindowInsetsControllerCompat$OnControllableInsetsChangedListener);
    void removeOnControllableInsetsChangedListener(androidx.core.view.WindowInsetsControllerCompat$OnControllableInsetsChangedListener);
}

-keepclassmembers,allowobfuscation class androidx.core.view.WindowInsetsControllerCompat$Impl {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsControllerCompat$Impl {
    void show(int);
    void hide(int);
    void controlWindowInsetsAnimation(int,long,android.view.animation.Interpolator,android.os.CancellationSignal,androidx.core.view.WindowInsetsAnimationControlListenerCompat);
    void setSystemBarsBehavior(int);
    int getSystemBarsBehavior();
    boolean isAppearanceLightStatusBars();
    void setAppearanceLightStatusBars(boolean);
    boolean isAppearanceLightNavigationBars();
    void setAppearanceLightNavigationBars(boolean);
    void addOnControllableInsetsChangedListener(androidx.core.view.WindowInsetsControllerCompat$OnControllableInsetsChangedListener);
    void removeOnControllableInsetsChangedListener(androidx.core.view.WindowInsetsControllerCompat$OnControllableInsetsChangedListener);
}

-keep class androidx.core.view.WindowInsetsAnimationControlListenerCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsControllerCompat$Impl20 {
    android.view.Window mWindow;    android.view.View mView;    <init>(android.view.Window,android.view.View);
    void show(int);
    void showForType(int);
    void hide(int);
    void hideForType(int);
    void setSystemUiFlag(int);
    void unsetSystemUiFlag(int);
    void setWindowFlag(int);
    void unsetWindowFlag(int);
    void controlWindowInsetsAnimation(int,long,android.view.animation.Interpolator,android.os.CancellationSignal,androidx.core.view.WindowInsetsAnimationControlListenerCompat);
    void setSystemBarsBehavior(int);
    int getSystemBarsBehavior();
    void addOnControllableInsetsChangedListener(androidx.core.view.WindowInsetsControllerCompat$OnControllableInsetsChangedListener);
    void removeOnControllableInsetsChangedListener(androidx.core.view.WindowInsetsControllerCompat$OnControllableInsetsChangedListener);
}

-keep class androidx.core.view.WindowInsetsAnimationControlListenerCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsControllerCompat$Impl20$1 {
    android.view.View val$finalView;    androidx.core.view.WindowInsetsControllerCompat$Impl20 this$0;    <init>(androidx.core.view.WindowInsetsControllerCompat$Impl20,android.view.View);
    void run();
}

-keep class androidx.core.view.WindowInsetsControllerCompat$Impl20

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsControllerCompat$Impl23 {
    <init>(android.view.Window,android.view.View);
    boolean isAppearanceLightStatusBars();
    void setAppearanceLightStatusBars(boolean);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsControllerCompat$Impl26 {
    <init>(android.view.Window,android.view.View);
    boolean isAppearanceLightNavigationBars();
    void setAppearanceLightNavigationBars(boolean);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsControllerCompat$Impl30 {
    androidx.core.view.WindowInsetsControllerCompat mCompatController;    android.view.WindowInsetsController mInsetsController;    androidx.collection.SimpleArrayMap mListeners;    <init>(android.view.Window,androidx.core.view.WindowInsetsControllerCompat);
    <init>(android.view.WindowInsetsController,androidx.core.view.WindowInsetsControllerCompat);
    void show(int);
    void hide(int);
    boolean isAppearanceLightStatusBars();
    void setAppearanceLightStatusBars(boolean);
    boolean isAppearanceLightNavigationBars();
    void setAppearanceLightNavigationBars(boolean);
    void controlWindowInsetsAnimation(int,long,android.view.animation.Interpolator,android.os.CancellationSignal,androidx.core.view.WindowInsetsAnimationControlListenerCompat);
    void setSystemBarsBehavior(int);
    int getSystemBarsBehavior();
    void addOnControllableInsetsChangedListener(androidx.core.view.WindowInsetsControllerCompat$OnControllableInsetsChangedListener);
    void removeOnControllableInsetsChangedListener(androidx.core.view.WindowInsetsControllerCompat$OnControllableInsetsChangedListener);
}

-keep class androidx.core.view.WindowInsetsControllerCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsControllerCompat$Impl30$1 {
    androidx.core.view.WindowInsetsAnimationControllerCompat mCompatAnimController;    androidx.core.view.WindowInsetsAnimationControlListenerCompat val$listener;    androidx.core.view.WindowInsetsControllerCompat$Impl30 this$0;    <init>(androidx.core.view.WindowInsetsControllerCompat$Impl30,androidx.core.view.WindowInsetsAnimationControlListenerCompat);
    void onReady(android.view.WindowInsetsAnimationController,int);
    void onFinished(android.view.WindowInsetsAnimationController);
    void onCancelled(android.view.WindowInsetsAnimationController);
}

-keep class androidx.core.view.WindowInsetsControllerCompat$Impl30

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsControllerCompat$Impl30$2 {
    androidx.core.view.WindowInsetsControllerCompat$OnControllableInsetsChangedListener val$listener;    androidx.core.view.WindowInsetsControllerCompat$Impl30 this$0;    <init>(androidx.core.view.WindowInsetsControllerCompat$Impl30,androidx.core.view.WindowInsetsControllerCompat$OnControllableInsetsChangedListener);
    void onControllableInsetsChanged(android.view.WindowInsetsController,int);
}

-keep class androidx.core.view.WindowInsetsControllerCompat$Impl30

-keep class androidx.core.view.WindowInsetsControllerCompat$OnControllableInsetsChangedListener

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.WindowInsetsControllerCompat$OnControllableInsetsChangedListener {
    void onControllableInsetsChanged(androidx.core.view.WindowInsetsControllerCompat,int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityClickableSpanCompat {
    int mOriginalClickableSpanId;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat mNodeInfoCompat;    int mClickableSpanActionId;    java.lang.String SPAN_ID;    <init>(int,androidx.core.view.accessibility.AccessibilityNodeInfoCompat,int);
    void onClick(android.view.View);
}

-keep class androidx.core.view.accessibility.AccessibilityNodeInfoCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityEventCompat {
    int TYPE_VIEW_HOVER_ENTER;    int TYPE_VIEW_HOVER_EXIT;    int TYPE_TOUCH_EXPLORATION_GESTURE_START;    int TYPE_TOUCH_EXPLORATION_GESTURE_END;    int TYPE_WINDOW_CONTENT_CHANGED;    int TYPE_VIEW_SCROLLED;    int TYPE_VIEW_TEXT_SELECTION_CHANGED;    int TYPE_ANNOUNCEMENT;    int TYPE_VIEW_ACCESSIBILITY_FOCUSED;    int TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED;    int TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY;    int TYPE_GESTURE_DETECTION_START;    int TYPE_GESTURE_DETECTION_END;    int TYPE_TOUCH_INTERACTION_START;    int TYPE_TOUCH_INTERACTION_END;    int TYPE_WINDOWS_CHANGED;    int TYPE_VIEW_CONTEXT_CLICKED;    int TYPE_ASSIST_READING_CONTEXT;    int CONTENT_CHANGE_TYPE_UNDEFINED;    int CONTENT_CHANGE_TYPE_SUBTREE;    int CONTENT_CHANGE_TYPE_TEXT;    int CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION;    int CONTENT_CHANGE_TYPE_PANE_TITLE;    int CONTENT_CHANGE_TYPE_PANE_APPEARED;    int CONTENT_CHANGE_TYPE_PANE_DISAPPEARED;    int CONTENT_CHANGE_TYPE_STATE_DESCRIPTION;    int TYPES_ALL_MASK;    <init>();
    int getRecordCount(android.view.accessibility.AccessibilityEvent);
    void appendRecord(android.view.accessibility.AccessibilityEvent,androidx.core.view.accessibility.AccessibilityRecordCompat);
    androidx.core.view.accessibility.AccessibilityRecordCompat getRecord(android.view.accessibility.AccessibilityEvent,int);
    androidx.core.view.accessibility.AccessibilityRecordCompat asRecord(android.view.accessibility.AccessibilityEvent);
    void setContentChangeTypes(android.view.accessibility.AccessibilityEvent,int);
    int getContentChangeTypes(android.view.accessibility.AccessibilityEvent);
    void setMovementGranularity(android.view.accessibility.AccessibilityEvent,int);
    int getMovementGranularity(android.view.accessibility.AccessibilityEvent);
    void setAction(android.view.accessibility.AccessibilityEvent,int);
    int getAction(android.view.accessibility.AccessibilityEvent);
}

-keep class androidx.core.view.accessibility.AccessibilityRecordCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityManagerCompat {
    boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager,androidx.core.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener);
    boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager,androidx.core.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener);
    java.util.List getInstalledAccessibilityServiceList(android.view.accessibility.AccessibilityManager);
    java.util.List getEnabledAccessibilityServiceList(android.view.accessibility.AccessibilityManager,int);
    boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager);
    boolean addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager,androidx.core.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener);
    boolean removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager,androidx.core.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener);
    <init>();
}

-keep class androidx.core.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener

-keep class androidx.core.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener {
    void onAccessibilityStateChanged(boolean);
}

-keepclassmembers,allowobfuscation class androidx.core.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerWrapper {
    androidx.core.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener mListener;    <init>(androidx.core.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener);
    int hashCode();
    boolean equals(java.lang.Object);
    void onAccessibilityStateChanged(boolean);
}

-keep class androidx.core.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener

-keep class androidx.core.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener {
    void onTouchExplorationStateChanged(boolean);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListenerWrapper {
    androidx.core.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener mListener;    <init>(androidx.core.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener);
    int hashCode();
    boolean equals(java.lang.Object);
    void onTouchExplorationStateChanged(boolean);
}

-keep class androidx.core.view.accessibility.AccessibilityManagerCompat$TouchExplorationStateChangeListener

-keep class androidx.core.view.accessibility.AccessibilityNodeInfoCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityNodeInfoCompat {
    java.lang.String ROLE_DESCRIPTION_KEY;    java.lang.String PANE_TITLE_KEY;    java.lang.String TOOLTIP_TEXT_KEY;    java.lang.String HINT_TEXT_KEY;    java.lang.String BOOLEAN_PROPERTY_KEY;    java.lang.String SPANS_ID_KEY;    java.lang.String SPANS_START_KEY;    java.lang.String SPANS_END_KEY;    java.lang.String SPANS_FLAGS_KEY;    java.lang.String SPANS_ACTION_ID_KEY;    java.lang.String STATE_DESCRIPTION_KEY;    int BOOLEAN_PROPERTY_SCREEN_READER_FOCUSABLE;    int BOOLEAN_PROPERTY_IS_HEADING;    int BOOLEAN_PROPERTY_IS_SHOWING_HINT;    int BOOLEAN_PROPERTY_IS_TEXT_ENTRY_KEY;    android.view.accessibility.AccessibilityNodeInfo mInfo;    int mParentVirtualDescendantId;    int mVirtualDescendantId;    int ACTION_FOCUS;    int ACTION_CLEAR_FOCUS;    int ACTION_SELECT;    int ACTION_CLEAR_SELECTION;    int ACTION_CLICK;    int ACTION_LONG_CLICK;    int ACTION_ACCESSIBILITY_FOCUS;    int ACTION_CLEAR_ACCESSIBILITY_FOCUS;    int ACTION_NEXT_AT_MOVEMENT_GRANULARITY;    int ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY;    int ACTION_NEXT_HTML_ELEMENT;    int ACTION_PREVIOUS_HTML_ELEMENT;    int ACTION_SCROLL_FORWARD;    int ACTION_SCROLL_BACKWARD;    int ACTION_COPY;    int ACTION_PASTE;    int ACTION_CUT;    int ACTION_SET_SELECTION;    int ACTION_EXPAND;    int ACTION_COLLAPSE;    int ACTION_DISMISS;    int ACTION_SET_TEXT;    java.lang.String ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT;    java.lang.String ACTION_ARGUMENT_HTML_ELEMENT_STRING;    java.lang.String ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN;    java.lang.String ACTION_ARGUMENT_SELECTION_START_INT;    java.lang.String ACTION_ARGUMENT_SELECTION_END_INT;    java.lang.String ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE;    java.lang.String ACTION_ARGUMENT_ROW_INT;    java.lang.String ACTION_ARGUMENT_COLUMN_INT;    java.lang.String ACTION_ARGUMENT_PROGRESS_VALUE;    java.lang.String ACTION_ARGUMENT_MOVE_WINDOW_X;    java.lang.String ACTION_ARGUMENT_MOVE_WINDOW_Y;    java.lang.String ACTION_ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INT;    int FOCUS_INPUT;    int FOCUS_ACCESSIBILITY;    int MOVEMENT_GRANULARITY_CHARACTER;    int MOVEMENT_GRANULARITY_WORD;    int MOVEMENT_GRANULARITY_LINE;    int MOVEMENT_GRANULARITY_PARAGRAPH;    int MOVEMENT_GRANULARITY_PAGE;    int sClickableSpanId;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat wrapNonNullInstance(java.lang.Object);
    <init>(java.lang.Object);
    <init>(android.view.accessibility.AccessibilityNodeInfo);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat wrap(android.view.accessibility.AccessibilityNodeInfo);
    android.view.accessibility.AccessibilityNodeInfo unwrap();
    java.lang.Object getInfo();
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat obtain(android.view.View);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat obtain(android.view.View,int);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat obtain();
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat obtain(androidx.core.view.accessibility.AccessibilityNodeInfoCompat);
    void setSource(android.view.View);
    void setSource(android.view.View,int);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat findFocus(int);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat focusSearch(int);
    int getWindowId();
    int getChildCount();
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat getChild(int);
    void addChild(android.view.View);
    void addChild(android.view.View,int);
    boolean removeChild(android.view.View);
    boolean removeChild(android.view.View,int);
    int getActions();
    void addAction(int);
    java.util.List extrasIntList(java.lang.String);
    void addAction(androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat);
    boolean removeAction(androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat);
    boolean performAction(int);
    boolean performAction(int,android.os.Bundle);
    void setMovementGranularities(int);
    int getMovementGranularities();
    java.util.List findAccessibilityNodeInfosByText(java.lang.String);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat getParent();
    void setParent(android.view.View);
    void setParent(android.view.View,int);
    void getBoundsInParent(android.graphics.Rect);
    void setBoundsInParent(android.graphics.Rect);
    void getBoundsInScreen(android.graphics.Rect);
    void setBoundsInScreen(android.graphics.Rect);
    boolean isCheckable();
    void setCheckable(boolean);
    boolean isChecked();
    void setChecked(boolean);
    boolean isFocusable();
    void setFocusable(boolean);
    boolean isFocused();
    void setFocused(boolean);
    boolean isVisibleToUser();
    void setVisibleToUser(boolean);
    boolean isAccessibilityFocused();
    void setAccessibilityFocused(boolean);
    boolean isSelected();
    void setSelected(boolean);
    boolean isClickable();
    void setClickable(boolean);
    boolean isLongClickable();
    void setLongClickable(boolean);
    boolean isEnabled();
    void setEnabled(boolean);
    boolean isPassword();
    void setPassword(boolean);
    boolean isScrollable();
    void setScrollable(boolean);
    boolean isImportantForAccessibility();
    void setImportantForAccessibility(boolean);
    java.lang.CharSequence getPackageName();
    void setPackageName(java.lang.CharSequence);
    java.lang.CharSequence getClassName();
    void setClassName(java.lang.CharSequence);
    java.lang.CharSequence getText();
    void setText(java.lang.CharSequence);
    void addSpansToExtras(java.lang.CharSequence,android.view.View);
    android.util.SparseArray getOrCreateSpansFromViewTags(android.view.View);
    android.util.SparseArray getSpansFromViewTags(android.view.View);
    android.text.style.ClickableSpan[] getClickableSpans(java.lang.CharSequence);
    int idForClickableSpan(android.text.style.ClickableSpan,android.util.SparseArray);
    boolean hasSpans();
    void clearExtrasSpans();
    void addSpanLocationToExtras(android.text.style.ClickableSpan,android.text.Spanned,int);
    void removeCollectedSpans(android.view.View);
    java.lang.CharSequence getContentDescription();
    java.lang.CharSequence getStateDescription();
    void setContentDescription(java.lang.CharSequence);
    void setStateDescription(java.lang.CharSequence);
    void recycle();
    void setViewIdResourceName(java.lang.String);
    java.lang.String getViewIdResourceName();
    int getLiveRegion();
    void setLiveRegion(int);
    int getDrawingOrder();
    void setDrawingOrder(int);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat getCollectionInfo();
    void setCollectionInfo(java.lang.Object);
    void setCollectionItemInfo(java.lang.Object);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat getCollectionItemInfo();
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$RangeInfoCompat getRangeInfo();
    void setRangeInfo(androidx.core.view.accessibility.AccessibilityNodeInfoCompat$RangeInfoCompat);
    java.util.List getActionList();
    void setContentInvalid(boolean);
    boolean isContentInvalid();
    boolean isContextClickable();
    void setContextClickable(boolean);
    java.lang.CharSequence getHintText();
    void setHintText(java.lang.CharSequence);
    void setError(java.lang.CharSequence);
    java.lang.CharSequence getError();
    void setLabelFor(android.view.View);
    void setLabelFor(android.view.View,int);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat getLabelFor();
    void setLabeledBy(android.view.View);
    void setLabeledBy(android.view.View,int);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat getLabeledBy();
    boolean canOpenPopup();
    void setCanOpenPopup(boolean);
    java.util.List findAccessibilityNodeInfosByViewId(java.lang.String);
    android.os.Bundle getExtras();
    int getInputType();
    void setInputType(int);
    void setMaxTextLength(int);
    int getMaxTextLength();
    void setTextSelection(int,int);
    int getTextSelectionStart();
    int getTextSelectionEnd();
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat getTraversalBefore();
    void setTraversalBefore(android.view.View);
    void setTraversalBefore(android.view.View,int);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat getTraversalAfter();
    void setTraversalAfter(android.view.View);
    void setTraversalAfter(android.view.View,int);
    androidx.core.view.accessibility.AccessibilityWindowInfoCompat getWindow();
    boolean isDismissable();
    void setDismissable(boolean);
    boolean isEditable();
    void setEditable(boolean);
    boolean isMultiLine();
    void setMultiLine(boolean);
    java.lang.CharSequence getTooltipText();
    void setTooltipText(java.lang.CharSequence);
    void setPaneTitle(java.lang.CharSequence);
    java.lang.CharSequence getPaneTitle();
    boolean isScreenReaderFocusable();
    void setScreenReaderFocusable(boolean);
    boolean isShowingHintText();
    void setShowingHintText(boolean);
    boolean isHeading();
    void setHeading(boolean);
    boolean isTextEntryKey();
    void setTextEntryKey(boolean);
    boolean refresh();
    java.lang.CharSequence getRoleDescription();
    void setRoleDescription(java.lang.CharSequence);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$TouchDelegateInfoCompat getTouchDelegateInfo();
    void setTouchDelegateInfo(androidx.core.view.accessibility.AccessibilityNodeInfoCompat$TouchDelegateInfoCompat);
    int hashCode();
    boolean equals(java.lang.Object);
    java.lang.String toString();
    void setBooleanProperty(int,boolean);
    boolean getBooleanProperty(int);
    java.lang.String getActionSymbolicName(int);
    void <clinit>();
}

-keep class androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat {
    java.lang.String TAG;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_FOCUS;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CLEAR_FOCUS;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SELECT;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CLEAR_SELECTION;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CLICK;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_LONG_CLICK;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_ACCESSIBILITY_FOCUS;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CLEAR_ACCESSIBILITY_FOCUS;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_NEXT_AT_MOVEMENT_GRANULARITY;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_NEXT_HTML_ELEMENT;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_PREVIOUS_HTML_ELEMENT;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_FORWARD;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_BACKWARD;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_COPY;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_PASTE;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CUT;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SET_SELECTION;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_EXPAND;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_COLLAPSE;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_DISMISS;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SET_TEXT;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SHOW_ON_SCREEN;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_TO_POSITION;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_UP;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_LEFT;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_DOWN;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SCROLL_RIGHT;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_PAGE_UP;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_PAGE_DOWN;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_PAGE_LEFT;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_PAGE_RIGHT;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_CONTEXT_CLICK;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SET_PROGRESS;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_MOVE_WINDOW;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_SHOW_TOOLTIP;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_HIDE_TOOLTIP;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_PRESS_AND_HOLD;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat ACTION_IME_ENTER;    java.lang.Object mAction;    int mId;    java.lang.Class mViewCommandArgumentClass;    androidx.core.view.accessibility.AccessibilityViewCommand mCommand;    <init>(int,java.lang.CharSequence);
    <init>(int,java.lang.CharSequence,androidx.core.view.accessibility.AccessibilityViewCommand);
    <init>(java.lang.Object);
    <init>(int,java.lang.CharSequence,java.lang.Class);
    <init>(java.lang.Object,int,java.lang.CharSequence,androidx.core.view.accessibility.AccessibilityViewCommand,java.lang.Class);
    int getId();
    java.lang.CharSequence getLabel();
    boolean perform(android.view.View,android.os.Bundle);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat createReplacementAction(java.lang.CharSequence,androidx.core.view.accessibility.AccessibilityViewCommand);
    int hashCode();
    boolean equals(java.lang.Object);
    void <clinit>();
}

-keep class androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat {
    int SELECTION_MODE_NONE;    int SELECTION_MODE_SINGLE;    int SELECTION_MODE_MULTIPLE;    java.lang.Object mInfo;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat obtain(int,int,boolean,int);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat obtain(int,int,boolean);
    <init>(java.lang.Object);
    int getColumnCount();
    int getRowCount();
    boolean isHierarchical();
    int getSelectionMode();
}

-keep class androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat {
    java.lang.Object mInfo;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat obtain(int,int,int,int,boolean,boolean);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat obtain(int,int,int,int,boolean);
    <init>(java.lang.Object);
    int getColumnIndex();
    int getColumnSpan();
    int getRowIndex();
    int getRowSpan();
    boolean isHeading();
    boolean isSelected();
}

-keep class androidx.core.view.accessibility.AccessibilityNodeInfoCompat$RangeInfoCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityNodeInfoCompat$RangeInfoCompat {
    int RANGE_TYPE_INT;    int RANGE_TYPE_FLOAT;    int RANGE_TYPE_PERCENT;    java.lang.Object mInfo;    androidx.core.view.accessibility.AccessibilityNodeInfoCompat$RangeInfoCompat obtain(int,float,float,float);
    <init>(java.lang.Object);
    float getCurrent();
    float getMax();
    float getMin();
    int getType();
}

-keep class androidx.core.view.accessibility.AccessibilityNodeInfoCompat$TouchDelegateInfoCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityNodeInfoCompat$TouchDelegateInfoCompat {
    android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo mInfo;    <init>(java.util.Map);
    <init>(android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo);
    int getRegionCount();
    android.graphics.Region getRegionAt(int);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat getTargetForRegion(android.graphics.Region);
}

-keep class androidx.core.view.accessibility.AccessibilityNodeProviderCompat

-keepclassmembers,allowobfuscation class androidx.core.view.accessibility.AccessibilityNodeProviderCompat {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityNodeProviderCompat {
    int HOST_VIEW_ID;    java.lang.Object mProvider;    <init>(java.lang.Object);
    java.lang.Object getProvider();
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int);
    boolean performAction(int,int,android.os.Bundle);
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat findFocus(int);
    void addExtraDataToAccessibilityNodeInfo(int,androidx.core.view.accessibility.AccessibilityNodeInfoCompat,java.lang.String,android.os.Bundle);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderApi16 {
    androidx.core.view.accessibility.AccessibilityNodeProviderCompat mCompat;    <init>(androidx.core.view.accessibility.AccessibilityNodeProviderCompat);
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int);
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int);
    boolean performAction(int,int,android.os.Bundle);
}

-keep class androidx.core.view.accessibility.AccessibilityNodeProviderCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderApi19 {
    <init>(androidx.core.view.accessibility.AccessibilityNodeProviderCompat);
    android.view.accessibility.AccessibilityNodeInfo findFocus(int);
}

-keep class androidx.core.view.accessibility.AccessibilityNodeProviderCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderApi26 {
    <init>(androidx.core.view.accessibility.AccessibilityNodeProviderCompat);
    void addExtraDataToAccessibilityNodeInfo(int,android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle);
}

-keep class androidx.core.view.accessibility.AccessibilityNodeProviderCompat

-keep class androidx.core.view.accessibility.AccessibilityRecordCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityRecordCompat {
    android.view.accessibility.AccessibilityRecord mRecord;    <init>(java.lang.Object);
    java.lang.Object getImpl();
    androidx.core.view.accessibility.AccessibilityRecordCompat obtain(androidx.core.view.accessibility.AccessibilityRecordCompat);
    androidx.core.view.accessibility.AccessibilityRecordCompat obtain();
    void setSource(android.view.View);
    void setSource(android.view.View,int);
    void setSource(android.view.accessibility.AccessibilityRecord,android.view.View,int);
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat getSource();
    int getWindowId();
    boolean isChecked();
    void setChecked(boolean);
    boolean isEnabled();
    void setEnabled(boolean);
    boolean isPassword();
    void setPassword(boolean);
    boolean isFullScreen();
    void setFullScreen(boolean);
    boolean isScrollable();
    void setScrollable(boolean);
    int getItemCount();
    void setItemCount(int);
    int getCurrentItemIndex();
    void setCurrentItemIndex(int);
    int getFromIndex();
    void setFromIndex(int);
    int getToIndex();
    void setToIndex(int);
    int getScrollX();
    void setScrollX(int);
    int getScrollY();
    void setScrollY(int);
    int getMaxScrollX();
    int getMaxScrollX(android.view.accessibility.AccessibilityRecord);
    void setMaxScrollX(int);
    void setMaxScrollX(android.view.accessibility.AccessibilityRecord,int);
    int getMaxScrollY();
    int getMaxScrollY(android.view.accessibility.AccessibilityRecord);
    void setMaxScrollY(int);
    void setMaxScrollY(android.view.accessibility.AccessibilityRecord,int);
    int getAddedCount();
    void setAddedCount(int);
    int getRemovedCount();
    void setRemovedCount(int);
    java.lang.CharSequence getClassName();
    void setClassName(java.lang.CharSequence);
    java.util.List getText();
    java.lang.CharSequence getBeforeText();
    void setBeforeText(java.lang.CharSequence);
    java.lang.CharSequence getContentDescription();
    void setContentDescription(java.lang.CharSequence);
    android.os.Parcelable getParcelableData();
    void setParcelableData(android.os.Parcelable);
    void recycle();
    int hashCode();
    boolean equals(java.lang.Object);
}

-keep class androidx.core.view.accessibility.AccessibilityViewCommand

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.view.accessibility.AccessibilityViewCommand$CommandArguments {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.view.accessibility.AccessibilityViewCommand$MoveAtGranularityArguments {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.view.accessibility.AccessibilityViewCommand$MoveHtmlArguments {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.view.accessibility.AccessibilityViewCommand$MoveWindowArguments {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.view.accessibility.AccessibilityViewCommand$ScrollToPositionArguments {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.view.accessibility.AccessibilityViewCommand$SetProgressArguments {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.view.accessibility.AccessibilityViewCommand$SetSelectionArguments {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.view.accessibility.AccessibilityViewCommand$SetTextArguments {
    <init>();
}

-keep class androidx.core.view.accessibility.AccessibilityWindowInfoCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.accessibility.AccessibilityWindowInfoCompat {
    java.lang.Object mInfo;    int UNDEFINED;    int TYPE_APPLICATION;    int TYPE_INPUT_METHOD;    int TYPE_SYSTEM;    int TYPE_ACCESSIBILITY_OVERLAY;    int TYPE_SPLIT_SCREEN_DIVIDER;    androidx.core.view.accessibility.AccessibilityWindowInfoCompat wrapNonNullInstance(java.lang.Object);
    <init>(java.lang.Object);
    int getType();
    int getLayer();
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat getRoot();
    androidx.core.view.accessibility.AccessibilityWindowInfoCompat getParent();
    int getId();
    void getBoundsInScreen(android.graphics.Rect);
    boolean isActive();
    boolean isFocused();
    boolean isAccessibilityFocused();
    int getChildCount();
    androidx.core.view.accessibility.AccessibilityWindowInfoCompat getChild(int);
    java.lang.CharSequence getTitle();
    androidx.core.view.accessibility.AccessibilityNodeInfoCompat getAnchor();
    androidx.core.view.accessibility.AccessibilityWindowInfoCompat obtain();
    androidx.core.view.accessibility.AccessibilityWindowInfoCompat obtain(androidx.core.view.accessibility.AccessibilityWindowInfoCompat);
    void recycle();
    int hashCode();
    boolean equals(java.lang.Object);
    java.lang.String toString();
    java.lang.String typeToString(int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.animation.PathInterpolatorApi14 {
    float PRECISION;    float[] mX;    float[] mY;    <init>(android.graphics.Path);
    <init>(float,float);
    <init>(float,float,float,float);
    float getInterpolation(float);
    android.graphics.Path createQuad(float,float);
    android.graphics.Path createCubic(float,float,float,float);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.animation.PathInterpolatorCompat {
    <init>();
    android.view.animation.Interpolator create(android.graphics.Path);
    android.view.animation.Interpolator create(float,float);
    android.view.animation.Interpolator create(float,float,float,float);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.inputmethod.EditorInfoCompat {
    int IME_FLAG_NO_PERSONALIZED_LEARNING;    int IME_FLAG_FORCE_ASCII;    java.lang.String[] EMPTY_STRING_ARRAY;    java.lang.String CONTENT_MIME_TYPES_KEY;    java.lang.String CONTENT_MIME_TYPES_INTEROP_KEY;    java.lang.String CONTENT_SURROUNDING_TEXT_KEY;    java.lang.String CONTENT_SELECTION_HEAD_KEY;    java.lang.String CONTENT_SELECTION_END_KEY;    int MEMORY_EFFICIENT_TEXT_LENGTH;    int MAX_INITIAL_SELECTION_LENGTH;    void setContentMimeTypes(android.view.inputmethod.EditorInfo,java.lang.String[]);
    java.lang.String[] getContentMimeTypes(android.view.inputmethod.EditorInfo);
    void setInitialSurroundingText(android.view.inputmethod.EditorInfo,java.lang.CharSequence);
    void setInitialSurroundingSubText(android.view.inputmethod.EditorInfo,java.lang.CharSequence,int);
    void trimLongSurroundingText(android.view.inputmethod.EditorInfo,java.lang.CharSequence,int,int);
    java.lang.CharSequence getInitialTextBeforeCursor(android.view.inputmethod.EditorInfo,int,int);
    java.lang.CharSequence getInitialSelectedText(android.view.inputmethod.EditorInfo,int);
    java.lang.CharSequence getInitialTextAfterCursor(android.view.inputmethod.EditorInfo,int,int);
    boolean isCutOnSurrogate(java.lang.CharSequence,int,int);
    boolean isPasswordInputType(int);
    void setSurroundingText(android.view.inputmethod.EditorInfo,java.lang.CharSequence,int,int);
    int getProtocol(android.view.inputmethod.EditorInfo);
    void <clinit>();
}

-keepclassmembers,allowobfuscation class androidx.core.view.inputmethod.EditorInfoCompat {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.inputmethod.EditorInfoCompat$Impl30 {
    <init>();
    void setInitialSurroundingSubText(android.view.inputmethod.EditorInfo,java.lang.CharSequence,int);
    java.lang.CharSequence getInitialTextBeforeCursor(android.view.inputmethod.EditorInfo,int,int);
    java.lang.CharSequence getInitialSelectedText(android.view.inputmethod.EditorInfo,int);
    java.lang.CharSequence getInitialTextAfterCursor(android.view.inputmethod.EditorInfo,int,int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.inputmethod.InputConnectionCompat {
    java.lang.String COMMIT_CONTENT_ACTION;    java.lang.String COMMIT_CONTENT_INTEROP_ACTION;    java.lang.String COMMIT_CONTENT_CONTENT_URI_KEY;    java.lang.String COMMIT_CONTENT_CONTENT_URI_INTEROP_KEY;    java.lang.String COMMIT_CONTENT_DESCRIPTION_KEY;    java.lang.String COMMIT_CONTENT_DESCRIPTION_INTEROP_KEY;    java.lang.String COMMIT_CONTENT_LINK_URI_KEY;    java.lang.String COMMIT_CONTENT_LINK_URI_INTEROP_KEY;    java.lang.String COMMIT_CONTENT_OPTS_KEY;    java.lang.String COMMIT_CONTENT_OPTS_INTEROP_KEY;    java.lang.String COMMIT_CONTENT_FLAGS_KEY;    java.lang.String COMMIT_CONTENT_FLAGS_INTEROP_KEY;    java.lang.String COMMIT_CONTENT_RESULT_RECEIVER_KEY;    java.lang.String COMMIT_CONTENT_RESULT_INTEROP_RECEIVER_KEY;    int INPUT_CONTENT_GRANT_READ_URI_PERMISSION;    boolean handlePerformPrivateCommand(java.lang.String,android.os.Bundle,androidx.core.view.inputmethod.InputConnectionCompat$OnCommitContentListener);
    boolean commitContent(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo,androidx.core.view.inputmethod.InputContentInfoCompat,int,android.os.Bundle);
    android.view.inputmethod.InputConnection createWrapper(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo,androidx.core.view.inputmethod.InputConnectionCompat$OnCommitContentListener);
}

-keep class androidx.core.view.inputmethod.InputConnectionCompat$OnCommitContentListener

-keepclassmembers,allowobfuscation class androidx.core.view.inputmethod.InputConnectionCompat {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.inputmethod.InputConnectionCompat$1 {
    androidx.core.view.inputmethod.InputConnectionCompat$OnCommitContentListener val$listener;    <init>(android.view.inputmethod.InputConnection,boolean,androidx.core.view.inputmethod.InputConnectionCompat$OnCommitContentListener);
    boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle);
}

-keep class androidx.core.view.inputmethod.InputConnectionCompat$OnCommitContentListener

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.inputmethod.InputConnectionCompat$2 {
    androidx.core.view.inputmethod.InputConnectionCompat$OnCommitContentListener val$listener;    <init>(android.view.inputmethod.InputConnection,boolean,androidx.core.view.inputmethod.InputConnectionCompat$OnCommitContentListener);
    boolean performPrivateCommand(java.lang.String,android.os.Bundle);
}

-keep class androidx.core.view.inputmethod.InputConnectionCompat$OnCommitContentListener

-keep class androidx.core.view.inputmethod.InputConnectionCompat$OnCommitContentListener

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.inputmethod.InputConnectionCompat$OnCommitContentListener {
    boolean onCommitContent(androidx.core.view.inputmethod.InputContentInfoCompat,int,android.os.Bundle);
}

-keep class androidx.core.view.inputmethod.InputContentInfoCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.inputmethod.InputContentInfoCompat {
    androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatImpl mImpl;    <init>(android.net.Uri,android.content.ClipDescription,android.net.Uri);
    <init>(androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatImpl);
    android.net.Uri getContentUri();
    android.content.ClipDescription getDescription();
    android.net.Uri getLinkUri();
    androidx.core.view.inputmethod.InputContentInfoCompat wrap(java.lang.Object);
    java.lang.Object unwrap();
    void requestPermission();
    void releasePermission();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatApi25Impl {
    android.view.inputmethod.InputContentInfo mObject;    <init>(java.lang.Object);
    <init>(android.net.Uri,android.content.ClipDescription,android.net.Uri);
    android.net.Uri getContentUri();
    android.content.ClipDescription getDescription();
    android.net.Uri getLinkUri();
    java.lang.Object getInputContentInfo();
    void requestPermission();
    void releasePermission();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatBaseImpl {
    android.net.Uri mContentUri;    android.content.ClipDescription mDescription;    android.net.Uri mLinkUri;    <init>(android.net.Uri,android.content.ClipDescription,android.net.Uri);
    android.net.Uri getContentUri();
    android.content.ClipDescription getDescription();
    android.net.Uri getLinkUri();
    java.lang.Object getInputContentInfo();
    void requestPermission();
    void releasePermission();
}

-keep class androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatImpl

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.view.inputmethod.InputContentInfoCompat$InputContentInfoCompatImpl {
    android.net.Uri getContentUri();
    android.content.ClipDescription getDescription();
    android.net.Uri getLinkUri();
    java.lang.Object getInputContentInfo();
    void requestPermission();
    void releasePermission();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.AutoScrollHelper {
    androidx.core.widget.AutoScrollHelper$ClampedScroller mScroller;    android.view.animation.Interpolator mEdgeInterpolator;    android.view.View mTarget;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.widget.AutoScrollHelper$ClampedScroller {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.AutoScrollHelper$ScrollAnimationRunnable {
    androidx.core.widget.AutoScrollHelper this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.CompoundButtonCompat {
    java.lang.String TAG;    java.lang.reflect.Field sButtonDrawableField;    boolean sButtonDrawableFieldFetched;    <init>();
    void setButtonTintList(android.widget.CompoundButton,android.content.res.ColorStateList);
    android.content.res.ColorStateList getButtonTintList(android.widget.CompoundButton);
    void setButtonTintMode(android.widget.CompoundButton,android.graphics.PorterDuff$Mode);
    android.graphics.PorterDuff$Mode getButtonTintMode(android.widget.CompoundButton);
    android.graphics.drawable.Drawable getButtonDrawable(android.widget.CompoundButton);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.ContentLoadingProgressBar {
    java.lang.Runnable mDelayedHide;    java.lang.Runnable mDelayedShow;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.ContentLoadingProgressBar$1 {
    androidx.core.widget.ContentLoadingProgressBar this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.ContentLoadingProgressBar$2 {
    androidx.core.widget.ContentLoadingProgressBar this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.EdgeEffectCompat {
    android.widget.EdgeEffect mEdgeEffect;    <init>(android.content.Context);
    void setSize(int,int);
    boolean isFinished();
    void finish();
    boolean onPull(float);
    boolean onPull(float,float);
    void onPull(android.widget.EdgeEffect,float,float);
    boolean onRelease();
    boolean onAbsorb(int);
    boolean draw(android.graphics.Canvas);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.ImageViewCompat {
    android.content.res.ColorStateList getImageTintList(android.widget.ImageView);
    void setImageTintList(android.widget.ImageView,android.content.res.ColorStateList);
    android.graphics.PorterDuff$Mode getImageTintMode(android.widget.ImageView);
    void setImageTintMode(android.widget.ImageView,android.graphics.PorterDuff$Mode);
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.ListPopupWindowCompat {
    <init>();
    android.view.View$OnTouchListener createDragToOpenListener(java.lang.Object,android.view.View);
    android.view.View$OnTouchListener createDragToOpenListener(android.widget.ListPopupWindow,android.view.View);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.ListViewAutoScrollHelper {
    android.widget.ListView mTarget;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.ListViewCompat {
    void scrollListBy(android.widget.ListView,int);
    boolean canScrollList(android.widget.ListView,int);
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.NestedScrollView {
    android.graphics.Rect mTempRect;    int[] mScrollOffset;    int[] mScrollConsumed;    androidx.core.view.NestedScrollingParentHelper mParentHelper;    androidx.core.view.NestedScrollingChildHelper mChildHelper;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.widget.NestedScrollView$AccessibilityDelegate {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.widget.NestedScrollView$SavedState$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.PopupMenuCompat {
    <init>();
    android.view.View$OnTouchListener getDragToOpenListener(java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.PopupWindowCompat {
    java.lang.String TAG;    java.lang.reflect.Method sSetWindowLayoutTypeMethod;    boolean sSetWindowLayoutTypeMethodAttempted;    java.lang.reflect.Method sGetWindowLayoutTypeMethod;    boolean sGetWindowLayoutTypeMethodAttempted;    java.lang.reflect.Field sOverlapAnchorField;    boolean sOverlapAnchorFieldAttempted;    <init>();
    void showAsDropDown(android.widget.PopupWindow,android.view.View,int,int,int);
    void setOverlapAnchor(android.widget.PopupWindow,boolean);
    boolean getOverlapAnchor(android.widget.PopupWindow);
    void setWindowLayoutType(android.widget.PopupWindow,int);
    int getWindowLayoutType(android.widget.PopupWindow);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.ScrollerCompat {
    android.widget.OverScroller mScroller;    androidx.core.widget.ScrollerCompat create(android.content.Context);
    androidx.core.widget.ScrollerCompat create(android.content.Context,android.view.animation.Interpolator);
    <init>(android.content.Context,android.view.animation.Interpolator);
    boolean isFinished();
    int getCurrX();
    int getCurrY();
    int getFinalX();
    int getFinalY();
    float getCurrVelocity();
    boolean computeScrollOffset();
    void startScroll(int,int,int,int);
    void startScroll(int,int,int,int,int);
    void fling(int,int,int,int,int,int,int,int);
    void fling(int,int,int,int,int,int,int,int,int,int);
    boolean springBack(int,int,int,int,int,int);
    void abortAnimation();
    void notifyHorizontalEdgeReached(int,int,int);
    void notifyVerticalEdgeReached(int,int,int);
    boolean isOverScrolled();
}

-keep class androidx.core.widget.ScrollerCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.TextViewCompat {
    java.lang.String LOG_TAG;    int AUTO_SIZE_TEXT_TYPE_NONE;    int AUTO_SIZE_TEXT_TYPE_UNIFORM;    java.lang.reflect.Field sMaximumField;    boolean sMaximumFieldFetched;    java.lang.reflect.Field sMaxModeField;    boolean sMaxModeFieldFetched;    java.lang.reflect.Field sMinimumField;    boolean sMinimumFieldFetched;    java.lang.reflect.Field sMinModeField;    boolean sMinModeFieldFetched;    int LINES;    <init>();
    java.lang.reflect.Field retrieveField(java.lang.String);
    int retrieveIntFromField(java.lang.reflect.Field,android.widget.TextView);
    void setCompoundDrawablesRelative(android.widget.TextView,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable);
    void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable);
    void setCompoundDrawablesRelativeWithIntrinsicBounds(android.widget.TextView,int,int,int,int);
    int getMaxLines(android.widget.TextView);
    int getMinLines(android.widget.TextView);
    void setTextAppearance(android.widget.TextView,int);
    android.graphics.drawable.Drawable[] getCompoundDrawablesRelative(android.widget.TextView);
    void setAutoSizeTextTypeWithDefaults(android.widget.TextView,int);
    void setAutoSizeTextTypeUniformWithConfiguration(android.widget.TextView,int,int,int,int);
    void setAutoSizeTextTypeUniformWithPresetSizes(android.widget.TextView,int[],int);
    int getAutoSizeTextType(android.widget.TextView);
    int getAutoSizeStepGranularity(android.widget.TextView);
    int getAutoSizeMinTextSize(android.widget.TextView);
    int getAutoSizeMaxTextSize(android.widget.TextView);
    int[] getAutoSizeTextAvailableSizes(android.widget.TextView);
    void setCustomSelectionActionModeCallback(android.widget.TextView,android.view.ActionMode$Callback);
    android.view.ActionMode$Callback wrapCustomSelectionActionModeCallback(android.widget.TextView,android.view.ActionMode$Callback);
    void setFirstBaselineToTopHeight(android.widget.TextView,int);
    void setLastBaselineToBottomHeight(android.widget.TextView,int);
    int getFirstBaselineToTopHeight(android.widget.TextView);
    int getLastBaselineToBottomHeight(android.widget.TextView);
    void setLineHeight(android.widget.TextView,int);
    androidx.core.text.PrecomputedTextCompat$Params getTextMetricsParams(android.widget.TextView);
    void setTextMetricsParams(android.widget.TextView,androidx.core.text.PrecomputedTextCompat$Params);
    void setPrecomputedText(android.widget.TextView,androidx.core.text.PrecomputedTextCompat);
    android.text.TextDirectionHeuristic getTextDirectionHeuristic(android.widget.TextView);
    int getTextDirection(android.text.TextDirectionHeuristic);
    void setCompoundDrawableTintList(android.widget.TextView,android.content.res.ColorStateList);
    android.content.res.ColorStateList getCompoundDrawableTintList(android.widget.TextView);
    void setCompoundDrawableTintMode(android.widget.TextView,android.graphics.PorterDuff$Mode);
    android.graphics.PorterDuff$Mode getCompoundDrawableTintMode(android.widget.TextView);
}

-keep class androidx.core.text.PrecomputedTextCompat$Params

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.TextViewCompat$OreoCallback {
    int MENU_ITEM_ORDER_PROCESS_TEXT_INTENT_ACTIONS_START;    android.view.ActionMode$Callback mCallback;    android.widget.TextView mTextView;    java.lang.Class mMenuBuilderClass;    java.lang.reflect.Method mMenuBuilderRemoveItemAtMethod;    boolean mCanUseMenuBuilderReferences;    boolean mInitializedMenuBuilderReferences;    <init>(android.view.ActionMode$Callback,android.widget.TextView);
    boolean onCreateActionMode(android.view.ActionMode,android.view.Menu);
    boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu);
    boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem);
    void onDestroyActionMode(android.view.ActionMode);
    void recomputeProcessTextMenuItems(android.view.Menu);
    java.util.List getSupportedActivities(android.content.Context,android.content.pm.PackageManager);
    boolean isSupportedActivity(android.content.pm.ResolveInfo,android.content.Context);
    android.content.Intent createProcessTextIntentForResolveInfo(android.content.pm.ResolveInfo,android.widget.TextView);
    boolean isEditable(android.widget.TextView);
    android.content.Intent createProcessTextIntent();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.core.widget.TextViewOnReceiveContentListener {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.TextViewOnReceiveContentListener$Api16Impl {
    <init>();
    java.lang.CharSequence coerce(android.content.Context,android.content.ClipData$Item,int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.core.widget.TextViewOnReceiveContentListener$ApiImpl {
    <init>();
    java.lang.CharSequence coerce(android.content.Context,android.content.ClipData$Item,int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.cursoradapter.widget.CursorAdapter$ChangeObserver {
    androidx.cursoradapter.widget.CursorAdapter this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.cursoradapter.widget.CursorAdapter$MyDataSetObserver {
    androidx.cursoradapter.widget.CursorAdapter this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.customview.view.AbsSavedState {
    android.os.Parcelable mSuperState;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.customview.view.AbsSavedState$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.customview.view.AbsSavedState$2 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.customview.widget.ExploreByTouchHelper {
    android.graphics.Rect mTempScreenRect;    android.graphics.Rect mTempParentRect;    android.graphics.Rect mTempVisibleRect;    int[] mTempGlobalRect;    android.view.accessibility.AccessibilityManager mManager;    android.view.View mHost;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.customview.widget.ExploreByTouchHelper$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.customview.widget.ExploreByTouchHelper$2 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.customview.widget.ExploreByTouchHelper$MyNodeProvider {
    androidx.customview.widget.ExploreByTouchHelper this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.customview.widget.FocusStrategy$SequentialComparator {
    android.graphics.Rect mTemp1;    android.graphics.Rect mTemp2;    boolean mIsLayoutRtl;    androidx.customview.widget.FocusStrategy$BoundsAdapter mAdapter;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.customview.widget.ViewDragHelper {
    androidx.customview.widget.ViewDragHelper$Callback mCallback;    android.view.ViewGroup mParentView;    java.lang.Runnable mSetIdleRunnable;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.customview.widget.ViewDragHelper$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.customview.widget.ViewDragHelper$2 {
    androidx.customview.widget.ViewDragHelper this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.customview.widget.ViewDragHelper$Callback {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.drawerlayout.widget.DrawerLayout {
    androidx.drawerlayout.widget.DrawerLayout$ChildAccessibilityDelegate mChildAccessibilityDelegate;    androidx.customview.widget.ViewDragHelper mLeftDragger;    androidx.customview.widget.ViewDragHelper mRightDragger;    androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback mLeftCallback;    androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback mRightCallback;    java.util.ArrayList mNonDrawerViews;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.drawerlayout.widget.DrawerLayout$1 {
    androidx.drawerlayout.widget.DrawerLayout this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.drawerlayout.widget.DrawerLayout$AccessibilityDelegate {
    android.graphics.Rect mTmpRect;    androidx.drawerlayout.widget.DrawerLayout this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.drawerlayout.widget.DrawerLayout$ChildAccessibilityDelegate {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.drawerlayout.widget.DrawerLayout$SavedState$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.drawerlayout.widget.DrawerLayout$SimpleDrawerListener {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback {
    int mAbsGravity;    java.lang.Runnable mPeekRunnable;    androidx.drawerlayout.widget.DrawerLayout this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback$1 {
    androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback this$1;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.exifinterface.media.ExifInterface {
    java.util.HashMap[] mAttributes;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.exifinterface.media.ExifInterface$1 {
    androidx.exifinterface.media.ExifInterface$SeekableByteOrderedDataInputStream val$in;    androidx.exifinterface.media.ExifInterface this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.exifinterface.media.ExifInterface$ByteOrderedDataInputStream {
    java.io.DataInputStream mDataInputStream;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.exifinterface.media.ExifInterface$ByteOrderedDataOutputStream {
    java.io.OutputStream mOutputStream;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.exifinterface.media.ExifInterface$ExifAttribute {
    int format;    int numberOfComponents;    long bytesOffset;    byte[] bytes;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.exifinterface.media.ExifInterface$ExifTag {
    int number;    java.lang.String name;    int primaryFormat;    int secondaryFormat;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.exifinterface.media.ExifInterface$Rational {
    long numerator;    long denominator;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.exifinterface.media.ExifInterfaceUtils$Api21Impl {
    <init>();
    java.io.FileDescriptor dup(java.io.FileDescriptor);
    long lseek(java.io.FileDescriptor,long,int);
    void close(java.io.FileDescriptor);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.exifinterface.media.ExifInterfaceUtils$Api23Impl {
    <init>();
    void setDataSource(android.media.MediaMetadataRetriever,android.media.MediaDataSource);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.BackStackRecord {
    androidx.fragment.app.FragmentManager mManager;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.BackStackState {
    int[] mOps;    java.util.ArrayList mFragmentWhos;    int[] mOldMaxLifecycleStates;    int[] mCurrentMaxLifecycleStates;    int mTransition;    java.lang.String mName;    int mIndex;    int mBreadCrumbTitleRes;    java.lang.CharSequence mBreadCrumbTitleText;    int mBreadCrumbShortTitleRes;    java.lang.CharSequence mBreadCrumbShortTitleText;    java.util.ArrayList mSharedElementSourceNames;    java.util.ArrayList mSharedElementTargetNames;    boolean mReorderingAllowed;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.BackStackState$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DefaultSpecialEffectsController$1 {
    java.util.List val$awaitingContainerChanges;    androidx.fragment.app.SpecialEffectsController$Operation val$operation;    androidx.fragment.app.DefaultSpecialEffectsController this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DefaultSpecialEffectsController$2 {
    android.view.ViewGroup val$container;    android.view.View val$viewToAnimate;    boolean val$isHideOperation;    androidx.fragment.app.SpecialEffectsController$Operation val$operation;    androidx.fragment.app.DefaultSpecialEffectsController$AnimationInfo val$animationInfo;    androidx.fragment.app.DefaultSpecialEffectsController this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DefaultSpecialEffectsController$3 {
    android.animation.Animator val$animator;    androidx.fragment.app.DefaultSpecialEffectsController this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DefaultSpecialEffectsController$4 {
    android.view.ViewGroup val$container;    android.view.View val$viewToAnimate;    androidx.fragment.app.DefaultSpecialEffectsController$AnimationInfo val$animationInfo;    androidx.fragment.app.DefaultSpecialEffectsController this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DefaultSpecialEffectsController$4$1 {
    androidx.fragment.app.DefaultSpecialEffectsController$4 this$1;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DefaultSpecialEffectsController$5 {
    android.view.View val$viewToAnimate;    android.view.ViewGroup val$container;    androidx.fragment.app.DefaultSpecialEffectsController$AnimationInfo val$animationInfo;    androidx.fragment.app.DefaultSpecialEffectsController this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DefaultSpecialEffectsController$6 {
    androidx.fragment.app.SpecialEffectsController$Operation val$lastIn;    androidx.fragment.app.SpecialEffectsController$Operation val$firstOut;    boolean val$isPop;    androidx.collection.ArrayMap val$lastInViews;    androidx.fragment.app.DefaultSpecialEffectsController this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DefaultSpecialEffectsController$7 {
    androidx.fragment.app.FragmentTransitionImpl val$impl;    android.view.View val$lastInEpicenterView;    android.graphics.Rect val$lastInEpicenterRect;    androidx.fragment.app.DefaultSpecialEffectsController this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DefaultSpecialEffectsController$8 {
    java.util.ArrayList val$transitioningViews;    androidx.fragment.app.DefaultSpecialEffectsController this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DefaultSpecialEffectsController$9 {
    androidx.fragment.app.DefaultSpecialEffectsController$TransitionInfo val$transitionInfo;    androidx.fragment.app.DefaultSpecialEffectsController this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DefaultSpecialEffectsController$SpecialEffectsInfo {
    androidx.fragment.app.SpecialEffectsController$Operation mOperation;    androidx.core.os.CancellationSignal mSignal;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DefaultSpecialEffectsController$TransitionInfo {
    java.lang.Object mTransition;    boolean mOverlapAllowed;    java.lang.Object mSharedElementTransition;}

-keepclassmembers,allowobfuscation class androidx.fragment.app.DialogFragment {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DialogFragment {
    int STYLE_NORMAL;    int STYLE_NO_TITLE;    int STYLE_NO_FRAME;    int STYLE_NO_INPUT;    java.lang.String SAVED_DIALOG_STATE_TAG;    java.lang.String SAVED_STYLE;    java.lang.String SAVED_THEME;    java.lang.String SAVED_CANCELABLE;    java.lang.String SAVED_SHOWS_DIALOG;    java.lang.String SAVED_BACK_STACK_ID;    java.lang.String SAVED_INTERNAL_DIALOG_SHOWING;    android.os.Handler mHandler;    java.lang.Runnable mDismissRunnable;    android.content.DialogInterface$OnCancelListener mOnCancelListener;    android.content.DialogInterface$OnDismissListener mOnDismissListener;    int mStyle;    int mTheme;    boolean mCancelable;    boolean mShowsDialog;    int mBackStackId;    boolean mCreatingDialog;    androidx.lifecycle.Observer mObserver;    android.app.Dialog mDialog;    boolean mViewDestroyed;    boolean mDismissed;    boolean mShownByMe;    boolean mDialogCreated;    <init>(int);
    void setStyle(int,int);
    void show(androidx.fragment.app.FragmentManager,java.lang.String);
    int show(androidx.fragment.app.FragmentTransaction,java.lang.String);
    void showNow(androidx.fragment.app.FragmentManager,java.lang.String);
    void dismiss();
    void dismissAllowingStateLoss();
    void dismissInternal(boolean,boolean);
    android.app.Dialog getDialog();
    android.app.Dialog requireDialog();
    int getTheme();
    void setCancelable(boolean);
    boolean isCancelable();
    void setShowsDialog(boolean);
    boolean getShowsDialog();
    void onAttach(android.content.Context);
    void onDetach();
    void onCreate(android.os.Bundle);
    void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle);
    androidx.fragment.app.FragmentContainer createFragmentContainer();
    android.view.View onFindViewById(int);
    boolean onHasView();
    android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle);
    void setupDialog(android.app.Dialog,int);
    android.app.Dialog onCreateDialog(android.os.Bundle);
    void onCancel(android.content.DialogInterface);
    void onDismiss(android.content.DialogInterface);
    void prepareDialog(android.os.Bundle);
    void onViewStateRestored(android.os.Bundle);
    void onStart();
    void onSaveInstanceState(android.os.Bundle);
    void onStop();
    void onDestroyView();
    android.app.Dialog access$000(androidx.fragment.app.DialogFragment);
    android.content.DialogInterface$OnDismissListener access$100(androidx.fragment.app.DialogFragment);
    boolean access$200(androidx.fragment.app.DialogFragment);
}

-keep class androidx.fragment.app.FragmentManager

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DialogFragment$1 {
    androidx.fragment.app.DialogFragment this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DialogFragment$2 {
    androidx.fragment.app.DialogFragment this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DialogFragment$3 {
    androidx.fragment.app.DialogFragment this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DialogFragment$4 {
    androidx.fragment.app.DialogFragment this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.DialogFragment$5 {
    androidx.fragment.app.FragmentContainer val$fragmentContainer;    androidx.fragment.app.DialogFragment this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.Fragment {
    java.lang.Object USE_DEFAULT_TRANSITION;    int INITIALIZING;    int ATTACHED;    int CREATED;    int VIEW_CREATED;    int AWAITING_EXIT_EFFECTS;    int ACTIVITY_CREATED;    int STARTED;    int AWAITING_ENTER_EFFECTS;    int RESUMED;    int mState;    android.os.Bundle mSavedFragmentState;    android.util.SparseArray mSavedViewState;    android.os.Bundle mSavedViewRegistryState;    java.lang.Boolean mSavedUserVisibleHint;    java.lang.String mWho;    android.os.Bundle mArguments;    androidx.fragment.app.Fragment mTarget;    java.lang.String mTargetWho;    int mTargetRequestCode;    java.lang.Boolean mIsPrimaryNavigationFragment;    boolean mAdded;    boolean mRemoving;    boolean mFromLayout;    boolean mInLayout;    boolean mRestored;    boolean mPerformedCreateView;    int mBackStackNesting;    androidx.fragment.app.FragmentManager mFragmentManager;    androidx.fragment.app.FragmentHostCallback mHost;    androidx.fragment.app.FragmentManager mChildFragmentManager;    androidx.fragment.app.Fragment mParentFragment;    int mFragmentId;    int mContainerId;    java.lang.String mTag;    boolean mHidden;    boolean mDetached;    boolean mRetainInstance;    boolean mRetainInstanceChangedWhileDetached;    boolean mHasMenu;    boolean mMenuVisible;    boolean mCalled;    android.view.ViewGroup mContainer;    android.view.View mView;    boolean mDeferStart;    boolean mUserVisibleHint;    androidx.fragment.app.Fragment$AnimationInfo mAnimationInfo;    java.lang.Runnable mPostponedDurationRunnable;    boolean mIsNewlyAdded;    boolean mHiddenChanged;    float mPostponedAlpha;    android.view.LayoutInflater mLayoutInflater;    boolean mIsCreated;    androidx.lifecycle.Lifecycle$State mMaxState;    androidx.lifecycle.LifecycleRegistry mLifecycleRegistry;    androidx.fragment.app.FragmentViewLifecycleOwner mViewLifecycleOwner;    androidx.lifecycle.MutableLiveData mViewLifecycleOwnerLiveData;    androidx.lifecycle.ViewModelProvider$Factory mDefaultFactory;    androidx.savedstate.SavedStateRegistryController mSavedStateRegistryController;    int mContentLayoutId;    java.util.concurrent.atomic.AtomicInteger mNextLocalRequestCode;    java.util.ArrayList mOnPreAttachedListeners;    androidx.lifecycle.Lifecycle getLifecycle();
    androidx.lifecycle.LifecycleOwner getViewLifecycleOwner();
    androidx.lifecycle.LiveData getViewLifecycleOwnerLiveData();
    androidx.lifecycle.ViewModelStore getViewModelStore();
    int getMinimumMaxLifecycleState();
    androidx.lifecycle.ViewModelProvider$Factory getDefaultViewModelProviderFactory();
    androidx.savedstate.SavedStateRegistry getSavedStateRegistry();
    <init>(int);
    void initLifecycle();
    androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String);
    androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle);
    void restoreViewState(android.os.Bundle);
    boolean isInBackStack();
    boolean equals(java.lang.Object);
    int hashCode();
    java.lang.String toString();
    int getId();
    java.lang.String getTag();
    void setArguments(android.os.Bundle);
    android.os.Bundle getArguments();
    android.os.Bundle requireArguments();
    boolean isStateSaved();
    void setInitialSavedState(androidx.fragment.app.Fragment$SavedState);
    void setTargetFragment(androidx.fragment.app.Fragment,int);
    androidx.fragment.app.Fragment getTargetFragment();
    int getTargetRequestCode();
    android.content.Context getContext();
    android.content.Context requireContext();
    androidx.fragment.app.FragmentActivity getActivity();
    androidx.fragment.app.FragmentActivity requireActivity();
    java.lang.Object getHost();
    java.lang.Object requireHost();
    android.content.res.Resources getResources();
    java.lang.CharSequence getText(int);
    java.lang.String getString(int);
    java.lang.String getString(int,java.lang.Object[]);
    androidx.fragment.app.FragmentManager getFragmentManager();
    androidx.fragment.app.FragmentManager getParentFragmentManager();
    androidx.fragment.app.FragmentManager requireFragmentManager();
    androidx.fragment.app.FragmentManager getChildFragmentManager();
    androidx.fragment.app.Fragment getParentFragment();
    androidx.fragment.app.Fragment requireParentFragment();
    boolean isAdded();
    boolean isDetached();
    boolean isRemoving();
    boolean isRemovingParent();
    boolean isInLayout();
    boolean isResumed();
    boolean isVisible();
    boolean isHidden();
    boolean hasOptionsMenu();
    boolean isMenuVisible();
    void onHiddenChanged(boolean);
    void setRetainInstance(boolean);
    boolean getRetainInstance();
    void setHasOptionsMenu(boolean);
    void setMenuVisibility(boolean);
    void setUserVisibleHint(boolean);
    boolean getUserVisibleHint();
    androidx.loader.app.LoaderManager getLoaderManager();
    void startActivity(android.content.Intent);
    void startActivity(android.content.Intent,android.os.Bundle);
    void startActivityForResult(android.content.Intent,int);
    void startActivityForResult(android.content.Intent,int,android.os.Bundle);
    void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle);
    void onActivityResult(int,int,android.content.Intent);
    void requestPermissions(java.lang.String[],int);
    void onRequestPermissionsResult(int,java.lang.String[],int[]);
    boolean shouldShowRequestPermissionRationale(java.lang.String);
    android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle);
    android.view.LayoutInflater getLayoutInflater();
    android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle);
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle);
    void onInflate(android.content.Context,android.util.AttributeSet,android.os.Bundle);
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle);
    void onAttachFragment(androidx.fragment.app.Fragment);
    void onAttach(android.content.Context);
    void onAttach(android.app.Activity);
    android.view.animation.Animation onCreateAnimation(int,boolean,int);
    android.animation.Animator onCreateAnimator(int,boolean,int);
    void onCreate(android.os.Bundle);
    void restoreChildFragmentState(android.os.Bundle);
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle);
    void onViewCreated(android.view.View,android.os.Bundle);
    android.view.View requireView();
    void onActivityCreated(android.os.Bundle);
    void onViewStateRestored(android.os.Bundle);
    void onStart();
    void onResume();
    void onSaveInstanceState(android.os.Bundle);
    void onMultiWindowModeChanged(boolean);
    void onPictureInPictureModeChanged(boolean);
    void onConfigurationChanged(android.content.res.Configuration);
    void onPrimaryNavigationFragmentChanged(boolean);
    void onPause();
    void onStop();
    void onLowMemory();
    void onDestroyView();
    void onDestroy();
    void initState();
    void onDetach();
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater);
    void onPrepareOptionsMenu(android.view.Menu);
    void onDestroyOptionsMenu();
    boolean onOptionsItemSelected(android.view.MenuItem);
    void onOptionsMenuClosed(android.view.Menu);
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo);
    void registerForContextMenu(android.view.View);
    void unregisterForContextMenu(android.view.View);
    boolean onContextItemSelected(android.view.MenuItem);
    void setEnterSharedElementCallback(androidx.core.app.SharedElementCallback);
    void setExitSharedElementCallback(androidx.core.app.SharedElementCallback);
    void setEnterTransition(java.lang.Object);
    java.lang.Object getEnterTransition();
    void setReturnTransition(java.lang.Object);
    java.lang.Object getReturnTransition();
    void setExitTransition(java.lang.Object);
    java.lang.Object getExitTransition();
    void setReenterTransition(java.lang.Object);
    java.lang.Object getReenterTransition();
    void setSharedElementEnterTransition(java.lang.Object);
    java.lang.Object getSharedElementEnterTransition();
    void setSharedElementReturnTransition(java.lang.Object);
    java.lang.Object getSharedElementReturnTransition();
    void setAllowEnterTransitionOverlap(boolean);
    boolean getAllowEnterTransitionOverlap();
    void setAllowReturnTransitionOverlap(boolean);
    boolean getAllowReturnTransitionOverlap();
    void postponeEnterTransition();
    void postponeEnterTransition(long,java.util.concurrent.TimeUnit);
    void startPostponedEnterTransition();
    void callStartTransitionListener(boolean);
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]);
    androidx.fragment.app.Fragment findFragmentByWho(java.lang.String);
    androidx.fragment.app.FragmentContainer createFragmentContainer();
    void performAttach();
    void performCreate(android.os.Bundle);
    void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle);
    void performViewCreated();
    void performActivityCreated(android.os.Bundle);
    void restoreViewState();
    void performStart();
    void performResume();
    void noteStateNotSaved();
    void performPrimaryNavigationFragmentChanged();
    void performMultiWindowModeChanged(boolean);
    void performPictureInPictureModeChanged(boolean);
    void performConfigurationChanged(android.content.res.Configuration);
    void performLowMemory();
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater);
    boolean performPrepareOptionsMenu(android.view.Menu);
    boolean performOptionsItemSelected(android.view.MenuItem);
    boolean performContextItemSelected(android.view.MenuItem);
    void performOptionsMenuClosed(android.view.Menu);
    void performSaveInstanceState(android.os.Bundle);
    void performPause();
    void performStop();
    void performDestroyView();
    void performDestroy();
    void performDetach();
    void setOnStartEnterTransitionListener(androidx.fragment.app.Fragment$OnStartEnterTransitionListener);
    androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo();
    void setAnimations(int,int,int,int);
    int getEnterAnim();
    int getExitAnim();
    int getPopEnterAnim();
    int getPopExitAnim();
    boolean getPopDirection();
    void setPopDirection(boolean);
    int getNextTransition();
    void setNextTransition(int);
    java.util.ArrayList getSharedElementSourceNames();
    java.util.ArrayList getSharedElementTargetNames();
    void setSharedElementNames(java.util.ArrayList,java.util.ArrayList);
    androidx.core.app.SharedElementCallback getEnterTransitionCallback();
    androidx.core.app.SharedElementCallback getExitTransitionCallback();
    android.view.View getAnimatingAway();
    void setAnimatingAway(android.view.View);
    void setAnimator(android.animation.Animator);
    android.animation.Animator getAnimator();
    void setPostOnViewCreatedAlpha(float);
    float getPostOnViewCreatedAlpha();
    void setFocusedView(android.view.View);
    android.view.View getFocusedView();
    boolean isPostponed();
    boolean isHideReplaced();
    void setHideReplaced(boolean);
    androidx.activity.result.ActivityResultLauncher registerForActivityResult(androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback);
    androidx.activity.result.ActivityResultLauncher registerForActivityResult(androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultRegistry,androidx.activity.result.ActivityResultCallback);
    androidx.activity.result.ActivityResultLauncher prepareCallInternal(androidx.activity.result.contract.ActivityResultContract,androidx.arch.core.util.Function,androidx.activity.result.ActivityResultCallback);
    void registerOnPreAttachListener(androidx.fragment.app.Fragment$OnPreAttachedListener);
    java.lang.String generateActivityResultKey();
    void <clinit>();
}

-keep class androidx.lifecycle.Lifecycle

-keepclassmembers,allowobfuscation class androidx.fragment.app.Fragment {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.Fragment$1 {
    androidx.fragment.app.Fragment this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.Fragment$2 {
    androidx.fragment.app.Fragment this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.Fragment$3 {
    androidx.fragment.app.SpecialEffectsController val$controller;    androidx.fragment.app.Fragment this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.Fragment$4 {
    androidx.fragment.app.Fragment this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.Fragment$5 {
    androidx.fragment.app.Fragment this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.Fragment$6 {
    androidx.fragment.app.Fragment this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.Fragment$7 {
    androidx.activity.result.ActivityResultRegistry val$registry;    androidx.fragment.app.Fragment this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.Fragment$8 {
    androidx.arch.core.util.Function val$registryProvider;    java.util.concurrent.atomic.AtomicReference val$ref;    androidx.activity.result.contract.ActivityResultContract val$contract;    androidx.activity.result.ActivityResultCallback val$callback;    androidx.fragment.app.Fragment this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.Fragment$9 {
    java.util.concurrent.atomic.AtomicReference val$ref;    androidx.activity.result.contract.ActivityResultContract val$contract;    androidx.fragment.app.Fragment this$0;}

-keep class androidx.fragment.app.Fragment$AnimationInfo

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.Fragment$AnimationInfo {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.Fragment$InstantiationException {
    <init>(java.lang.String,java.lang.Exception);
}

-keep class androidx.fragment.app.Fragment$OnPreAttachedListener

-keep class androidx.fragment.app.Fragment$OnStartEnterTransitionListener

-keep class androidx.fragment.app.Fragment$SavedState

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.Fragment$SavedState {
    android.os.Bundle mState;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.Fragment$SavedState$1 {
    <init>();
}

-keep class androidx.fragment.app.FragmentActivity

-keepclassmembers,allowobfuscation class androidx.fragment.app.FragmentActivity {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentActivity {
    java.lang.String FRAGMENTS_TAG;    androidx.fragment.app.FragmentController mFragments;    androidx.lifecycle.LifecycleRegistry mFragmentLifecycleRegistry;    boolean mCreated;    boolean mResumed;    boolean mStopped;    <init>(int);
    void init();
    void onActivityResult(int,int,android.content.Intent);
    void supportFinishAfterTransition();
    void setEnterSharedElementCallback(androidx.core.app.SharedElementCallback);
    void setExitSharedElementCallback(androidx.core.app.SharedElementCallback);
    void supportPostponeEnterTransition();
    void supportStartPostponedEnterTransition();
    void onMultiWindowModeChanged(boolean);
    void onPictureInPictureModeChanged(boolean);
    void onConfigurationChanged(android.content.res.Configuration);
    void onCreate(android.os.Bundle);
    boolean onCreatePanelMenu(int,android.view.Menu);
    android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet);
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet);
    android.view.View dispatchFragmentsOnCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet);
    void onDestroy();
    void onLowMemory();
    boolean onMenuItemSelected(int,android.view.MenuItem);
    void onPanelClosed(int,android.view.Menu);
    void onPause();
    void onNewIntent(android.content.Intent);
    void onStateNotSaved();
    void onResume();
    void onPostResume();
    void onResumeFragments();
    boolean onPreparePanel(int,android.view.View,android.view.Menu);
    boolean onPrepareOptionsPanel(android.view.View,android.view.Menu);
    void onStart();
    void onStop();
    void supportInvalidateOptionsMenu();
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]);
    void onAttachFragment(androidx.fragment.app.Fragment);
    androidx.fragment.app.FragmentManager getSupportFragmentManager();
    androidx.loader.app.LoaderManager getSupportLoaderManager();
    void validateRequestPermissionsRequestCode(int);
    void onRequestPermissionsResult(int,java.lang.String[],int[]);
    void startActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int);
    void startActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int,android.os.Bundle);
    void startIntentSenderFromFragment(androidx.fragment.app.Fragment,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle);
    void markFragmentsCreated();
    boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentActivity$1 {
    androidx.fragment.app.FragmentActivity this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentActivity$2 {
    androidx.fragment.app.FragmentActivity this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentActivity$HostCallbacks {
    androidx.fragment.app.FragmentActivity this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentAnim$1 {
    androidx.fragment.app.Fragment val$fragment;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentAnim$2 {
    android.view.ViewGroup val$container;    androidx.fragment.app.Fragment val$fragment;    androidx.fragment.app.FragmentTransition$Callback val$callback;    androidx.core.os.CancellationSignal val$signal;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentAnim$2$1 {
    androidx.fragment.app.FragmentAnim$2 this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentAnim$3 {
    android.view.ViewGroup val$container;    android.view.View val$viewToAnimate;    androidx.fragment.app.Fragment val$fragment;    androidx.fragment.app.FragmentTransition$Callback val$callback;    androidx.core.os.CancellationSignal val$signal;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentAnim$AnimationOrAnimator {
    android.view.animation.Animation animation;    android.animation.Animator animator;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentAnim$EndViewTransitionAnimation {
    android.view.ViewGroup mParent;    android.view.View mChild;}

-keep class androidx.fragment.app.FragmentContainer

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.FragmentContainer {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentController {
    androidx.fragment.app.FragmentHostCallback mHost;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.FragmentFactory {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentHostCallback {
    android.app.Activity mActivity;    android.content.Context mContext;    android.os.Handler mHandler;    int mWindowAnimations;    androidx.fragment.app.FragmentManager mFragmentManager;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentLayoutInflaterFactory {
    androidx.fragment.app.FragmentManager mFragmentManager;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentLayoutInflaterFactory$1 {
    androidx.fragment.app.FragmentStateManager val$fragmentStateManager;    androidx.fragment.app.FragmentLayoutInflaterFactory this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentLifecycleCallbacksDispatcher {
    java.util.concurrent.CopyOnWriteArrayList mLifecycleCallbacks;    androidx.fragment.app.FragmentManager mFragmentManager;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentLifecycleCallbacksDispatcher$FragmentLifecycleCallbacksHolder {
    androidx.fragment.app.FragmentManager$FragmentLifecycleCallbacks mCallback;    boolean mRecursive;}

-keep class androidx.fragment.app.FragmentManager

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.FragmentManager {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentManager {
    java.util.ArrayList mPendingActions;    androidx.fragment.app.FragmentStore mFragmentStore;    androidx.fragment.app.FragmentLayoutInflaterFactory mLayoutInflaterFactory;    androidx.activity.OnBackPressedCallback mOnBackPressedCallback;    java.util.concurrent.atomic.AtomicInteger mBackStackIndex;    java.util.Map mResults;    java.util.Map mResultListeners;    androidx.fragment.app.FragmentTransition$Callback mFragmentTransitionCallback;    androidx.fragment.app.FragmentLifecycleCallbacksDispatcher mLifecycleCallbacksDispatcher;    java.util.concurrent.CopyOnWriteArrayList mOnAttachListeners;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentManager$1 {
    androidx.fragment.app.FragmentManager this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentManager$10 {
    androidx.fragment.app.FragmentManager this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentManager$11 {
    androidx.fragment.app.FragmentManager this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentManager$2 {
    androidx.fragment.app.FragmentManager this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentManager$3 {
    androidx.fragment.app.FragmentManager this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentManager$4 {
    androidx.fragment.app.FragmentManager this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentManager$5 {
    androidx.fragment.app.FragmentManager this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentManager$6 {
    java.lang.String val$requestKey;    androidx.fragment.app.FragmentResultListener val$listener;    androidx.lifecycle.Lifecycle val$lifecycle;    androidx.fragment.app.FragmentManager this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentManager$7 {
    android.view.ViewGroup val$container;    android.view.View val$animatingView;    androidx.fragment.app.Fragment val$fragment;    androidx.fragment.app.FragmentManager this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentManager$8 {
    androidx.fragment.app.Fragment val$parent;    androidx.fragment.app.FragmentManager this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentManager$9 {
    androidx.fragment.app.FragmentManager this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.FragmentManager$FragmentIntentSenderContract {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.FragmentManager$FragmentLifecycleCallbacks {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.FragmentManager$LaunchedFragmentInfo$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentManager$LifecycleAwareResultListener {
    androidx.lifecycle.Lifecycle mLifecycle;    androidx.fragment.app.FragmentResultListener mListener;    androidx.lifecycle.LifecycleEventObserver mObserver;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentManager$PopBackStackState {
    java.lang.String mName;    int mId;    int mFlags;    androidx.fragment.app.FragmentManager this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentManager$StartEnterTransitionListener {
    boolean mIsBack;    androidx.fragment.app.BackStackRecord mRecord;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.FragmentManagerImpl {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentManagerNonConfig {
    java.util.Collection mFragments;    java.util.Map mChildNonConfigs;    java.util.Map mViewModelStores;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.FragmentManagerState {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.FragmentManagerState$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentManagerViewModel {
    java.util.HashMap mRetainedFragments;    java.util.HashMap mChildNonConfigs;    java.util.HashMap mViewModelStores;    boolean mStateAutomaticallySaved;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.FragmentManagerViewModel$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentPagerAdapter {
    androidx.fragment.app.FragmentManager mFragmentManager;    int mBehavior;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentState {
    java.lang.String mClassName;    java.lang.String mWho;    boolean mFromLayout;    int mFragmentId;    int mContainerId;    java.lang.String mTag;    boolean mRetainInstance;    boolean mRemoving;    boolean mDetached;    android.os.Bundle mArguments;    boolean mHidden;    int mMaxLifecycleState;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.FragmentState$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentStateManager {
    androidx.fragment.app.FragmentLifecycleCallbacksDispatcher mDispatcher;    androidx.fragment.app.FragmentStore mFragmentStore;    androidx.fragment.app.Fragment mFragment;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentStateManager$1 {
    android.view.View val$fragmentView;    androidx.fragment.app.FragmentStateManager this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentStatePagerAdapter {
    androidx.fragment.app.FragmentManager mFragmentManager;    int mBehavior;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.FragmentStore {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentStore {
    java.util.ArrayList mAdded;    java.util.HashMap mActive;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTabHost {
    java.util.ArrayList mTabs;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTabHost$DummyTabFactory {
    android.content.Context mContext;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.FragmentTabHost$SavedState$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTabHost$TabInfo {
    java.lang.String tag;    java.lang.Class clss;    android.os.Bundle args;}

-keep class androidx.fragment.app.FragmentTransaction

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.FragmentTransaction {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTransaction {
    androidx.fragment.app.FragmentFactory mFragmentFactory;    java.lang.ClassLoader mClassLoader;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.FragmentTransaction$Op {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTransition$1 {
    androidx.fragment.app.FragmentTransition$Callback val$callback;    androidx.fragment.app.Fragment val$outFragment;    androidx.core.os.CancellationSignal val$signal;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTransition$2 {
    java.util.ArrayList val$exitingViews;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTransition$3 {
    androidx.fragment.app.FragmentTransition$Callback val$callback;    androidx.fragment.app.Fragment val$outFragment;    androidx.core.os.CancellationSignal val$signal;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTransition$4 {
    java.lang.Object val$enterTransition;    androidx.fragment.app.FragmentTransitionImpl val$impl;    android.view.View val$nonExistentView;    androidx.fragment.app.Fragment val$inFragment;    java.util.ArrayList val$sharedElementsIn;    java.util.ArrayList val$enteringViews;    java.util.ArrayList val$exitingViews;    java.lang.Object val$exitTransition;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTransition$5 {
    androidx.fragment.app.Fragment val$inFragment;    androidx.fragment.app.Fragment val$outFragment;    boolean val$inIsPop;    androidx.collection.ArrayMap val$inSharedElements;    android.view.View val$epicenterView;    androidx.fragment.app.FragmentTransitionImpl val$impl;    android.graphics.Rect val$epicenter;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTransition$6 {
    androidx.fragment.app.FragmentTransitionImpl val$impl;    androidx.collection.ArrayMap val$nameOverrides;    java.lang.Object val$finalSharedElementTransition;    androidx.fragment.app.FragmentTransition$FragmentContainerTransition val$fragments;    java.util.ArrayList val$sharedElementsIn;    android.view.View val$nonExistentView;    androidx.fragment.app.Fragment val$inFragment;    androidx.fragment.app.Fragment val$outFragment;    boolean val$inIsPop;    java.util.ArrayList val$sharedElementsOut;    java.lang.Object val$enterTransition;    android.graphics.Rect val$inEpicenter;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.FragmentTransition$FragmentContainerTransition {
    <init>();
}

-keepclassmembers,allowobfuscation class androidx.fragment.app.FragmentTransitionCompat21 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTransitionCompat21 {
    boolean canHandle(java.lang.Object);
    java.lang.Object cloneTransition(java.lang.Object);
    java.lang.Object wrapTransitionInSet(java.lang.Object);
    void setSharedElementTargets(java.lang.Object,android.view.View,java.util.ArrayList);
    void setEpicenter(java.lang.Object,android.view.View);
    void addTargets(java.lang.Object,java.util.ArrayList);
    boolean hasSimpleTarget(android.transition.Transition);
    java.lang.Object mergeTransitionsTogether(java.lang.Object,java.lang.Object,java.lang.Object);
    void scheduleHideFragmentView(java.lang.Object,android.view.View,java.util.ArrayList);
    java.lang.Object mergeTransitionsInSequence(java.lang.Object,java.lang.Object,java.lang.Object);
    void beginDelayedTransition(android.view.ViewGroup,java.lang.Object);
    void scheduleRemoveTargets(java.lang.Object,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList);
    void setListenerForTransitionEnd(androidx.fragment.app.Fragment,java.lang.Object,androidx.core.os.CancellationSignal,java.lang.Runnable);
    void swapSharedElementTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList);
    void replaceTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList);
    void addTarget(java.lang.Object,android.view.View);
    void removeTarget(java.lang.Object,android.view.View);
    void setEpicenter(java.lang.Object,android.graphics.Rect);
}

-keep class androidx.fragment.app.Fragment

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTransitionCompat21$1 {
    android.graphics.Rect val$epicenter;    androidx.fragment.app.FragmentTransitionCompat21 this$0;    <init>(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect);
    android.graphics.Rect onGetEpicenter(android.transition.Transition);
}

-keep class androidx.fragment.app.FragmentTransitionCompat21

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTransitionCompat21$2 {
    android.view.View val$fragmentView;    java.util.ArrayList val$exitingViews;    androidx.fragment.app.FragmentTransitionCompat21 this$0;    <init>(androidx.fragment.app.FragmentTransitionCompat21,android.view.View,java.util.ArrayList);
    void onTransitionStart(android.transition.Transition);
    void onTransitionEnd(android.transition.Transition);
    void onTransitionCancel(android.transition.Transition);
    void onTransitionPause(android.transition.Transition);
    void onTransitionResume(android.transition.Transition);
}

-keep class androidx.fragment.app.FragmentTransitionCompat21

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTransitionCompat21$3 {
    java.lang.Object val$enterTransition;    java.util.ArrayList val$enteringViews;    java.lang.Object val$exitTransition;    java.util.ArrayList val$exitingViews;    java.lang.Object val$sharedElementTransition;    java.util.ArrayList val$sharedElementsIn;    androidx.fragment.app.FragmentTransitionCompat21 this$0;    <init>(androidx.fragment.app.FragmentTransitionCompat21,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList);
    void onTransitionStart(android.transition.Transition);
    void onTransitionEnd(android.transition.Transition);
    void onTransitionCancel(android.transition.Transition);
    void onTransitionPause(android.transition.Transition);
    void onTransitionResume(android.transition.Transition);
}

-keep class androidx.fragment.app.FragmentTransitionCompat21

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTransitionCompat21$4 {
    java.lang.Runnable val$transitionCompleteRunnable;    androidx.fragment.app.FragmentTransitionCompat21 this$0;    <init>(androidx.fragment.app.FragmentTransitionCompat21,java.lang.Runnable);
    void onTransitionStart(android.transition.Transition);
    void onTransitionEnd(android.transition.Transition);
    void onTransitionCancel(android.transition.Transition);
    void onTransitionPause(android.transition.Transition);
    void onTransitionResume(android.transition.Transition);
}

-keep class androidx.fragment.app.FragmentTransitionCompat21

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTransitionCompat21$5 {
    android.graphics.Rect val$epicenter;    androidx.fragment.app.FragmentTransitionCompat21 this$0;    <init>(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect);
    android.graphics.Rect onGetEpicenter(android.transition.Transition);
}

-keep class androidx.fragment.app.FragmentTransitionCompat21

-keepclassmembers,allowobfuscation class androidx.fragment.app.FragmentTransitionImpl {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTransitionImpl {
    boolean canHandle(java.lang.Object);
    java.lang.Object cloneTransition(java.lang.Object);
    java.lang.Object wrapTransitionInSet(java.lang.Object);
    void setSharedElementTargets(java.lang.Object,android.view.View,java.util.ArrayList);
    void setEpicenter(java.lang.Object,android.view.View);
    void getBoundsOnScreen(android.view.View,android.graphics.Rect);
    void addTargets(java.lang.Object,java.util.ArrayList);
    java.lang.Object mergeTransitionsTogether(java.lang.Object,java.lang.Object,java.lang.Object);
    void scheduleHideFragmentView(java.lang.Object,android.view.View,java.util.ArrayList);
    java.lang.Object mergeTransitionsInSequence(java.lang.Object,java.lang.Object,java.lang.Object);
    void beginDelayedTransition(android.view.ViewGroup,java.lang.Object);
    java.util.ArrayList prepareSetNameOverridesReordered(java.util.ArrayList);
    void setNameOverridesReordered(android.view.View,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.Map);
    void captureTransitioningViews(java.util.ArrayList,android.view.View);
    void findNamedViews(java.util.Map,android.view.View);
    void setNameOverridesOrdered(android.view.View,java.util.ArrayList,java.util.Map);
    void scheduleRemoveTargets(java.lang.Object,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList);
    void setListenerForTransitionEnd(androidx.fragment.app.Fragment,java.lang.Object,androidx.core.os.CancellationSignal,java.lang.Runnable);
    void swapSharedElementTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList);
    void replaceTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList);
    void addTarget(java.lang.Object,android.view.View);
    void removeTarget(java.lang.Object,android.view.View);
    void setEpicenter(java.lang.Object,android.graphics.Rect);
    void scheduleNameReset(android.view.ViewGroup,java.util.ArrayList,java.util.Map);
    void bfsAddViewChildren(java.util.List,android.view.View);
    boolean containedBeforeIndex(java.util.List,android.view.View,int);
    boolean isNullOrEmpty(java.util.List);
    java.lang.String findKeyForValue(java.util.Map,java.lang.String);
}

-keep class androidx.fragment.app.Fragment

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTransitionImpl$1 {
    int val$numSharedElements;    java.util.ArrayList val$sharedElementsIn;    java.util.ArrayList val$inNames;    java.util.ArrayList val$sharedElementsOut;    java.util.ArrayList val$outNames;    androidx.fragment.app.FragmentTransitionImpl this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTransitionImpl$2 {
    java.util.ArrayList val$sharedElementsIn;    java.util.Map val$nameOverrides;    androidx.fragment.app.FragmentTransitionImpl this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentTransitionImpl$3 {
    java.util.ArrayList val$sharedElementsIn;    java.util.Map val$nameOverrides;    androidx.fragment.app.FragmentTransitionImpl this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.FragmentViewLifecycleOwner {
    androidx.fragment.app.Fragment mFragment;    androidx.lifecycle.ViewModelStore mViewModelStore;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.fragment.app.ListFragment {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.ListFragment {
    android.os.Handler mHandler;    java.lang.Runnable mRequestFocus;    android.widget.AdapterView$OnItemClickListener mOnClickListener;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.ListFragment$1 {
    androidx.fragment.app.ListFragment this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.ListFragment$2 {
    androidx.fragment.app.ListFragment this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.LogWriter {
    java.lang.String mTag;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.SpecialEffectsController {
    android.view.ViewGroup mContainer;    java.util.ArrayList mPendingOperations;    java.util.ArrayList mRunningOperations;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.SpecialEffectsController$1 {
    androidx.fragment.app.SpecialEffectsController$FragmentStateManagerOperation val$operation;    androidx.fragment.app.SpecialEffectsController this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.SpecialEffectsController$2 {
    androidx.fragment.app.SpecialEffectsController$FragmentStateManagerOperation val$operation;    androidx.fragment.app.SpecialEffectsController this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.SpecialEffectsController$FragmentStateManagerOperation {
    androidx.fragment.app.FragmentStateManager mFragmentStateManager;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.SpecialEffectsController$Operation {
    androidx.fragment.app.Fragment mFragment;    java.util.List mCompletionListeners;    java.util.HashSet mSpecialEffectsSignals;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.fragment.app.SpecialEffectsController$Operation$1 {
    androidx.fragment.app.SpecialEffectsController$Operation this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.interpolator.view.animation.FastOutLinearInInterpolator {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.interpolator.view.animation.FastOutSlowInInterpolator {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.interpolator.view.animation.LinearOutSlowInInterpolator {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.interpolator.view.animation.LookupTableInterpolator {
    float[] mValues;    float mStepSize;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.AbstractSavedStateViewModelFactory {
    androidx.savedstate.SavedStateRegistry mSavedStateRegistry;    androidx.lifecycle.Lifecycle mLifecycle;    android.os.Bundle mDefaultArgs;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.ClassesInfoCache {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.ClassesInfoCache {
    java.util.Map mCallbackMap;    java.util.Map mHasLifecycleMethods;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.ClassesInfoCache$CallbackInfo {
    java.util.Map mEventToHandlers;    java.util.Map mHandlerToEvent;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.ClassesInfoCache$MethodReference {
    int mCallType;    java.lang.reflect.Method mMethod;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.CompositeGeneratedAdaptersObserver {
    androidx.lifecycle.GeneratedAdapter[] mGeneratedAdapters;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.ComputableLiveData {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.ComputableLiveData {
    java.util.concurrent.Executor mExecutor;    androidx.lifecycle.LiveData mLiveData;    java.util.concurrent.atomic.AtomicBoolean mInvalid;    java.util.concurrent.atomic.AtomicBoolean mComputing;    java.lang.Runnable mRefreshRunnable;    java.lang.Runnable mInvalidationRunnable;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.ComputableLiveData$1 {
    androidx.lifecycle.ComputableLiveData this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.ComputableLiveData$2 {
    androidx.lifecycle.ComputableLiveData this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.ComputableLiveData$3 {
    androidx.lifecycle.ComputableLiveData this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.DispatchQueue {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.DispatchQueue {
    java.util.Queue queue;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.DispatchQueue$dispatchAndEnqueue$1$1 {
    androidx.lifecycle.DispatchQueue this$0;    java.lang.Runnable $runnable;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.FlowExtKt$flowWithLifecycle$1 {
    androidx.lifecycle.Lifecycle $lifecycle;    androidx.lifecycle.Lifecycle$State $minActiveState;    kotlinx.coroutines.flow.Flow $this_flowWithLifecycle;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.FlowExtKt$flowWithLifecycle$1$1 {
    kotlinx.coroutines.flow.Flow $this_flowWithLifecycle;    kotlinx.coroutines.channels.ProducerScope $$this$callbackFlow;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.FlowExtKt$flowWithLifecycle$1$1$invokeSuspend$$inlined$collect$1 {
    kotlinx.coroutines.channels.ProducerScope $$this$callbackFlow$inlined;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.FullLifecycleObserverAdapter {
    androidx.lifecycle.FullLifecycleObserver mFullLifecycleObserver;    androidx.lifecycle.LifecycleEventObserver mLifecycleEventObserver;}

-keep class androidx.lifecycle.Lifecycle

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.Lifecycle {
    <init>();
}

-keep class androidx.lifecycle.Lifecycle$State

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.LifecycleController {
    androidx.lifecycle.Lifecycle lifecycle;    androidx.lifecycle.Lifecycle$State minState;    androidx.lifecycle.DispatchQueue dispatchQueue;    androidx.lifecycle.LifecycleEventObserver observer;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.LifecycleController$observer$1 {
    androidx.lifecycle.LifecycleController this$0;    kotlinx.coroutines.Job $parentJob;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.LifecycleCoroutineScope {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.LifecycleCoroutineScope$launchWhenCreated$1 {
    androidx.lifecycle.LifecycleCoroutineScope this$0;    kotlin.jvm.functions.Function2 $block;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.LifecycleCoroutineScope$launchWhenResumed$1 {
    androidx.lifecycle.LifecycleCoroutineScope this$0;    kotlin.jvm.functions.Function2 $block;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.LifecycleCoroutineScope$launchWhenStarted$1 {
    androidx.lifecycle.LifecycleCoroutineScope this$0;    kotlin.jvm.functions.Function2 $block;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.LifecycleCoroutineScopeImpl {
    androidx.lifecycle.Lifecycle lifecycle;    kotlin.coroutines.CoroutineContext coroutineContext;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.LifecycleCoroutineScopeImpl$register$1 {
    androidx.lifecycle.LifecycleCoroutineScopeImpl this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.LifecycleDestroyedException {
    <init>();
}

-keep class androidx.lifecycle.LifecycleOwner

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.LifecycleRegistry {
    java.lang.ref.WeakReference mLifecycleOwner;    boolean mEnforceMainThread;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.Lifecycling$1 {
    androidx.lifecycle.LifecycleEventObserver val$observer;}

-keep class androidx.lifecycle.LiveData

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.LiveData {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.LiveData {
    java.lang.Object mDataLock;    java.lang.Runnable mPostValueRunnable;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.LiveData$1 {
    androidx.lifecycle.LiveData this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.LiveData$AlwaysActiveObserver {
    androidx.lifecycle.LiveData this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.LiveData$LifecycleBoundObserver {
    androidx.lifecycle.LifecycleOwner mOwner;    androidx.lifecycle.LiveData this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.LiveData$ObserverWrapper {
    androidx.lifecycle.Observer mObserver;    androidx.lifecycle.LiveData this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.MediatorLiveData {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.MediatorLiveData$Source {
    androidx.lifecycle.LiveData mLiveData;    androidx.lifecycle.Observer mObserver;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.MethodCallsLogger {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.MutableLiveData {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.PausingDispatcher {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.PausingDispatcher {
    androidx.lifecycle.DispatchQueue dispatchQueue;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.PausingDispatcherKt$whenStateAtLeast$2 {
    androidx.lifecycle.Lifecycle $this_whenStateAtLeast;    androidx.lifecycle.Lifecycle$State $minState;    kotlin.jvm.functions.Function2 $block;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.ReflectiveGenericLifecycleObserver {
    java.lang.Object mWrapped;    androidx.lifecycle.ClassesInfoCache$CallbackInfo mInfo;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.RepeatOnLifecycleKt$repeatOnLifecycle$3 {
    androidx.lifecycle.Lifecycle $this_repeatOnLifecycle;    androidx.lifecycle.Lifecycle$State $state;    kotlin.jvm.functions.Function2 $block;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.RepeatOnLifecycleKt$repeatOnLifecycle$3$1 {
    androidx.lifecycle.Lifecycle $this_repeatOnLifecycle;    androidx.lifecycle.Lifecycle$State $state;    kotlinx.coroutines.CoroutineScope $$this$coroutineScope;    kotlin.jvm.functions.Function2 $block;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.RepeatOnLifecycleKt$repeatOnLifecycle$3$1$1$1 {
    androidx.lifecycle.Lifecycle$Event $startWorkEvent;    kotlin.jvm.internal.Ref$ObjectRef $launchedJob;    kotlinx.coroutines.CoroutineScope $$this$coroutineScope;    androidx.lifecycle.Lifecycle$Event $cancelWorkEvent;    kotlinx.coroutines.CancellableContinuation $cont;    kotlinx.coroutines.sync.Mutex $mutex;    kotlin.jvm.functions.Function2 $block;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.RepeatOnLifecycleKt$repeatOnLifecycle$3$1$1$1$1 {
    kotlinx.coroutines.sync.Mutex $mutex;    kotlin.jvm.functions.Function2 $block;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.RepeatOnLifecycleKt$repeatOnLifecycle$3$1$1$1$1$1$1 {
    kotlin.jvm.functions.Function2 $block;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.ReportFragment {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.ReportFragment$LifecycleCallbacks {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.SavedStateHandle {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.SavedStateHandle {
    java.util.Map mRegular;    java.util.Map mSavedStateProviders;    java.util.Map mLiveDatas;    androidx.savedstate.SavedStateRegistry$SavedStateProvider mSavedStateProvider;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.SavedStateHandle$1 {
    androidx.lifecycle.SavedStateHandle this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.SavedStateHandleController {
    java.lang.String mKey;    androidx.lifecycle.SavedStateHandle mHandle;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.SavedStateHandleController$1 {
    androidx.lifecycle.Lifecycle val$lifecycle;    androidx.savedstate.SavedStateRegistry val$registry;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.SavedStateHandleController$OnRecreation {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.SavedStateViewModelFactory {
    android.app.Application mApplication;    androidx.lifecycle.ViewModelProvider$Factory mFactory;    android.os.Bundle mDefaultArgs;    androidx.lifecycle.Lifecycle mLifecycle;    androidx.savedstate.SavedStateRegistry mSavedStateRegistry;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.SingleGeneratedAdapterObserver {
    androidx.lifecycle.GeneratedAdapter mGeneratedAdapter;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.Transformations$1 {
    androidx.lifecycle.MediatorLiveData val$result;    androidx.arch.core.util.Function val$mapFunction;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.Transformations$2 {
    androidx.arch.core.util.Function val$switchMapFunction;    androidx.lifecycle.MediatorLiveData val$result;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.Transformations$2$1 {
    androidx.lifecycle.Transformations$2 this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.ViewModel {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.ViewModel {
    java.util.Map mBagOfTags;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.ViewModelProvider {
    androidx.lifecycle.ViewModelProvider$Factory mFactory;    androidx.lifecycle.ViewModelStore mViewModelStore;}

-keep class androidx.lifecycle.ViewModelProvider$Factory

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.ViewModelProvider$KeyedFactory {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.ViewModelProvider$NewInstanceFactory {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.ViewModelProvider$OnRequeryFactory {
    <init>();
}

-keep class androidx.lifecycle.ViewModelStore

-keepclassmembers,allowoptimization,allowobfuscation class androidx.lifecycle.ViewModelStore {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.ViewModelStore {
    java.util.HashMap mMap;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$1 {
    androidx.lifecycle.Lifecycle $this_suspendWithStateAtLeastUnchecked;    androidx.lifecycle.WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$observer$1 $observer;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$2 {
    kotlinx.coroutines.CoroutineDispatcher $lifecycleDispatcher;    androidx.lifecycle.Lifecycle $this_suspendWithStateAtLeastUnchecked;    androidx.lifecycle.WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$observer$1 $observer;    void invoke(java.lang.Throwable);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$2$1 {
    androidx.lifecycle.Lifecycle $this_suspendWithStateAtLeastUnchecked;    androidx.lifecycle.WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$observer$1 $observer;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.WithLifecycleStateKt$suspendWithStateAtLeastUnchecked$2$observer$1 {
    androidx.lifecycle.Lifecycle$State $state;    androidx.lifecycle.Lifecycle $this_suspendWithStateAtLeastUnchecked;    kotlinx.coroutines.CancellableContinuation $co;    kotlin.jvm.functions.Function0 $block;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.lifecycle.WithLifecycleStateKt$withStateAtLeastUnchecked$2 {
    kotlin.jvm.functions.Function0 $block;}

-keep class androidx.loader.app.LoaderManager

-keepclassmembers,allowoptimization,allowobfuscation class androidx.loader.app.LoaderManager {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.loader.app.LoaderManagerImpl {
    androidx.lifecycle.LifecycleOwner mLifecycleOwner;    androidx.loader.app.LoaderManagerImpl$LoaderViewModel mLoaderViewModel;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.loader.app.LoaderManagerImpl$LoaderInfo {
    int mId;    android.os.Bundle mArgs;    androidx.loader.content.Loader mLoader;    androidx.lifecycle.LifecycleOwner mLifecycleOwner;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.loader.app.LoaderManagerImpl$LoaderObserver {
    androidx.loader.content.Loader mLoader;    androidx.loader.app.LoaderManager$LoaderCallbacks mCallback;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.loader.app.LoaderManagerImpl$LoaderViewModel {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.loader.app.LoaderManagerImpl$LoaderViewModel$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.loader.content.AsyncTaskLoader {
    java.util.concurrent.Executor mExecutor;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.loader.content.AsyncTaskLoader$LoadTask {
    java.util.concurrent.CountDownLatch mDone;    androidx.loader.content.AsyncTaskLoader this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.loader.content.CursorLoader {
    androidx.loader.content.Loader$ForceLoadContentObserver mObserver;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.loader.content.Loader$ForceLoadContentObserver {
    androidx.loader.content.Loader this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.loader.content.ModernAsyncTask {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.loader.content.ModernAsyncTask {
    androidx.loader.content.ModernAsyncTask$WorkerRunnable mWorker;    java.util.concurrent.FutureTask mFuture;    java.util.concurrent.atomic.AtomicBoolean mCancelled;    java.util.concurrent.atomic.AtomicBoolean mTaskInvoked;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.loader.content.ModernAsyncTask$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.loader.content.ModernAsyncTask$1 {
    java.util.concurrent.atomic.AtomicInteger mCount;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.loader.content.ModernAsyncTask$2 {
    androidx.loader.content.ModernAsyncTask this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.loader.content.ModernAsyncTask$3 {
    androidx.loader.content.ModernAsyncTask this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.loader.content.ModernAsyncTask$AsyncTaskResult {
    androidx.loader.content.ModernAsyncTask mTask;    java.lang.Object[] mData;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.loader.content.ModernAsyncTask$InternalHandler {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.loader.content.ModernAsyncTask$WorkerRunnable {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.savedstate.Recreator {
    androidx.savedstate.SavedStateRegistryOwner mOwner;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.savedstate.Recreator$SavedStateProvider {
    java.util.Set mClasses;}

-keep class androidx.savedstate.SavedStateRegistry

-keepclassmembers,allowoptimization,allowobfuscation class androidx.savedstate.SavedStateRegistry {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.savedstate.SavedStateRegistry$1 {
    androidx.savedstate.SavedStateRegistry this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.savedstate.SavedStateRegistryController {
    androidx.savedstate.SavedStateRegistryOwner mOwner;    androidx.savedstate.SavedStateRegistry mRegistry;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.tracing.TraceApi18Impl {
    <init>();
    void beginSection(java.lang.String);
    void endSection();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.tracing.TraceApi29Impl {
    <init>();
    void beginAsyncSection(java.lang.String,int);
    void endAsyncSection(java.lang.String,int);
    void setCounter(java.lang.String,int);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.Animatable2Compat {
    void registerAnimationCallback(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback);
    boolean unregisterAnimationCallback(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback);
    void clearAnimationCallbacks();
}

-keep class androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback

-keep class androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback

-keepclassmembers,allowobfuscation class androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback {
    android.graphics.drawable.Animatable2$AnimationCallback mPlatformCallback;    void onAnimationStart(android.graphics.drawable.Drawable);
    void onAnimationEnd(android.graphics.drawable.Drawable);
    android.graphics.drawable.Animatable2$AnimationCallback getPlatformCallback();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback$1 {
    androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback this$0;    <init>(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback);
    void onAnimationStart(android.graphics.drawable.Drawable);
    void onAnimationEnd(android.graphics.drawable.Drawable);
}

-keep class androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback

-keep class androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat

-keepclassmembers,allowobfuscation class androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat {
    java.lang.String LOGTAG;    java.lang.String ANIMATED_VECTOR;    java.lang.String TARGET;    boolean DBG_ANIMATION_VECTOR_DRAWABLE;    androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState mAnimatedVectorState;    android.content.Context mContext;    android.animation.ArgbEvaluator mArgbEvaluator;    androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState mCachedConstantStateDelegate;    android.animation.Animator$AnimatorListener mAnimatorListener;    java.util.ArrayList mAnimationCallbacks;    android.graphics.drawable.Drawable$Callback mCallback;    <init>(android.content.Context);
    <init>(android.content.Context,androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState,android.content.res.Resources);
    android.graphics.drawable.Drawable mutate();
    androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat create(android.content.Context,int);
    androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat createFromXmlInner(android.content.Context,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme);
    android.graphics.drawable.Drawable$ConstantState getConstantState();
    int getChangingConfigurations();
    void draw(android.graphics.Canvas);
    void onBoundsChange(android.graphics.Rect);
    boolean onStateChange(int[]);
    boolean onLevelChange(int);
    int getAlpha();
    void setAlpha(int);
    void setColorFilter(android.graphics.ColorFilter);
    android.graphics.ColorFilter getColorFilter();
    void setTint(int);
    void setTintList(android.content.res.ColorStateList);
    void setTintMode(android.graphics.PorterDuff$Mode);
    boolean setVisible(boolean,boolean);
    boolean isStateful();
    int getOpacity();
    int getIntrinsicWidth();
    int getIntrinsicHeight();
    boolean isAutoMirrored();
    void setAutoMirrored(boolean);
    void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme);
    void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet);
    void applyTheme(android.content.res.Resources$Theme);
    boolean canApplyTheme();
    void setupColorAnimator(android.animation.Animator);
    void setupAnimatorsForTarget(java.lang.String,android.animation.Animator);
    boolean isRunning();
    void start();
    void stop();
    boolean unregisterPlatformCallback(android.graphics.drawable.AnimatedVectorDrawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback);
    void registerAnimationCallback(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback);
    void registerPlatformCallback(android.graphics.drawable.AnimatedVectorDrawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback);
    void removeAnimatorSetListener();
    boolean unregisterAnimationCallback(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback);
    void clearAnimationCallbacks();
    void registerAnimationCallback(android.graphics.drawable.Drawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback);
    boolean unregisterAnimationCallback(android.graphics.drawable.Drawable,androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback);
    void clearAnimationCallbacks(android.graphics.drawable.Drawable);
    boolean setState(int[]);
    void setChangingConfigurations(int);
    android.graphics.Region getTransparentRegion();
    int[] getState();
    boolean getPadding(android.graphics.Rect);
    int getMinimumHeight();
    int getMinimumWidth();
    android.graphics.drawable.Drawable getCurrent();
    void clearColorFilter();
    void jumpToCurrentState();
    void setFilterBitmap(boolean);
    void setHotspotBounds(int,int,int,int);
    void setHotspot(float,float);
    void setColorFilter(int,android.graphics.PorterDuff$Mode);
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$1 {
    androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat this$0;    <init>(androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat);
    void invalidateDrawable(android.graphics.drawable.Drawable);
    void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long);
    void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable);
}

-keep class androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$2 {
    androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat this$0;    <init>(androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat);
    void onAnimationStart(android.animation.Animator);
    void onAnimationEnd(android.animation.Animator);
}

-keep class androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat

-keep class androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState {
    int mChangingConfigurations;    androidx.vectordrawable.graphics.drawable.VectorDrawableCompat mVectorDrawable;    android.animation.AnimatorSet mAnimatorSet;    java.util.ArrayList mAnimators;    androidx.collection.ArrayMap mTargetNameMap;    <init>(android.content.Context,androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableCompatState,android.graphics.drawable.Drawable$Callback,android.content.res.Resources);
    android.graphics.drawable.Drawable newDrawable();
    android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
    int getChangingConfigurations();
    void setupAnimatorSet();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$AnimatedVectorDrawableDelegateState {
    android.graphics.drawable.Drawable$ConstantState mDelegateState;    <init>(android.graphics.drawable.Drawable$ConstantState);
    android.graphics.drawable.Drawable newDrawable();
    android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
    android.graphics.drawable.Drawable newDrawable(android.content.res.Resources,android.content.res.Resources$Theme);
    boolean canApplyTheme();
    int getChangingConfigurations();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.AnimationUtilsCompat {
    android.view.animation.Interpolator loadInterpolator(android.content.Context,int);
    android.view.animation.Interpolator createInterpolatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser);
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat {
    java.lang.String TAG;    int TOGETHER;    int MAX_NUM_POINTS;    int VALUE_TYPE_FLOAT;    int VALUE_TYPE_INT;    int VALUE_TYPE_PATH;    int VALUE_TYPE_COLOR;    int VALUE_TYPE_UNDEFINED;    boolean DBG_ANIMATOR_INFLATER;    android.animation.Animator loadAnimator(android.content.Context,int);
    android.animation.Animator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int);
    android.animation.Animator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,int,float);
    android.animation.PropertyValuesHolder getPVH(android.content.res.TypedArray,int,int,int,java.lang.String);
    void parseAnimatorFromTypeArray(android.animation.ValueAnimator,android.content.res.TypedArray,android.content.res.TypedArray,float,org.xmlpull.v1.XmlPullParser);
    void setupObjectAnimator(android.animation.ValueAnimator,android.content.res.TypedArray,int,float,org.xmlpull.v1.XmlPullParser);
    void setupPathMotion(android.graphics.Path,android.animation.ObjectAnimator,float,java.lang.String,java.lang.String);
    android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,float);
    android.animation.Animator createAnimatorFromXml(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.animation.AnimatorSet,int,float);
    android.animation.PropertyValuesHolder[] loadValues(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet);
    int inferValueTypeOfKeyframe(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser);
    int inferValueTypeFromValues(android.content.res.TypedArray,int,int);
    void dumpKeyframes(java.lang.Object[],java.lang.String);
    android.animation.PropertyValuesHolder loadPvh(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser,java.lang.String,int);
    android.animation.Keyframe createNewKeyframe(android.animation.Keyframe,float);
    void distributeKeyframes(android.animation.Keyframe[],float,int,int);
    android.animation.Keyframe loadKeyframe(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int,org.xmlpull.v1.XmlPullParser);
    android.animation.ObjectAnimator loadObjectAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,float,org.xmlpull.v1.XmlPullParser);
    android.animation.ValueAnimator loadAnimator(android.content.Context,android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,android.animation.ValueAnimator,float,org.xmlpull.v1.XmlPullParser);
    boolean isColorType(int);
    <init>();
}

-keepclassmembers,allowobfuscation class androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat$PathDataEvaluator {
    androidx.core.graphics.PathParser$PathDataNode[] mNodeArray;    <init>(androidx.core.graphics.PathParser$PathDataNode[]);
    androidx.core.graphics.PathParser$PathDataNode[] evaluate(float,androidx.core.graphics.PathParser$PathDataNode[],androidx.core.graphics.PathParser$PathDataNode[]);
    java.lang.Object evaluate(float,java.lang.Object,java.lang.Object);
}

-keep class androidx.core.graphics.PathParser$PathDataNode

-keepclassmembers,allowoptimization,allowobfuscation class androidx.vectordrawable.graphics.drawable.ArgbEvaluator {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.PathInterpolatorCompat {
    float PRECISION;    int MAX_NUM_POINTS;    double EPSILON;    float[] mX;    float[] mY;    <init>(android.content.Context,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser);
    <init>(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,org.xmlpull.v1.XmlPullParser);
    void parseInterpolatorFromTypeArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser);
    void initQuad(float,float);
    void initCubic(float,float,float,float);
    void initPath(android.graphics.Path);
    float getInterpolation(float);
}

-keepclassmembers,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCommon {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCommon {
    android.graphics.drawable.Drawable mDelegateDrawable;    void setColorFilter(int,android.graphics.PorterDuff$Mode);
    boolean onLevelChange(int);
    void onBoundsChange(android.graphics.Rect);
    void setHotspot(float,float);
    void setHotspotBounds(int,int,int,int);
    void setFilterBitmap(boolean);
    void jumpToCurrentState();
    void applyTheme(android.content.res.Resources$Theme);
    void clearColorFilter();
    android.graphics.drawable.Drawable getCurrent();
    int getMinimumWidth();
    int getMinimumHeight();
    boolean getPadding(android.graphics.Rect);
    int[] getState();
    android.graphics.Region getTransparentRegion();
    void setChangingConfigurations(int);
    boolean setState(int[]);
}

-keepclassmembers,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat {
    java.lang.String LOGTAG;    android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE;    java.lang.String SHAPE_CLIP_PATH;    java.lang.String SHAPE_GROUP;    java.lang.String SHAPE_PATH;    java.lang.String SHAPE_VECTOR;    int LINECAP_BUTT;    int LINECAP_ROUND;    int LINECAP_SQUARE;    int LINEJOIN_MITER;    int LINEJOIN_ROUND;    int LINEJOIN_BEVEL;    int MAX_CACHED_BITMAP_SIZE;    boolean DBG_VECTOR_DRAWABLE;    androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState mVectorState;    android.graphics.PorterDuffColorFilter mTintFilter;    android.graphics.ColorFilter mColorFilter;    boolean mMutated;    boolean mAllowCaching;    android.graphics.drawable.Drawable$ConstantState mCachedConstantStateDelegate;    float[] mTmpFloats;    android.graphics.Matrix mTmpMatrix;    android.graphics.Rect mTmpBounds;    <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState);
    android.graphics.drawable.Drawable mutate();
    java.lang.Object getTargetByName(java.lang.String);
    android.graphics.drawable.Drawable$ConstantState getConstantState();
    void draw(android.graphics.Canvas);
    int getAlpha();
    void setAlpha(int);
    void setColorFilter(android.graphics.ColorFilter);
    android.graphics.ColorFilter getColorFilter();
    android.graphics.PorterDuffColorFilter updateTintFilter(android.graphics.PorterDuffColorFilter,android.content.res.ColorStateList,android.graphics.PorterDuff$Mode);
    void setTint(int);
    void setTintList(android.content.res.ColorStateList);
    void setTintMode(android.graphics.PorterDuff$Mode);
    boolean isStateful();
    boolean onStateChange(int[]);
    int getOpacity();
    int getIntrinsicWidth();
    int getIntrinsicHeight();
    boolean canApplyTheme();
    boolean isAutoMirrored();
    void setAutoMirrored(boolean);
    float getPixelSize();
    androidx.vectordrawable.graphics.drawable.VectorDrawableCompat create(android.content.res.Resources,int,android.content.res.Resources$Theme);
    androidx.vectordrawable.graphics.drawable.VectorDrawableCompat createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme);
    int applyAlpha(int,float);
    void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet);
    void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme);
    android.graphics.PorterDuff$Mode parseTintModeCompat(int,android.graphics.PorterDuff$Mode);
    void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme);
    void inflateInternal(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme);
    void printGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,int);
    void setAllowCaching(boolean);
    boolean needMirroring();
    void onBoundsChange(android.graphics.Rect);
    int getChangingConfigurations();
    void invalidateSelf();
    void scheduleSelf(java.lang.Runnable,long);
    boolean setVisible(boolean,boolean);
    void unscheduleSelf(java.lang.Runnable);
    boolean setState(int[]);
    void setChangingConfigurations(int);
    android.graphics.Region getTransparentRegion();
    int[] getState();
    boolean getPadding(android.graphics.Rect);
    int getMinimumHeight();
    int getMinimumWidth();
    android.graphics.drawable.Drawable getCurrent();
    void clearColorFilter();
    void applyTheme(android.content.res.Resources$Theme);
    void jumpToCurrentState();
    void setFilterBitmap(boolean);
    void setHotspotBounds(int,int,int,int);
    void setHotspot(float,float);
    void setColorFilter(int,android.graphics.PorterDuff$Mode);
    void <clinit>();
}

-keep class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState

-keepclassmembers,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath {
    <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath);
    void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser);
    void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser);
    boolean isClipPath();
}

-keep class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath

-keepclassmembers,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath {
    int[] mThemeAttrs;    androidx.core.content.res.ComplexColorCompat mStrokeColor;    float mStrokeWidth;    androidx.core.content.res.ComplexColorCompat mFillColor;    float mStrokeAlpha;    float mFillAlpha;    float mTrimPathStart;    float mTrimPathEnd;    float mTrimPathOffset;    android.graphics.Paint$Cap mStrokeLineCap;    android.graphics.Paint$Join mStrokeLineJoin;    float mStrokeMiterlimit;    <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath);
    android.graphics.Paint$Cap getStrokeLineCap(int,android.graphics.Paint$Cap);
    android.graphics.Paint$Join getStrokeLineJoin(int,android.graphics.Paint$Join);
    boolean canApplyTheme();
    void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser);
    void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme);
    boolean isStateful();
    boolean onStateChanged(int[]);
    void applyTheme(android.content.res.Resources$Theme);
    int getStrokeColor();
    void setStrokeColor(int);
    float getStrokeWidth();
    void setStrokeWidth(float);
    float getStrokeAlpha();
    void setStrokeAlpha(float);
    int getFillColor();
    void setFillColor(int);
    float getFillAlpha();
    void setFillAlpha(float);
    float getTrimPathStart();
    void setTrimPathStart(float);
    float getTrimPathEnd();
    void setTrimPathEnd(float);
    float getTrimPathOffset();
    void setTrimPathOffset(float);
}

-keep class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath

-keep class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup {
    android.graphics.Matrix mStackedMatrix;    java.util.ArrayList mChildren;    float mRotate;    float mPivotX;    float mPivotY;    float mScaleX;    float mScaleY;    float mTranslateX;    float mTranslateY;    android.graphics.Matrix mLocalMatrix;    int mChangingConfigurations;    int[] mThemeAttrs;    java.lang.String mGroupName;    <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.collection.ArrayMap);
    java.lang.String getGroupName();
    android.graphics.Matrix getLocalMatrix();
    void inflate(android.content.res.Resources,android.util.AttributeSet,android.content.res.Resources$Theme,org.xmlpull.v1.XmlPullParser);
    void updateStateFromTypedArray(android.content.res.TypedArray,org.xmlpull.v1.XmlPullParser);
    void updateLocalMatrix();
    float getRotation();
    void setRotation(float);
    float getPivotX();
    void setPivotX(float);
    float getPivotY();
    void setPivotY(float);
    float getScaleX();
    void setScaleX(float);
    float getScaleY();
    void setScaleY(float);
    float getTranslateX();
    void setTranslateX(float);
    float getTranslateY();
    void setTranslateY(float);
    boolean isStateful();
    boolean onStateChanged(int[]);
}

-keepclassmembers,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VObject {
    <init>();
    boolean isStateful();
    boolean onStateChanged(int[]);
    <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$1);
}

-keep class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$1

-keepclassmembers,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath {
    int FILL_TYPE_WINDING;    androidx.core.graphics.PathParser$PathDataNode[] mNodes;    java.lang.String mPathName;    int mFillRule;    int mChangingConfigurations;    void printVPath(int);
    java.lang.String nodesToString(androidx.core.graphics.PathParser$PathDataNode[]);
    <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath);
    void toPath(android.graphics.Path);
    java.lang.String getPathName();
    boolean canApplyTheme();
    void applyTheme(android.content.res.Resources$Theme);
    boolean isClipPath();
    androidx.core.graphics.PathParser$PathDataNode[] getPathData();
    void setPathData(androidx.core.graphics.PathParser$PathDataNode[]);
}

-keep class androidx.core.graphics.PathParser$PathDataNode

-keepclassmembers,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer {
    android.graphics.Path mPath;    android.graphics.Path mRenderPath;    android.graphics.Matrix IDENTITY_MATRIX;    android.graphics.Matrix mFinalPathMatrix;    android.graphics.Paint mStrokePaint;    android.graphics.Paint mFillPaint;    android.graphics.PathMeasure mPathMeasure;    int mChangingConfigurations;    androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup mRootGroup;    float mBaseWidth;    float mBaseHeight;    float mViewportWidth;    float mViewportHeight;    int mRootAlpha;    java.lang.String mRootName;    java.lang.Boolean mIsStateful;    androidx.collection.ArrayMap mVGTargetsMap;    void setRootAlpha(int);
    int getRootAlpha();
    void setAlpha(float);
    float getAlpha();
    <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer);
    void drawGroupTree(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,android.graphics.Matrix,android.graphics.Canvas,int,int,android.graphics.ColorFilter);
    void draw(android.graphics.Canvas,int,int,android.graphics.ColorFilter);
    void drawPath(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup,androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath,android.graphics.Canvas,int,int,android.graphics.ColorFilter);
    float cross(float,float,float,float);
    float getMatrixScale(android.graphics.Matrix);
    boolean isStateful();
    boolean onStateChanged(int[]);
    void <clinit>();
}

-keep class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer

-keep class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState {
    int mChangingConfigurations;    androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer mVPathRenderer;    android.content.res.ColorStateList mTint;    android.graphics.PorterDuff$Mode mTintMode;    boolean mAutoMirrored;    android.graphics.Bitmap mCachedBitmap;    int[] mCachedThemeAttrs;    android.content.res.ColorStateList mCachedTint;    android.graphics.PorterDuff$Mode mCachedTintMode;    int mCachedRootAlpha;    boolean mCachedAutoMirrored;    boolean mCacheDirty;    android.graphics.Paint mTempPaint;    <init>(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState);
    void drawCachedBitmapWithRootAlpha(android.graphics.Canvas,android.graphics.ColorFilter,android.graphics.Rect);
    boolean hasTranslucentRoot();
    android.graphics.Paint getPaint(android.graphics.ColorFilter);
    void updateCachedBitmap(int,int);
    void createCachedBitmapIfNeeded(int,int);
    boolean canReuseBitmap(int,int);
    boolean canReuseCache();
    void updateCacheStates();
    android.graphics.drawable.Drawable newDrawable();
    android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
    int getChangingConfigurations();
    boolean isStateful();
    boolean onStateChanged(int[]);
}

-keepclassmembers,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState {
    android.graphics.drawable.Drawable$ConstantState mDelegateState;    <init>(android.graphics.drawable.Drawable$ConstantState);
    android.graphics.drawable.Drawable newDrawable();
    android.graphics.drawable.Drawable newDrawable(android.content.res.Resources);
    android.graphics.drawable.Drawable newDrawable(android.content.res.Resources,android.content.res.Resources$Theme);
    boolean canApplyTheme();
    int getChangingConfigurations();
}

-keepclassmembers,allowobfuscation class androidx.versionedparcelable.CustomVersionedParcelable {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.versionedparcelable.CustomVersionedParcelable {
    void onPreParceling(boolean);
    void onPostParceling();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.versionedparcelable.ParcelImpl {
    androidx.versionedparcelable.VersionedParcelable mParcel;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.versionedparcelable.ParcelImpl$1 {
    <init>();
}

-keep class androidx.versionedparcelable.VersionedParcel

-keepclassmembers,allowshrinking,allowobfuscation class androidx.versionedparcelable.VersionedParcel {
    androidx.collection.ArrayMap mReadCache;    androidx.collection.ArrayMap mWriteCache;    androidx.collection.ArrayMap mParcelizerCache;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.versionedparcelable.VersionedParcel$1 {
    androidx.versionedparcelable.VersionedParcel this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.versionedparcelable.VersionedParcelParcel {
    android.util.SparseIntArray mPositionLookup;    android.os.Parcel mParcel;    int mOffset;    int mEnd;    java.lang.String mPrefix;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.versionedparcelable.VersionedParcelStream {
    java.io.DataInputStream mMasterInput;    java.io.DataOutputStream mMasterOutput;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.versionedparcelable.VersionedParcelStream$1 {
    androidx.versionedparcelable.VersionedParcelStream this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.versionedparcelable.VersionedParcelStream$FieldBuffer {
    java.io.ByteArrayOutputStream mOutput;    java.io.DataOutputStream mDataStream;    int mFieldId;    java.io.DataOutputStream mTarget;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.viewbinding.BuildConfig {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.viewpager.widget.PagerAdapter {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.viewpager.widget.PagerAdapter {
    android.database.DataSetObservable mObservable;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.viewpager.widget.PagerTabStrip {
    android.graphics.Paint mTabPaint;    android.graphics.Rect mTempRect;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.viewpager.widget.PagerTabStrip$1 {
    androidx.viewpager.widget.PagerTabStrip this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.viewpager.widget.PagerTabStrip$2 {
    androidx.viewpager.widget.PagerTabStrip this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.viewpager.widget.PagerTitleStrip {
    androidx.viewpager.widget.PagerTitleStrip$PageListener mPageListener;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.viewpager.widget.PagerTitleStrip$PageListener {
    androidx.viewpager.widget.PagerTitleStrip this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.viewpager.widget.ViewPager {
    java.util.ArrayList mItems;    androidx.viewpager.widget.ViewPager$ItemInfo mTempItem;    android.graphics.Rect mTempRect;    java.lang.Runnable mEndScrollRunnable;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.viewpager.widget.ViewPager$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.viewpager.widget.ViewPager$2 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.viewpager.widget.ViewPager$3 {
    androidx.viewpager.widget.ViewPager this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.viewpager.widget.ViewPager$4 {
    android.graphics.Rect mTempRect;    androidx.viewpager.widget.ViewPager this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.viewpager.widget.ViewPager$ItemInfo {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.viewpager.widget.ViewPager$LayoutParams {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.viewpager.widget.ViewPager$MyAccessibilityDelegate {
    androidx.viewpager.widget.ViewPager this$0;}

-keepclassmembers,allowshrinking,allowobfuscation class androidx.viewpager.widget.ViewPager$PagerObserver {
    androidx.viewpager.widget.ViewPager this$0;}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.viewpager.widget.ViewPager$SavedState$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.viewpager.widget.ViewPager$SimpleOnPageChangeListener {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class androidx.viewpager.widget.ViewPager$ViewPositionComparator {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.AbstractMessageLite$Builder {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.AbstractParser {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.AbstractProtobufList {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.AllocatedBuffer {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.ArrayDecoders$Registers {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.BooleanArrayList {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.BufferAllocator {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.BufferAllocator$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.ByteOutput {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.ByteString {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.ByteString$2 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.ByteString$AbstractByteIterator {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.ByteString$LeafByteString {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.CodedOutputStream$OutOfSpaceException {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.DoubleArrayList {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.ExtensionLite {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.ExtensionRegistryFactory {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.ExtensionRegistryLite {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.ExtensionSchema {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.ExtensionSchemaLite {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.ExtensionSchemas {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.Field$Cardinality$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.Field$Kind$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.FloatArrayList {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.IntArrayList {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.LazyFieldLite {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.LazyStringArrayList {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.LongArrayList {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.ManifestSchemaFactory {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.ManifestSchemaFactory$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.MapFieldSchemaLite {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.MapFieldSchemas {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.MutabilityOracle$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.NewInstanceSchemaLite {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.NewInstanceSchemas {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.NullValue$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.ProtobufArrayList {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.SmallSortedMap$EmptySet$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.SmallSortedMap$EmptySet$2 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.StructuralMessageInfo$Builder {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.Syntax$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.UnknownFieldSchema {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.UnknownFieldSetLiteSchema {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.UnsafeUtil$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.Utf8$Processor {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.Utf8$SafeProcessor {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class com.google.protobuf.Utf8$UnsafeProcessor {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class com.tinder.StateMachine {
    com.tinder.StateMachine$Companion Companion;    <init>(com.tinder.StateMachine$Graph,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class com.tinder.StateMachine$Graph

-keepclassmembers,allowshrinking,allowobfuscation class com.tinder.StateMachine$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keep class com.tinder.StateMachine$Graph

-keepclassmembers,allowoptimization,allowobfuscation class com.tinder.StateMachine$Graph$State {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class com.tinder.StateMachine$GraphBuilder {
    <init>(com.tinder.StateMachine$Graph,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class com.tinder.StateMachine$Graph

-keepclassmembers,allowoptimization,allowobfuscation class com.tinder.StateMachine$GraphBuilder {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class com.tinder.StateMachine$GraphBuilder$StateDefinitionBuilder$on$1 {
    com.tinder.StateMachine$Graph$State$TransitionTo invoke(java.lang.Object,java.lang.Object);
}

-keep class com.tinder.StateMachine$Graph$State$TransitionTo

-keepclassmembers,allowshrinking,allowobfuscation class com.tinder.StateMachine$GraphBuilder$StateDefinitionBuilder$onEnter$$inlined$with$lambda$1 {
    void invoke(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class com.tinder.StateMachine$GraphBuilder$StateDefinitionBuilder$onExit$$inlined$with$lambda$1 {
    void invoke(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class com.tinder.StateMachine$Matcher {
    com.tinder.StateMachine$Matcher$Companion Companion;    <init>(java.lang.Class,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class com.tinder.StateMachine$Matcher$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class com.tinder.StateMachine$Matcher$Companion$eq$1 {
    boolean invoke(java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class com.tinder.StateMachine$Matcher$predicates$1 {
    boolean invoke(java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class com.tinder.StateMachine$Matcher$where$$inlined$apply$lambda$1 {
    boolean invoke(java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class com.tinder.StateMachine$Transition {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.DeepRecursiveScope {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.ExceptionsKt__ExceptionsKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.KotlinNothingValueException {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.KotlinNullPointerException {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.KotlinVersion {
    kotlin.KotlinVersion$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.KotlinVersion$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.KotlinVersionCurrentValue {
    kotlin.KotlinVersionCurrentValue INSTANCE;}

-keep class kotlin.Lazy {
    java.lang.Object getValue();
}

-keep class kotlin.LazyKt

-keep class kotlin.LazyKt__LazyJVMKt {
    kotlin.Lazy lazy(kotlin.jvm.functions.Function0);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.LazyKt__LazyJVMKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.LazyKt__LazyKt {
    <init>();
}

-keep class kotlin.Metadata

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.NoWhenBranchMatchedException {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.NotImplementedError {
    <init>(java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.NotImplementedError {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.NumbersKt__BigDecimalsKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.NumbersKt__BigIntegersKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.NumbersKt__FloorDivModKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.NumbersKt__NumbersJVMKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.NumbersKt__NumbersKt {
    <init>();
}

-keep class kotlin.Pair {
    java.lang.Object getFirst();
    java.lang.Object getSecond();
    <init>(java.lang.Object,java.lang.Object);
    java.lang.Object component1();
    java.lang.Object component2();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.PreconditionsKt__AssertionsJVMKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.PreconditionsKt__PreconditionsKt {
    <init>();
}

-keep class kotlin.Result {
    kotlin.Result$Companion Companion;    java.lang.Throwable exceptionOrNull-impl(java.lang.Object);
    java.lang.Object constructor-impl(java.lang.Object);
}

-keep class kotlin.Result$Companion

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.Result$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.ResultKt {
    java.lang.Object createFailure(java.lang.Throwable);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.SafePublicationLazyImpl {
    kotlin.SafePublicationLazyImpl$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.SafePublicationLazyImpl$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.StandardKt__StandardKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.StandardKt__SynchronizedKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.SynchronizedLazyImpl {
    <init>(kotlin.jvm.functions.Function0,java.lang.Object,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.functions.Function0

-keep class kotlin.TuplesKt {
    kotlin.Pair to(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.TypeCastException {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.UByte {
    kotlin.UByte$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.UByte$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.UInt {
    kotlin.UInt$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.UInt$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ULong {
    kotlin.ULong$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ULong$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.UNINITIALIZED_VALUE {
    kotlin.UNINITIALIZED_VALUE INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.UShort {
    kotlin.UShort$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.UShort$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.UninitializedPropertyAccessException {
    <init>();
}

-keep class kotlin.Unit {
    kotlin.Unit INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin._Assertions {
    kotlin._Assertions INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.AbstractCollection {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.AbstractCollection$toString$1 {
    java.lang.CharSequence invoke(java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.AbstractIterator {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.AbstractList {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.AbstractList {
    kotlin.collections.AbstractList$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.AbstractList$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.AbstractMap {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.AbstractMap {
    kotlin.collections.AbstractMap$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.AbstractMap$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.AbstractMap$toString$1 {
    java.lang.CharSequence invoke(java.util.Map$Entry);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.AbstractMutableCollection {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.AbstractMutableList {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.AbstractMutableMap {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.AbstractMutableSet {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.AbstractSet {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.AbstractSet {
    kotlin.collections.AbstractSet$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.AbstractSet$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.ArrayDeque {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.ArrayDeque {
    kotlin.collections.ArrayDeque$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.ArrayDeque$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keep class kotlin.collections.ArraysKt

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.ArraysKt__ArraysJVMKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.ArraysKt__ArraysKt {
    <init>();
}

-keep class kotlin.collections.ArraysKt___ArraysJvmKt {
    byte[] copyOfRange(byte[],int,int);
    byte[] plus(byte[],byte[]);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.ArraysKt___ArraysJvmKt {
    <init>();
}

-keep class kotlin.collections.ArraysKt___ArraysKt {
    java.lang.Object firstOrNull(java.lang.Object[]);
    java.util.List drop(byte[],int);
    byte[] sliceArray(byte[],kotlin.ranges.IntRange);
    int getLastIndex(java.lang.Object[]);
    java.util.List toList(java.lang.Object[]);
    java.lang.String joinToString$default(java.lang.Object[],java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object);
    java.lang.String joinToString$default(byte[],java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.ArraysKt___ArraysKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.ArraysKt___ArraysKt$withIndex$1 {
    java.util.Iterator invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.ArraysKt___ArraysKt$withIndex$2 {
    java.util.Iterator invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.ArraysKt___ArraysKt$withIndex$3 {
    java.util.Iterator invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.ArraysKt___ArraysKt$withIndex$4 {
    java.util.Iterator invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.ArraysKt___ArraysKt$withIndex$5 {
    java.util.Iterator invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.ArraysKt___ArraysKt$withIndex$6 {
    java.util.Iterator invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.ArraysKt___ArraysKt$withIndex$7 {
    java.util.Iterator invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.ArraysKt___ArraysKt$withIndex$8 {
    java.util.Iterator invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.ArraysKt___ArraysKt$withIndex$9 {
    java.util.Iterator invoke();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.ArraysUtilJVM {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.BooleanIterator {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.ByteIterator {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.CharIterator {
    <init>();
}

-keep class kotlin.collections.CollectionsKt

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.CollectionsKt__CollectionsJVMKt {
    <init>();
}

-keep class kotlin.collections.CollectionsKt__CollectionsKt {
    java.util.List emptyList();
    java.util.List listOf(java.lang.Object[]);
    java.util.List mutableListOf(java.lang.Object[]);
    void throwIndexOverflow();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.CollectionsKt__CollectionsKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.CollectionsKt__CollectionsKt$binarySearchBy$1 {
    int invoke(java.lang.Object);
}

-keep class kotlin.collections.CollectionsKt__IterablesKt {
    int collectionSizeOrDefault(java.lang.Iterable,int);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.CollectionsKt__IterablesKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.CollectionsKt__IteratorsJVMKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.CollectionsKt__IteratorsKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.CollectionsKt__MutableCollectionsJVMKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.CollectionsKt__MutableCollectionsKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.CollectionsKt__ReversedViewsKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.CollectionsKt___CollectionsJvmKt {
    <init>();
}

-keep class kotlin.collections.CollectionsKt___CollectionsKt {
    java.lang.Object getOrNull(java.util.List,int);
    java.lang.Object lastOrNull(java.util.List);
    java.util.List take(java.lang.Iterable,int);
    byte[] toByteArray(java.util.Collection);
    java.util.List toList(java.lang.Iterable);
    java.lang.Comparable maxOrNull(java.lang.Iterable);
    java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.CollectionsKt___CollectionsKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.CollectionsKt___CollectionsKt$elementAt$1 {
    java.lang.Object invoke(int);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.CollectionsKt___CollectionsKt$withIndex$1 {
    java.util.Iterator invoke();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.DoubleIterator {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.EmptyIterator {
    kotlin.collections.EmptyIterator INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.EmptyList {
    kotlin.collections.EmptyList INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.EmptyMap {
    kotlin.collections.EmptyMap INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.EmptySet {
    kotlin.collections.EmptySet INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.FloatIterator {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.GroupingKt__GroupingJVMKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.GroupingKt__GroupingKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.IntIterator {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.LongIterator {
    <init>();
}

-keep class kotlin.collections.MapsKt

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.MapsKt__MapWithDefaultKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.MapsKt__MapsJVMKt {
    <init>();
}

-keep class kotlin.collections.MapsKt__MapsKt {
    java.util.Map emptyMap();
    java.util.Map mapOf(kotlin.Pair[]);
    java.util.Map toMap(java.lang.Iterable);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.MapsKt__MapsKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.MapsKt___MapsKt {
    <init>();
}

-keep class kotlin.collections.SetsKt

-keep class kotlin.collections.SetsKt__SetsJVMKt {
    java.util.Set setOf(java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.SetsKt__SetsJVMKt {
    <init>();
}

-keep class kotlin.collections.SetsKt__SetsKt {
    java.util.Set emptySet();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.SetsKt__SetsKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.SetsKt___SetsKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.ShortIterator {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.SlidingWindowKt$windowedIterator$1 {
    java.lang.Object invoke(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.UByteIterator {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.UCollectionsKt___UCollectionsKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.UIntIterator {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.ULongIterator {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.UShortIterator {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.builders.AbstractMapBuilderEntrySet {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.builders.ListBuilder {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.builders.MapBuilder {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.builders.MapBuilder {
    kotlin.collections.builders.MapBuilder$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.builders.MapBuilder$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.builders.SetBuilder {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.unsigned.UArraysKt___UArraysJvmKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.collections.unsigned.UArraysKt___UArraysKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.unsigned.UArraysKt___UArraysKt$withIndex$1 {
    java.util.Iterator invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.unsigned.UArraysKt___UArraysKt$withIndex$2 {
    java.util.Iterator invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.unsigned.UArraysKt___UArraysKt$withIndex$3 {
    java.util.Iterator invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.collections.unsigned.UArraysKt___UArraysKt$withIndex$4 {
    java.util.Iterator invoke();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.comparisons.ComparisonsKt__ComparisonsKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$1 {
    int compare(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$2 {
    int compare(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareBy$3 {
    int compare(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1 {
    int compare(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$2 {
    int compare(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.comparisons.ComparisonsKt__ComparisonsKt$nullsFirst$1 {
    int compare(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.comparisons.ComparisonsKt__ComparisonsKt$nullsLast$1 {
    int compare(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.comparisons.ComparisonsKt__ComparisonsKt$then$1 {
    int compare(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.comparisons.ComparisonsKt__ComparisonsKt$thenBy$1 {
    int compare(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.comparisons.ComparisonsKt__ComparisonsKt$thenBy$2 {
    int compare(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.comparisons.ComparisonsKt__ComparisonsKt$thenByDescending$1 {
    int compare(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.comparisons.ComparisonsKt__ComparisonsKt$thenByDescending$2 {
    int compare(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.comparisons.ComparisonsKt__ComparisonsKt$thenComparator$1 {
    int compare(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.comparisons.ComparisonsKt__ComparisonsKt$thenDescending$1 {
    int compare(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.comparisons.ComparisonsKt___ComparisonsJvmKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.comparisons.ComparisonsKt___ComparisonsKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.comparisons.NaturalOrderComparator {
    kotlin.comparisons.NaturalOrderComparator INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.comparisons.ReverseOrderComparator {
    kotlin.comparisons.ReverseOrderComparator INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.comparisons.UComparisonsKt___UComparisonsKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.coroutines.AbstractCoroutineContextElement {
    kotlin.coroutines.CoroutineContext$Key key;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.coroutines.CombinedContext$Serialized {
    kotlin.coroutines.CombinedContext$Serialized$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.coroutines.CombinedContext$Serialized$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.coroutines.CombinedContext$toString$1 {
    java.lang.String invoke(java.lang.String,kotlin.coroutines.CoroutineContext$Element);
}

-keep class kotlin.coroutines.CoroutineContext$Element

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.coroutines.CombinedContext$toString$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.coroutines.CombinedContext$writeReplace$1 {
    void invoke(kotlin.Unit,kotlin.coroutines.CoroutineContext$Element);
}

-keep class kotlin.Unit

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.coroutines.ContinuationInterceptor {
    kotlin.coroutines.ContinuationInterceptor$Key Key;}

-keep class kotlin.coroutines.CoroutineContext$Element

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.coroutines.CoroutineContext$plus$1 {
    kotlin.coroutines.CoroutineContext invoke(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element);
}

-keep class kotlin.coroutines.CoroutineContext

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.coroutines.CoroutineContext$plus$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.coroutines.EmptyCoroutineContext {
    kotlin.coroutines.EmptyCoroutineContext INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.coroutines.SafeContinuation {
    kotlin.coroutines.SafeContinuation$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.coroutines.SafeContinuation$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.coroutines.jvm.internal.CompletedContinuation {
    kotlin.coroutines.jvm.internal.CompletedContinuation INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.coroutines.jvm.internal.ModuleNameRetriever {
    kotlin.coroutines.jvm.internal.ModuleNameRetriever INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.coroutines.jvm.internal.RunSuspend {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.internal.PlatformImplementations {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.internal.PlatformImplementations$ReflectThrowable {
    kotlin.internal.PlatformImplementations$ReflectThrowable INSTANCE;}

-keep class kotlin.internal.ProgressionUtilKt {
    int getProgressionLastElement(int,int,int);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.internal.jdk7.JDK7PlatformImplementations {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.internal.jdk8.JDK8PlatformImplementations {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.io.AccessDeniedException {
    <init>(java.io.File,java.io.File,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keep class kotlin.io.ByteStreamsKt {
    byte[] readBytes(java.io.InputStream);
}

-keep class kotlin.io.CloseableKt {
    void closeFinally(java.io.Closeable,java.lang.Throwable);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.io.FileAlreadyExistsException {
    <init>(java.io.File,java.io.File,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.io.FileSystemException {
    <init>(java.io.File,java.io.File,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.io.FileTreeWalk {
    <init>(java.io.File,kotlin.io.FileWalkDirection,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function2,int,int,kotlin.jvm.internal.DefaultConstructorMarker);
    <init>(java.io.File,kotlin.io.FileWalkDirection,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.io.FileWalkDirection

-keep class kotlin.io.FileWalkDirection

-keep class kotlin.io.FilesKt

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.io.FilesKt__FilePathComponentsKt {
    <init>();
}

-keep class kotlin.io.FilesKt__FileReadWriteKt {
    java.lang.String readText$default(java.io.File,java.nio.charset.Charset,int,java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.io.FilesKt__FileReadWriteKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.io.FilesKt__FileReadWriteKt$readLines$1 {
    void invoke(java.lang.String);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.io.FilesKt__FileTreeWalkKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.io.FilesKt__UtilsKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.io.FilesKt__UtilsKt$copyRecursively$1 {
    java.lang.Void invoke(java.io.File,java.io.IOException);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.io.FilesKt__UtilsKt$copyRecursively$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.io.FilesKt__UtilsKt$copyRecursively$2 {
    void invoke(java.io.File,java.io.IOException);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.io.LineReader {
    kotlin.io.LineReader INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.io.NoSuchFileException {
    <init>(java.io.File,java.io.File,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keep class kotlin.io.TextStreamsKt {
    kotlin.sequences.Sequence lineSequence(java.io.BufferedReader);
    java.lang.String readText(java.io.Reader);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.io.TextStreamsKt$readLines$1 {
    void invoke(java.lang.String);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.io.path.PathRelativizer {
    kotlin.io.path.PathRelativizer INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.io.path.PathsKt__PathReadWriteKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.io.path.PathsKt__PathUtilsKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.KotlinReflectionNotSupportedError {
    <init>();
}

-keep class kotlin.jvm.functions.Function0 {
    java.lang.Object invoke();
}

-keep class kotlin.jvm.functions.Function1 {
    java.lang.Object invoke(java.lang.Object);
}

-keep class kotlin.jvm.functions.Function2

-keep class kotlin.jvm.internal.ArrayIteratorKt {
    java.util.Iterator iterator(java.lang.Object[]);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.jvm.internal.BooleanCompanionObject {
    kotlin.jvm.internal.BooleanCompanionObject INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.jvm.internal.ByteCompanionObject {
    kotlin.jvm.internal.ByteCompanionObject INSTANCE;}

-keep class kotlin.jvm.internal.CallableReference {
    java.lang.Object receiver;    <init>(java.lang.Object);
    void <clinit>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.CallableReference {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.jvm.internal.CharCompanionObject {
    kotlin.jvm.internal.CharCompanionObject INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.jvm.internal.ClassReference {
    kotlin.jvm.internal.ClassReference$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.jvm.internal.ClassReference$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.jvm.internal.DoubleCompanionObject {
    kotlin.jvm.internal.DoubleCompanionObject INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.jvm.internal.EnumCompanionObject {
    kotlin.jvm.internal.EnumCompanionObject INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.jvm.internal.FloatCompanionObject {
    kotlin.jvm.internal.FloatCompanionObject INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.FunctionImpl {
    <init>();
}

-keep class kotlin.jvm.internal.FunctionReferenceImpl {
    <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.InlineMarker {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.jvm.internal.IntCompanionObject {
    kotlin.jvm.internal.IntCompanionObject INSTANCE;}

-keep class kotlin.jvm.internal.Intrinsics {
    java.lang.String stringPlus(java.lang.String,java.lang.Object);
    void checkNotNull(java.lang.Object);
    void checkNotNullExpressionValue(java.lang.Object,java.lang.String);
    void checkNotNullParameter(java.lang.Object,java.lang.String);
    int compare(int,int);
    boolean areEqual(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.jvm.internal.Intrinsics {
    void throwNpe();
}

-keep class kotlin.jvm.internal.Lambda {
    <init>(int);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.LocalVariableReference {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.jvm.internal.LongCompanionObject {
    kotlin.jvm.internal.LongCompanionObject INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.MagicApiIntrinsics {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.MutableLocalVariableReference {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.MutablePropertyReference {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.MutablePropertyReference0 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.MutablePropertyReference1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.MutablePropertyReference2 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.PropertyReference {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.PropertyReference0 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.PropertyReference1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.PropertyReference2 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.Ref$BooleanRef {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.Ref$ByteRef {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.Ref$CharRef {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.Ref$DoubleRef {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.Ref$FloatRef {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.Ref$IntRef {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.Ref$LongRef {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.Ref$ObjectRef {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.Ref$ShortRef {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.Reflection {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.ReflectionFactory {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.jvm.internal.ShortCompanionObject {
    kotlin.jvm.internal.ShortCompanionObject INSTANCE;}

-keep class kotlin.jvm.internal.StringCompanionObject {
    kotlin.jvm.internal.StringCompanionObject INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.jvm.internal.TypeIntrinsics {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.jvm.internal.TypeParameterReference {
    kotlin.jvm.internal.TypeParameterReference$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.jvm.internal.TypeParameterReference$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.jvm.internal.TypeReference$asString$args$1 {
    java.lang.CharSequence invoke(kotlin.reflect.KTypeProjection);
}

-keep class kotlin.reflect.KTypeProjection

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.math.Constants {
    kotlin.math.Constants INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.math.MathKt__MathHKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.math.MathKt__MathJVMKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.properties.Delegates {
    kotlin.properties.Delegates INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.properties.NotNullVar {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.random.AbstractPlatformRandom {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.random.FallbackThreadLocalRandom {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.random.FallbackThreadLocalRandom$implStorage$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.random.KotlinRandom {
    kotlin.random.KotlinRandom$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.random.KotlinRandom$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.random.PlatformRandom {
    kotlin.random.PlatformRandom$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.random.PlatformRandom$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keep class kotlin.random.Random {
    kotlin.random.Random$Default Default;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.random.Random {
    <init>();
}

-keep class kotlin.random.Random$Default {
    int nextInt(int,int);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.random.Random$Default {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.random.Random$Default$Serialized {
    kotlin.random.Random$Default$Serialized INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.random.XorWowRandom {
    kotlin.random.XorWowRandom$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.random.XorWowRandom$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.random.jdk8.PlatformThreadLocalRandom {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.CharProgression {
    kotlin.ranges.CharProgression$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.CharProgression$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.CharRange {
    kotlin.ranges.CharRange$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.CharRange$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.IntProgression {
    kotlin.ranges.IntProgression$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.IntProgression$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keep class kotlin.ranges.IntRange

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.IntRange {
    kotlin.ranges.IntRange$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.IntRange$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.LongProgression {
    kotlin.ranges.LongProgression$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.LongProgression$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.LongRange {
    kotlin.ranges.LongRange$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.LongRange$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keep class kotlin.ranges.RangesKt

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.ranges.RangesKt__RangesKt {
    <init>();
}

-keep class kotlin.ranges.RangesKt___RangesKt {
    kotlin.ranges.IntRange until(int,int);
    long coerceAtLeast(long,long);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.ranges.RangesKt___RangesKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.UIntProgression {
    kotlin.ranges.UIntProgression$Companion Companion;    <init>(int,int,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.UIntProgression$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.UIntProgressionIterator {
    <init>(int,int,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.UIntRange {
    kotlin.ranges.UIntRange$Companion Companion;    <init>(int,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.UIntRange$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.ULongProgression {
    kotlin.ranges.ULongProgression$Companion Companion;    <init>(long,long,long,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.ULongProgression$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.ULongProgressionIterator {
    <init>(long,long,long,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.ULongRange {
    kotlin.ranges.ULongRange$Companion Companion;    <init>(long,long,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.ranges.ULongRange$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.ranges.URangesKt___URangesKt {
    <init>();
}

-keep class kotlin.reflect.KFunction

-keep class kotlin.reflect.KTypeProjection

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.reflect.KTypeProjection {
    kotlin.reflect.KTypeProjection$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.reflect.KTypeProjection$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.reflect.ParameterizedTypeImpl$getTypeName$1$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.reflect.TypesJVMKt$typeToString$unwrap$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.reflect.WildcardTypeImpl {
    kotlin.reflect.WildcardTypeImpl$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.reflect.WildcardTypeImpl$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.EmptySequence {
    kotlin.sequences.EmptySequence INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.FilteringSequence {
    <init>(kotlin.sequences.Sequence,boolean,kotlin.jvm.functions.Function1,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.sequences.Sequence

-keep class kotlin.sequences.Sequence {
    java.util.Iterator iterator();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequenceBuilderIterator {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequenceScope {
    <init>();
}

-keep class kotlin.sequences.SequencesKt

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt__SequenceBuilderKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt__SequencesJVMKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt__SequencesKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt__SequencesKt$flatMapIndexed$1 {
    java.lang.Object invoke(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt__SequencesKt$flatten$1 {
    java.util.Iterator invoke(kotlin.sequences.Sequence);
}

-keep class kotlin.sequences.Sequence

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt__SequencesKt$flatten$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt__SequencesKt$flatten$2 {
    java.util.Iterator invoke(java.lang.Iterable);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt__SequencesKt$flatten$2 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt__SequencesKt$flatten$3 {
    java.lang.Object invoke(java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt__SequencesKt$flatten$3 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt__SequencesKt$generateSequence$1 {
    java.lang.Object invoke(java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt__SequencesKt$generateSequence$2 {
    java.lang.Object invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1 {
    java.lang.Object invoke(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt__SequencesKt$shuffled$1 {
    java.lang.Object invoke(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt___SequencesJvmKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesJvmKt$filterIsInstance$1 {
    boolean invoke(java.lang.Object);
}

-keep class kotlin.sequences.SequencesKt___SequencesKt {
    java.util.List toList(kotlin.sequences.Sequence);
    kotlin.sequences.Sequence map(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$distinct$1 {
    java.lang.Object invoke(java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$distinct$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$elementAt$1 {
    java.lang.Object invoke(int);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$filterIndexed$1 {
    boolean invoke(kotlin.collections.IndexedValue);
}

-keep class kotlin.collections.IndexedValue

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$filterIndexed$2 {
    java.lang.Object invoke(kotlin.collections.IndexedValue);
}

-keep class kotlin.collections.IndexedValue

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$filterIndexed$2 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance$1 {
    boolean invoke(java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$filterIsInstance$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$filterNotNull$1 {
    boolean invoke(java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$filterNotNull$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$flatMap$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$flatMap$2 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$flatMapIndexed$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$flatMapIndexed$2 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$minus$1$iterator$1 {
    boolean invoke(java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$minus$2$iterator$1 {
    boolean invoke(java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$minus$3$iterator$1 {
    boolean invoke(java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$minus$4$iterator$1 {
    boolean invoke(java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$onEach$1 {
    java.lang.Object invoke(java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$onEachIndexed$1 {
    java.lang.Object invoke(int,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$requireNoNulls$1 {
    java.lang.Object invoke(java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 {
    java.lang.Object invoke(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$runningFoldIndexed$1 {
    java.lang.Object invoke(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$runningReduce$1 {
    java.lang.Object invoke(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$runningReduceIndexed$1 {
    java.lang.Object invoke(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$zip$1 {
    kotlin.Pair invoke(java.lang.Object,java.lang.Object);
}

-keep class kotlin.Pair

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$zip$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$1 {
    kotlin.Pair invoke(java.lang.Object,java.lang.Object);
}

-keep class kotlin.Pair

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2 {
    java.lang.Object invoke(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.sequences.USequencesKt___USequencesKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.streams.jdk8.StreamsKt$asStream$1 {
    java.util.Spliterator get();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.CharCategory {
    kotlin.text.CharCategory$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.CharCategory$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.CharDirectionality {
    kotlin.text.CharDirectionality$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.CharDirectionality$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.CharDirectionality$Companion$directionalityMap$2 {
    java.util.Map invoke();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.CharDirectionality$Companion$directionalityMap$2 {
    <init>();
}

-keep class kotlin.text.CharsKt

-keep class kotlin.text.CharsKt__CharJVMKt {
    int checkRadix(int);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.CharsKt__CharJVMKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.CharsKt__CharKt {
    <init>();
}

-keep class kotlin.text.Charsets {
    java.nio.charset.Charset UTF_8;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.Charsets {
    kotlin.text.Charsets INSTANCE;}

-keep class kotlin.text.MatchResult {
    java.lang.String getValue();
    java.util.List getGroupValues();
    kotlin.text.MatchResult$Destructured getDestructured();
}

-keep class kotlin.text.MatchResult$Destructured {
    kotlin.text.MatchResult getMatch();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.MatcherMatchResult$groups$1$iterator$1 {
    kotlin.text.MatchGroup invoke(int);
}

-keep class kotlin.text.MatchGroup

-keep class kotlin.text.Regex {
    kotlin.sequences.Sequence findAll$default(kotlin.text.Regex,java.lang.CharSequence,int,int,java.lang.Object);
    java.util.List split(java.lang.CharSequence,int);
    <init>(java.lang.String);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.Regex {
    kotlin.text.Regex$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.Regex$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.Regex$Serialized {
    kotlin.text.Regex$Serialized$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.Regex$Serialized$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.Regex$findAll$1 {
    kotlin.text.MatchResult invoke();
}

-keep class kotlin.text.MatchResult

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.Regex$findAll$2 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.Regex$fromInt$$inlined$apply$lambda$1 {
    boolean invoke(java.lang.Enum);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.Regex$splitToSequence$1 {
    java.lang.Object invoke(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.RegexKt$fromInt$$inlined$apply$lambda$1 {
    boolean invoke(java.lang.Enum);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.RegexOption {
    <init>(java.lang.String,int,int,int,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.ScreenFloatValueRegEx {
    kotlin.text.ScreenFloatValueRegEx INSTANCE;}

-keep class kotlin.text.StringsKt

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.StringsKt__AppendableKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.StringsKt__IndentKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.StringsKt__IndentKt$getIndentFunction$1 {
    java.lang.String invoke(java.lang.String);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.StringsKt__IndentKt$getIndentFunction$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.StringsKt__IndentKt$getIndentFunction$2 {
    java.lang.String invoke(java.lang.String);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.StringsKt__IndentKt$prependIndent$1 {
    java.lang.String invoke(java.lang.String);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.StringsKt__RegexExtensionsJVMKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.StringsKt__RegexExtensionsKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.StringsKt__StringBuilderJVMKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.StringsKt__StringBuilderKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.StringsKt__StringNumberConversionsJVMKt {
    <init>();
}

-keep class kotlin.text.StringsKt__StringNumberConversionsKt {
    java.lang.Integer toIntOrNull(java.lang.String,int);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.StringsKt__StringNumberConversionsKt {
    <init>();
}

-keep class kotlin.text.StringsKt__StringsJVMKt {
    boolean equals(java.lang.String,java.lang.String,boolean);
    java.lang.String replace$default(java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.StringsKt__StringsJVMKt {
    <init>();
}

-keep class kotlin.text.StringsKt__StringsKt {
    java.lang.CharSequence trim(java.lang.CharSequence);
    boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean);
    boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object);
    java.util.List split$default(java.lang.CharSequence,java.lang.String[],boolean,int,int,java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.StringsKt__StringsKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$1 {
    kotlin.Pair invoke(java.lang.CharSequence,int);
}

-keep class kotlin.Pair

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$2 {
    kotlin.Pair invoke(java.lang.CharSequence,int);
}

-keep class kotlin.Pair

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.StringsKt__StringsKt$splitToSequence$1 {
    java.lang.String invoke(kotlin.ranges.IntRange);
}

-keep class kotlin.ranges.IntRange

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.StringsKt__StringsKt$splitToSequence$2 {
    java.lang.String invoke(kotlin.ranges.IntRange);
}

-keep class kotlin.ranges.IntRange

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.StringsKt___StringsJvmKt {
    <init>();
}

-keep class kotlin.text.StringsKt___StringsKt {
    java.util.List chunked(java.lang.CharSequence,int);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.StringsKt___StringsKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.StringsKt___StringsKt$chunkedSequence$1 {
    java.lang.String invoke(java.lang.CharSequence);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.StringsKt___StringsKt$chunkedSequence$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.StringsKt___StringsKt$windowed$1 {
    java.lang.String invoke(java.lang.CharSequence);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.StringsKt___StringsKt$windowed$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.StringsKt___StringsKt$windowedSequence$1 {
    java.lang.String invoke(java.lang.CharSequence);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.text.StringsKt___StringsKt$windowedSequence$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.StringsKt___StringsKt$windowedSequence$2 {
    java.lang.Object invoke(int);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.StringsKt___StringsKt$withIndex$1 {
    java.util.Iterator invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.SystemProperties {
    kotlin.text.SystemProperties INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.text.Typography {
    kotlin.text.Typography INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.time.AbstractDoubleTimeSource$DoubleTimeMark {
    <init>(double,kotlin.time.AbstractDoubleTimeSource,long,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.time.AbstractDoubleTimeSource

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.time.AbstractLongTimeSource$LongTimeMark {
    <init>(long,kotlin.time.AbstractLongTimeSource,long,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.time.AbstractLongTimeSource

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.time.AdjustedTimeMark {
    <init>(kotlin.time.TimeMark,long,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.time.TimeMark

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.time.Duration {
    kotlin.time.Duration$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.time.Duration$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.time.DurationUnitKt__DurationUnitJvmKt {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.time.DurationUnitKt__DurationUnitKt {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.time.MonotonicTimeSource {
    kotlin.time.MonotonicTimeSource INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.time.TestTimeSource {
    <init>();
}

-keep class kotlin.time.TimeMark

-keepclassmembers,allowoptimization,allowobfuscation class kotlin.time.TimeMark {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.time.TimeSource {
    kotlin.time.TimeSource$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.time.TimeSource$Monotonic {
    kotlin.time.TimeSource$Monotonic INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlin.time.TimedValue {
    <init>(java.lang.Object,long,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.AbstractTimeSource {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.Active {
    kotlinx.coroutines.Active INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.BeforeResumeCancelHandler {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.CancelHandler {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.CancelHandlerBase {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.CommonPool {
    kotlinx.coroutines.CommonPool INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.CompletedContinuation {
    <init>(java.lang.Object,kotlinx.coroutines.CancelHandler,kotlin.jvm.functions.Function1,java.lang.Object,java.lang.Throwable,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlinx.coroutines.CancelHandler

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.CompletedExceptionally {
    <init>(java.lang.Throwable,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.CompletionHandlerBase {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.CoroutineDispatcher {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.CoroutineDispatcher {
    kotlinx.coroutines.CoroutineDispatcher$Key Key;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.CoroutineDispatcher$Key {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.CoroutineDispatcher$Key$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.CoroutineDispatcher$Key$1 {
    kotlinx.coroutines.CoroutineDispatcher invoke(kotlin.coroutines.CoroutineContext$Element);
}

-keep class kotlin.coroutines.CoroutineContext$Element

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.CoroutineExceptionHandler {
    kotlinx.coroutines.CoroutineExceptionHandler$Key Key;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.CoroutineId {
    kotlinx.coroutines.CoroutineId$Key Key;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.CoroutineId$Key {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.CoroutineName {
    kotlinx.coroutines.CoroutineName$Key Key;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.CoroutineName$Key {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.DefaultExecutor {
    kotlinx.coroutines.DefaultExecutor INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.Dispatchers {
    kotlinx.coroutines.Dispatchers INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.EventLoop {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.EventLoopImplBase {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.EventLoopImplPlatform {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.ExecutorCoroutineDispatcher {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.ExecutorCoroutineDispatcher {
    kotlinx.coroutines.ExecutorCoroutineDispatcher$Key Key;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.ExecutorCoroutineDispatcher$Key {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.ExecutorCoroutineDispatcher$Key$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.ExecutorCoroutineDispatcher$Key$1 {
    kotlinx.coroutines.ExecutorCoroutineDispatcher invoke(kotlin.coroutines.CoroutineContext$Element);
}

-keep class kotlin.coroutines.CoroutineContext$Element

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.GlobalScope {
    kotlinx.coroutines.GlobalScope INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.Job {
    kotlinx.coroutines.Job$Key Key;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.JobCancellingNode {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.JobNode {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.MainCoroutineDispatcher {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.NodeList {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.NonCancellable {
    kotlinx.coroutines.NonCancellable INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.NonDisposableHandle {
    kotlinx.coroutines.NonDisposableHandle INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.ThreadLocalEventLoop {
    kotlinx.coroutines.ThreadLocalEventLoop INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.Unconfined {
    kotlinx.coroutines.Unconfined INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.UndispatchedMarker {
    kotlinx.coroutines.UndispatchedMarker INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.YieldContext {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.YieldContext {
    kotlinx.coroutines.YieldContext$Key Key;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.YieldContext$Key {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.android.AndroidDispatcherFactory {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.android.AndroidExceptionPreHandler {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.android.HandlerContext {
    <init>(android.os.Handler,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.android.HandlerContext$scheduleResumeAfterDelay$1 {
    void invoke(java.lang.Throwable);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.android.HandlerDispatcher {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.channels.BroadcastKt$broadcast$1 {
    void invoke(java.lang.Throwable);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.channels.Channel {
    kotlinx.coroutines.channels.Channel$Factory Factory;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.channels.ChannelResult {
    kotlinx.coroutines.channels.ChannelResult$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.channels.ChannelResult$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.channels.ChannelResult$Failed {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.channels.ChannelsKt__DeprecatedKt$consumes$1 {
    void invoke(java.lang.Throwable);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.channels.ChannelsKt__DeprecatedKt$consumesAll$1 {
    void invoke(java.lang.Throwable);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.channels.ChannelsKt__DeprecatedKt$zip$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.channels.ConflatedBroadcastChannel {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.channels.ConflatedBroadcastChannel {
    kotlinx.coroutines.channels.ConflatedBroadcastChannel$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.channels.ConflatedBroadcastChannel$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.channels.ProduceKt$awaitClose$2 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.channels.ProduceKt$awaitClose$2 {
    void invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.channels.ProduceKt$awaitClose$4$1 {
    void invoke(java.lang.Throwable);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.channels.Receive {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.channels.Send {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.debug.internal.ConcurrentWeakMap {
    <init>(boolean,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.debug.internal.ConcurrentWeakMap {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.debug.internal.ConcurrentWeakMap$entries$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.debug.internal.ConcurrentWeakMap$keys$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.debug.internal.DebugProbesImpl {
    kotlinx.coroutines.debug.internal.DebugProbesImpl INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$lambda-14$$inlined$sortedBy$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$lambda-14$$inlined$sortedBy$1 {
    int compare(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesSynchronized$1$2 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesSynchronized$1$2 {
    boolean invoke(kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner);
}

-keep class kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesSynchronized$lambda-21$$inlined$sortedBy$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesSynchronized$lambda-21$$inlined$sortedBy$1 {
    int compare(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1 {
    void invoke();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.flow.AbstractFlow {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.CallbackFlowBuilder {
    <init>(kotlin.jvm.functions.Function2,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.functions.Function2

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.ChannelAsFlow {
    <init>(kotlinx.coroutines.channels.ReceiveChannel,boolean,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlinx.coroutines.channels.ReceiveChannel

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.ChannelFlowBuilder {
    <init>(kotlin.jvm.functions.Function2,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.functions.Function2

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.EmptyFlow {
    kotlinx.coroutines.flow.EmptyFlow INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.flow.FlowKt__DistinctKt$defaultAreEquivalent$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.FlowKt__DistinctKt$defaultAreEquivalent$1 {
    boolean invoke(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.flow.FlowKt__DistinctKt$defaultKeySelector$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.FlowKt__DistinctKt$defaultKeySelector$1 {
    java.lang.Object invoke(java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.flow.FlowKt__ErrorsKt$onErrorCollect$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.FlowKt__ErrorsKt$onErrorCollect$1 {
    boolean invoke(java.lang.Throwable);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$4 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.FlowKt__ErrorsKt$retry$4 {
    boolean invoke(java.lang.Throwable);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$1 {
    boolean invoke(java.lang.Throwable);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.flow.FlowKt__ZipKt$nullArrayFactory$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.FlowKt__ZipKt$nullArrayFactory$1 {
    java.lang.Void invoke();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.flow.SharedFlowSlot {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.SharingStarted {
    kotlinx.coroutines.flow.SharingStarted$Companion Companion;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.flow.StartedEagerly {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.flow.StartedLazily {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.flow.StateFlowSlot {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.flow.internal.AbstractSharedFlow {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.internal.ChannelFlowMerge {
    <init>(kotlinx.coroutines.flow.Flow,int,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlinx.coroutines.flow.Flow

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl {
    <init>(kotlinx.coroutines.flow.Flow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlinx.coroutines.flow.Flow

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest {
    <init>(kotlin.jvm.functions.Function3,kotlinx.coroutines.flow.Flow,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.functions.Function3

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge {
    <init>(java.lang.Iterable,kotlin.coroutines.CoroutineContext,int,kotlinx.coroutines.channels.BufferOverflow,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.coroutines.CoroutineContext

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.flow.internal.ChildCancelledException {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1$1 {
    void invoke(java.lang.Throwable);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.internal.DownstreamExceptionElement {
    kotlinx.coroutines.flow.internal.DownstreamExceptionElement$Key Key;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.internal.DownstreamExceptionElement$Key {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.internal.NoOpContinuation {
    kotlinx.coroutines.flow.internal.NoOpContinuation INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.internal.NopCollector {
    kotlinx.coroutines.flow.internal.NopCollector INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.flow.internal.SafeCollector$collectContextSize$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.internal.SafeCollector$collectContextSize$1 {
    int invoke(int,kotlin.coroutines.CoroutineContext$Element);
}

-keep class kotlin.coroutines.CoroutineContext$Element

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.flow.internal.SafeCollectorKt$emitFun$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.flow.internal.SafeCollector_commonKt$checkContext$result$1 {
    int invoke(int,kotlin.coroutines.CoroutineContext$Element);
}

-keep class kotlin.coroutines.CoroutineContext$Element

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.internal.ArrayQueue {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.internal.AtomicDesc {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.internal.AtomicOp {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$1 {
    java.lang.Throwable invoke(java.lang.Throwable);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$2 {
    java.lang.Throwable invoke(java.lang.Throwable);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$3 {
    java.lang.Throwable invoke(java.lang.Throwable);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$4 {
    java.lang.Throwable invoke(java.lang.Throwable);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.internal.ExceptionsConstuctorKt$safeCtor$1 {
    java.lang.Throwable invoke(java.lang.Throwable);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$$inlined$sortedByDescending$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$$inlined$sortedByDescending$1 {
    int compare(java.lang.Object,java.lang.Object);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$4$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$4$1 {
    java.lang.Void invoke(java.lang.Throwable);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$5$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$5$1 {
    java.lang.Void invoke(java.lang.Throwable);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.internal.FastServiceLoader {
    kotlinx.coroutines.internal.FastServiceLoader INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.internal.LockFreeLinkedListHead {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.internal.LockFreeLinkedListNode {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.internal.LockFreeTaskQueueCore {
    kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.internal.MainDispatcherLoader {
    kotlinx.coroutines.internal.MainDispatcherLoader INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.internal.MissingMainCoroutineDispatcher {
    <init>(java.lang.Throwable,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.internal.MissingMainCoroutineDispatcherFactory {
    kotlinx.coroutines.internal.MissingMainCoroutineDispatcherFactory INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.internal.OnUndeliveredElementKt$bindCancellationFun$1 {
    void invoke(java.lang.Throwable);
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.internal.OpDescriptor {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.internal.ThreadContextKt$countAll$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.internal.ThreadContextKt$findOne$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.internal.ThreadContextKt$updateState$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.internal.ThreadSafeHeap {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.scheduling.CoroutineScheduler {
    kotlinx.coroutines.scheduling.CoroutineScheduler$Companion Companion;    <init>(int,int,long,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.scheduling.CoroutineScheduler$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.scheduling.DefaultScheduler {
    kotlinx.coroutines.scheduling.DefaultScheduler INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher {
    <init>(int,int,long,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker);
    <init>(int,int,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker);
    <init>(int,int,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.scheduling.GlobalQueue {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.scheduling.NanoTimeSource {
    kotlinx.coroutines.scheduling.NanoTimeSource INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.scheduling.NonBlockingContext {
    kotlinx.coroutines.scheduling.NonBlockingContext INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.scheduling.SchedulerTimeSource {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.scheduling.Task {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.scheduling.WorkQueue {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.selects.SeqNumber {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.selects.UnbiasedSelectBuilderImpl$invoke$1 {
    void invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.selects.UnbiasedSelectBuilderImpl$invoke$2 {
    void invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.selects.UnbiasedSelectBuilderImpl$invoke$3 {
    void invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.selects.UnbiasedSelectBuilderImpl$onTimeout$1 {
    void invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.sync.MutexImpl$LockCont$tryResumeLockWaiter$1 {
    void invoke(java.lang.Throwable);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.sync.MutexImpl$LockSelect$completeResumeLockWaiter$2 {
    void invoke(java.lang.Throwable);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.sync.MutexImpl$lockSuspend$2$1$1 {
    void invoke(java.lang.Throwable);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.sync.SemaphoreImpl$onCancellationRelease$1 {
    void invoke(java.lang.Throwable);
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.test.TestCoroutineContext {
    <init>(java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class kotlinx.coroutines.test.TestCoroutineContext {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class kotlinx.coroutines.test.TimedRunnableObsolete {
    <init>(java.lang.Runnable,long,long,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Authenticator {
    okhttp3.Authenticator$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Authenticator$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.Authenticator$Companion$AuthenticatorNone {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Cache {
    okhttp3.Cache$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Cache$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Cache$Entry {
    okhttp3.Cache$Entry$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Cache$Entry$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.CacheControl {
    okhttp3.CacheControl$Companion Companion;    <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,boolean,java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.CacheControl$Builder {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.CacheControl$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.CertificatePinner {
    okhttp3.CertificatePinner$Companion Companion;    <init>(java.util.Set,okhttp3.internal.tls.CertificateChainCleaner,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class okhttp3.internal.tls.CertificateChainCleaner

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.CertificatePinner$Builder {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.CertificatePinner$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.CertificatePinner$check$1 {
    java.util.List invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.CipherSuite {
    okhttp3.CipherSuite$Companion Companion;    <init>(java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.CipherSuite$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.CipherSuite$Companion$ORDER_BY_NAME$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.ConnectionPool {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.ConnectionSpec {
    okhttp3.ConnectionSpec$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.ConnectionSpec$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Cookie {
    okhttp3.Cookie$Companion Companion;    <init>(java.lang.String,java.lang.String,long,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.Cookie$Builder {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Cookie$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.CookieJar {
    okhttp3.CookieJar$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.CookieJar$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.CookieJar$Companion$NoCookies {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Credentials {
    okhttp3.Credentials INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.Dispatcher {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Dns {
    okhttp3.Dns$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Dns$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.Dns$Companion$DnsSystem {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.EventListener {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.EventListener {
    okhttp3.EventListener$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.EventListener$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.EventListener$Companion$NONE$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.FormBody {
    okhttp3.FormBody$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.FormBody$Builder {
    <init>(java.nio.charset.Charset,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.FormBody$Builder {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.FormBody$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Handshake {
    okhttp3.Handshake$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Handshake$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Handshake$Companion$get$1 {
    java.util.List invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Handshake$Companion$handshake$1 {
    java.util.List invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Handshake$peerCertificates$2 {
    java.util.List invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Headers {
    okhttp3.Headers$Companion Companion;    <init>(java.lang.String[],kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.Headers$Builder {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Headers$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.HttpUrl {
    okhttp3.HttpUrl$Companion Companion;}

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.HttpUrl$Builder {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.HttpUrl$Builder {
    okhttp3.HttpUrl$Builder$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.HttpUrl$Builder$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.HttpUrl$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Interceptor {
    okhttp3.Interceptor$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Interceptor$Companion$invoke$1 {
    okhttp3.Response intercept(okhttp3.Interceptor$Chain);
}

-keep class okhttp3.Interceptor$Chain

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.MediaType {
    okhttp3.MediaType$Companion Companion;    <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.MediaType$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.MultipartBody {
    okhttp3.MultipartBody$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.MultipartBody$Builder {
    <init>(java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.MultipartBody$Builder {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.MultipartBody$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.MultipartBody$Part {
    okhttp3.MultipartBody$Part$Companion Companion;    <init>(okhttp3.Headers,okhttp3.RequestBody,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class okhttp3.Headers

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.MultipartBody$Part$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.MultipartReader {
    okhttp3.MultipartReader$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.MultipartReader$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.OkHttp {
    okhttp3.OkHttp INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.OkHttpClient {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.OkHttpClient {
    okhttp3.OkHttpClient$Companion Companion;}

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.OkHttpClient$Builder {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.OkHttpClient$Builder$addInterceptor$2 {
    okhttp3.Response intercept(okhttp3.Interceptor$Chain);
}

-keep class okhttp3.Interceptor$Chain

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.OkHttpClient$Builder$addNetworkInterceptor$2 {
    okhttp3.Response intercept(okhttp3.Interceptor$Chain);
}

-keep class okhttp3.Interceptor$Chain

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.OkHttpClient$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Protocol {
    okhttp3.Protocol$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.Protocol$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.Request$Builder {
    <init>();
}

-keep class okhttp3.RequestBody

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.RequestBody {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.RequestBody {
    okhttp3.RequestBody$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.RequestBody$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keep class okhttp3.Response

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.Response$Builder {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.ResponseBody {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.ResponseBody {
    okhttp3.ResponseBody$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.ResponseBody$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.TlsVersion {
    okhttp3.TlsVersion$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.TlsVersion$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.WebSocketListener {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.Util$asFactory$1 {
    okhttp3.EventListener create(okhttp3.Call);
}

-keep class okhttp3.Call

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.Util$threadFactory$1 {
    java.lang.Thread newThread(java.lang.Runnable);
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.authenticator.JavaNetAuthenticator {
    <init>(okhttp3.Dns,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class okhttp3.Dns

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.authenticator.JavaNetAuthenticator {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.cache.CacheInterceptor {
    okhttp3.internal.cache.CacheInterceptor$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.cache.CacheInterceptor$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.cache.CacheStrategy {
    okhttp3.internal.cache.CacheStrategy$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.cache.CacheStrategy$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.cache.DiskLruCache {
    okhttp3.internal.cache.DiskLruCache$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.cache.DiskLruCache$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.cache.DiskLruCache$Editor$newSink$$inlined$synchronized$lambda$1 {
    void invoke(java.io.IOException);
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.cache.DiskLruCache$newJournalWriter$faultHidingSink$1 {
    void invoke(java.io.IOException);
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.cache2.Relay {
    okhttp3.internal.cache2.Relay$Companion Companion;    <init>(java.io.RandomAccessFile,okio.Source,long,okio.ByteString,long,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class okio.Source

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.cache2.Relay$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.concurrent.Task {
    <init>(java.lang.String,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.concurrent.TaskQueue$AwaitIdleTask {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.concurrent.TaskRunner {
    okhttp3.internal.concurrent.TaskRunner$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.concurrent.TaskRunner$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.connection.ConnectInterceptor {
    okhttp3.internal.connection.ConnectInterceptor INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.connection.RealConnection {
    okhttp3.internal.connection.RealConnection$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.connection.RealConnection$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.connection.RealConnection$connectTls$1 {
    java.util.List invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.connection.RealConnection$connectTls$2 {
    java.util.List invoke();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.connection.RealConnectionPool {
    okhttp3.internal.connection.RealConnectionPool$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.connection.RealConnectionPool$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.connection.RouteDatabase {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.connection.RouteSelector {
    okhttp3.internal.connection.RouteSelector$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.connection.RouteSelector$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.connection.RouteSelector$resetNextProxy$1 {
    java.util.List invoke();
}

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.http.DatesKt$STANDARD_DATE_FORMAT$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http.ExchangeCodec {
    okhttp3.internal.http.ExchangeCodec$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http.HttpMethod {
    okhttp3.internal.http.HttpMethod INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http.RequestLine {
    okhttp3.internal.http.RequestLine INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http.RetryAndFollowUpInterceptor {
    okhttp3.internal.http.RetryAndFollowUpInterceptor$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http.RetryAndFollowUpInterceptor$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http.StatusLine {
    okhttp3.internal.http.StatusLine$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http.StatusLine$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http1.HeadersReader {
    okhttp3.internal.http1.HeadersReader$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http1.HeadersReader$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http1.Http1ExchangeCodec {
    okhttp3.internal.http1.Http1ExchangeCodec$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http1.Http1ExchangeCodec$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.http2.ConnectionShutdownException {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.ErrorCode {
    okhttp3.internal.http2.ErrorCode$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.ErrorCode$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Header {
    okhttp3.internal.http2.Header$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Header$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Hpack {
    okhttp3.internal.http2.Hpack INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Hpack$Reader {
    <init>(okio.Source,int,int,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class okio.Source

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Hpack$Writer {
    <init>(int,boolean,okio.Buffer,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class okio.Buffer

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Http2 {
    okhttp3.internal.http2.Http2 INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Http2Connection {
    okhttp3.internal.http2.Http2Connection$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Http2Connection$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.http2.Http2Connection$Listener {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Http2Connection$Listener {
    okhttp3.internal.http2.Http2Connection$Listener$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Http2Connection$Listener$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.http2.Http2Connection$Listener$Companion$REFUSE_INCOMING_STREAMS$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Http2ExchangeCodec {
    okhttp3.internal.http2.Http2ExchangeCodec$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Http2ExchangeCodec$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Http2Reader {
    okhttp3.internal.http2.Http2Reader$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Http2Reader$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Http2Stream {
    okhttp3.internal.http2.Http2Stream$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Http2Stream$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Http2Stream$FramingSink {
    <init>(okhttp3.internal.http2.Http2Stream,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class okhttp3.internal.http2.Http2Stream

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Http2Writer {
    okhttp3.internal.http2.Http2Writer$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Http2Writer$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Huffman {
    okhttp3.internal.http2.Huffman INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.http2.Huffman$Node {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.PushObserver {
    okhttp3.internal.http2.PushObserver$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.PushObserver$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.http2.PushObserver$Companion$PushObserverCancel {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.http2.Settings {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Settings {
    okhttp3.internal.http2.Settings$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.http2.Settings$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.io.FileSystem {
    okhttp3.internal.io.FileSystem$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.io.FileSystem$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.io.FileSystem$Companion$SystemFileSystem {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.platform.Android10Platform {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.Android10Platform {
    okhttp3.internal.platform.Android10Platform$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.Android10Platform$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.platform.AndroidPlatform {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.AndroidPlatform {
    okhttp3.internal.platform.AndroidPlatform$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.AndroidPlatform$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.BouncyCastlePlatform {
    okhttp3.internal.platform.BouncyCastlePlatform$Companion Companion;    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.BouncyCastlePlatform$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.ConscryptPlatform {
    okhttp3.internal.platform.ConscryptPlatform$Companion Companion;    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.ConscryptPlatform$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.Jdk8WithJettyBootPlatform {
    okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.platform.Jdk9Platform {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.Jdk9Platform {
    okhttp3.internal.platform.Jdk9Platform$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.Jdk9Platform$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.OpenJSSEPlatform {
    okhttp3.internal.platform.OpenJSSEPlatform$Companion Companion;    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.OpenJSSEPlatform$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.platform.Platform {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.Platform {
    okhttp3.internal.platform.Platform$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.Platform$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.platform.android.Android10SocketAdapter {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.android.Android10SocketAdapter {
    okhttp3.internal.platform.android.Android10SocketAdapter$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.android.Android10SocketAdapter$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.android.AndroidCertificateChainCleaner {
    okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.android.AndroidLog {
    okhttp3.internal.platform.android.AndroidLog INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.android.AndroidLogHandler {
    okhttp3.internal.platform.android.AndroidLogHandler INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.android.AndroidSocketAdapter {
    okhttp3.internal.platform.android.AndroidSocketAdapter$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.android.AndroidSocketAdapter$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.platform.android.BouncyCastleSocketAdapter {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.android.BouncyCastleSocketAdapter {
    okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion$factory$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.android.CloseGuard {
    okhttp3.internal.platform.android.CloseGuard$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.android.CloseGuard$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.platform.android.ConscryptSocketAdapter {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.android.ConscryptSocketAdapter {
    okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion$factory$1 {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.android.StandardAndroidSocketAdapter {
    okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.proxy.NullProxySelector {
    okhttp3.internal.proxy.NullProxySelector INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.publicsuffix.PublicSuffixDatabase {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.publicsuffix.PublicSuffixDatabase {
    okhttp3.internal.publicsuffix.PublicSuffixDatabase$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.publicsuffix.PublicSuffixDatabase$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.tls.BasicCertificateChainCleaner {
    okhttp3.internal.tls.BasicCertificateChainCleaner$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.tls.BasicCertificateChainCleaner$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keep class okhttp3.internal.tls.CertificateChainCleaner

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.tls.CertificateChainCleaner {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.tls.CertificateChainCleaner {
    okhttp3.internal.tls.CertificateChainCleaner$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.tls.CertificateChainCleaner$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.tls.OkHostnameVerifier {
    okhttp3.internal.tls.OkHostnameVerifier INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.ws.RealWebSocket {
    okhttp3.internal.ws.RealWebSocket$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.ws.RealWebSocket$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.ws.WebSocketExtensions {
    okhttp3.internal.ws.WebSocketExtensions$Companion Companion;    <init>(boolean,java.lang.Integer,boolean,java.lang.Integer,boolean,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okhttp3.internal.ws.WebSocketExtensions {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.ws.WebSocketExtensions$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okhttp3.internal.ws.WebSocketProtocol {
    okhttp3.internal.ws.WebSocketProtocol INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class okio.-DeprecatedOkio {
    okio.-DeprecatedOkio INSTANCE;}

-keepclassmembers,allowshrinking,allowobfuscation class okio.-DeprecatedUtf8 {
    okio.-DeprecatedUtf8 INSTANCE;}

-keepclassmembers,allowoptimization,allowobfuscation class okio.AsyncTimeout {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okio.AsyncTimeout {
    okio.AsyncTimeout$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okio.AsyncTimeout$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okio.AsyncTimeout$Watchdog {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class okio.BlackholeSink {
    <init>();
}

-keep class okio.Buffer

-keepclassmembers,allowoptimization,allowobfuscation class okio.Buffer {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class okio.Buffer$UnsafeCursor {
    <init>();
}

-keep class okio.ByteString

-keepclassmembers,allowshrinking,allowobfuscation class okio.ByteString {
    okio.ByteString$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okio.ByteString$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okio.HashingSink {
    okio.HashingSink$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okio.HashingSink$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okio.HashingSource {
    okio.HashingSource$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okio.HashingSource$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okio.Options {
    okio.Options$Companion Companion;    <init>(okio.ByteString[],int[],kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class okio.ByteString

-keepclassmembers,allowshrinking,allowobfuscation class okio.Options$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okio.Segment {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okio.Segment {
    okio.Segment$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okio.Segment$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowshrinking,allowobfuscation class okio.SegmentPool {
    okio.SegmentPool INSTANCE;}

-keep class okio.Source

-keepclassmembers,allowoptimization,allowobfuscation class okio.Throttler {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class okio.Timeout {
    <init>();
}

-keepclassmembers,allowshrinking,allowobfuscation class okio.Timeout {
    okio.Timeout$Companion Companion;}

-keepclassmembers,allowshrinking,allowobfuscation class okio.Timeout$Companion {
    <init>(kotlin.jvm.internal.DefaultConstructorMarker);
}

-keep class kotlin.jvm.internal.DefaultConstructorMarker

-keepclassmembers,allowoptimization,allowobfuscation class okio.Timeout$Companion$NONE$1 {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class org.intellij.lang.annotations.JdkConstants {
    <init>();
}

-keepclassmembers,allowoptimization,allowobfuscation class org.intellij.lang.annotations.PrintFormatPattern {
    <init>();
}

-keep class org.jetbrains.annotations.NotNull

-keep class org.jetbrains.annotations.Nullable

# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/7ee3a78f51e4bc6854f3ba3383ff48f5/transformed/iproov-10.3.2/proguard.txt
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/615b3134c2a6d213fefd4a85e7c9f9c5/transformed/appcompat-1.3.1/proguard.txt
# Copyright (C) 2018 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# aapt is not able to read app::actionViewClass and app:actionProviderClass to produce proguard
# keep rules. Add a commonly used SearchView to the keep list until b/109831488 is resolved.
-keep class androidx.appcompat.widget.SearchView { <init>(...); }

# Never inline methods, but allow shrinking and obfuscation.
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Impl* {
  <methods>;
}

# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/615b3134c2a6d213fefd4a85e7c9f9c5/transformed/appcompat-1.3.1/proguard.txt
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/b213c349d332546665e226a12cd611aa/transformed/fragment-1.3.6/proguard.txt
# Copyright (C) 2020 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The default FragmentFactory creates Fragment instances using reflection
-if public class ** extends androidx.fragment.app.Fragment
-keepclasseswithmembers,allowobfuscation public class <1> {
    public <init>();
}

# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/b213c349d332546665e226a12cd611aa/transformed/fragment-1.3.6/proguard.txt
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/bfb751e45f2f50709c0b806c4d5ff004/transformed/ui-release/proguard.txt
# Copyright (C) 2020 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# We supply these as stubs and are able to link to them at runtime
# because they are hidden public classes in Android. We don't want
# R8 to complain about them not being there during optimization.
-dontwarn android.view.RenderNode
-dontwarn android.view.DisplayListCanvas

-keepclassmembers class androidx.compose.ui.platform.ViewLayerContainer {
    protected void dispatchGetDisplayList();
}

-keepclassmembers class androidx.compose.ui.platform.AndroidComposeView {
    android.view.View findViewByAccessibilityIdTraversal(int);
}

# Users can create Modifier.Node instances that implement multiple Modifier.Node interfaces,
# so we cannot tell whether two modifier.node instances are of the same type without using
# reflection to determine the class type. See b/265188224 for more context.
-keep,allowshrinking class * extends androidx.compose.ui.node.ModifierNodeElement

# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/bfb751e45f2f50709c0b806c4d5ff004/transformed/ui-release/proguard.txt
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/cf444d0c8ecfd5eab4c4f32db4045fde/transformed/vectordrawable-animated-1.1.0/proguard.txt
# Copyright (C) 2016 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# keep setters in VectorDrawables so that animations can still work.
-keepclassmembers class androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$* {
   void set*(***);
   *** get*();
}

# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/cf444d0c8ecfd5eab4c4f32db4045fde/transformed/vectordrawable-animated-1.1.0/proguard.txt
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/dab803767c915bbac1675e283853330f/transformed/lifecycle-process-2.6.1/proguard.txt
# this rule is need to work properly when app is compiled with api 28, see b/142778206
-keepclassmembers class * extends androidx.lifecycle.EmptyActivityLifecycleCallbacks { *; }
# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/dab803767c915bbac1675e283853330f/transformed/lifecycle-process-2.6.1/proguard.txt
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/d1860690a236920a96f16b03ffa5a127/transformed/savedstate-1.2.1/proguard.txt
# Copyright (C) 2019 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

-keepclassmembers,allowobfuscation class * implements androidx.savedstate.SavedStateRegistry$AutoRecreated {
    <init>();
}

# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/d1860690a236920a96f16b03ffa5a127/transformed/savedstate-1.2.1/proguard.txt
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/75654d9adbf19716deaef53915fe05e7/transformed/lifecycle-viewmodel-2.6.1/proguard.txt
-keepclassmembers,allowobfuscation class * extends androidx.lifecycle.ViewModel {
    <init>();
}

-keepclassmembers,allowobfuscation class * extends androidx.lifecycle.AndroidViewModel {
    <init>(android.app.Application);
}

# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/75654d9adbf19716deaef53915fe05e7/transformed/lifecycle-viewmodel-2.6.1/proguard.txt
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/e0e06786bd95c8bf29286e480876593c/transformed/lifecycle-viewmodel-savedstate-2.6.1/proguard.txt
-keepclassmembers,allowobfuscation class * extends androidx.lifecycle.ViewModel {
    <init>(androidx.lifecycle.SavedStateHandle);
}

-keepclassmembers,allowobfuscation class * extends androidx.lifecycle.AndroidViewModel {
    <init>(android.app.Application,androidx.lifecycle.SavedStateHandle);
}

# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/e0e06786bd95c8bf29286e480876593c/transformed/lifecycle-viewmodel-savedstate-2.6.1/proguard.txt
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/f4724aa925f75bb91972e3a403dd62d1/transformed/core-1.12.0/proguard.txt
# Never inline methods, but allow shrinking and obfuscation.
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.view.ViewCompat$Api* {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.view.WindowInsetsCompat$*Impl* {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.app.NotificationCompat$*$Api*Impl {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.os.UserHandleCompat$Api*Impl {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.widget.EdgeEffectCompat$Api*Impl {
  <methods>;
}

# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/f4724aa925f75bb91972e3a403dd62d1/transformed/core-1.12.0/proguard.txt
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/e300eff17aabb2e388f49c035bcfa53c/transformed/lifecycle-runtime-2.6.1/proguard.txt
-keepattributes AnnotationDefault,
                RuntimeVisibleAnnotations,
                RuntimeVisibleParameterAnnotations,
                RuntimeVisibleTypeAnnotations

-keepclassmembers enum androidx.lifecycle.Lifecycle$Event {
    <fields>;
}

-keep !interface * implements androidx.lifecycle.LifecycleObserver {
}

-keep class * implements androidx.lifecycle.GeneratedAdapter {
    <init>(...);
}

-keepclassmembers class ** {
    @androidx.lifecycle.OnLifecycleEvent *;
}

# this rule is need to work properly when app is compiled with api 28, see b/142778206
# Also this rule prevents registerIn from being inlined.
-keepclassmembers class androidx.lifecycle.ReportFragment$LifecycleCallbacks { *; }
# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/e300eff17aabb2e388f49c035bcfa53c/transformed/lifecycle-runtime-2.6.1/proguard.txt
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/d9e461b24fb15ec8428979fde697fcc1/transformed/startup-runtime-1.2.0/proguard.txt
# It's important that we preserve initializer names, given they are used in the AndroidManifest.xml.
-keepnames class * extends androidx.startup.Initializer

# These Proguard rules ensures that ComponentInitializers are are neither shrunk nor obfuscated,
# and are a part of the primary dex file. This is because they are discovered and instantiated
# during application startup.
-keep class * extends androidx.startup.Initializer {
    # Keep the public no-argument constructor while allowing other methods to be optimized.
    <init>();
}

-assumenosideeffects class androidx.startup.StartupLogger { public static <methods>; }

# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/d9e461b24fb15ec8428979fde697fcc1/transformed/startup-runtime-1.2.0/proguard.txt
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/5e82ce4d9f0861b8e08daf2bb98df8e1/transformed/versionedparcelable-1.1.1/proguard.txt
-keep class * implements androidx.versionedparcelable.VersionedParcelable
-keep public class android.support.**Parcelizer { *; }
-keep public class androidx.**Parcelizer { *; }
-keep public class androidx.versionedparcelable.ParcelImpl

# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/5e82ce4d9f0861b8e08daf2bb98df8e1/transformed/versionedparcelable-1.1.1/proguard.txt
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/17345822202132902a6038de93a1f7af/transformed/runtime-release/proguard.txt
-assumenosideeffects public class androidx.compose.runtime.ComposerKt {
    void sourceInformation(androidx.compose.runtime.Composer,java.lang.String);
    void sourceInformationMarkerStart(androidx.compose.runtime.Composer,int,java.lang.String);
    void sourceInformationMarkerEnd(androidx.compose.runtime.Composer);
}

# Composer's class initializer doesn't do anything but create an EMPTY object. Marking the
# initializers as having no side effects can help encourage shrinkers to merge/devirtualize Composer
# with ComposerImpl.
-assumenosideeffects public class androidx.compose.runtime.Composer {
    void <clinit>();
}
-assumenosideeffects public class androidx.compose.runtime.ComposerImpl {
    void <clinit>();
}
# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/17345822202132902a6038de93a1f7af/transformed/runtime-release/proguard.txt
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/cb0bc61bd9f64aa97c14531fb6feb7f7/transformed/rules/lib/META-INF/proguard/androidx-annotations.pro
-keep,allowobfuscation @interface androidx.annotation.Keep
-keep @androidx.annotation.Keep class * {*;}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <methods>;
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <fields>;
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <init>(...);
}

-keepclassmembers,allowobfuscation class * {
  @androidx.annotation.DoNotInline <methods>;
}

# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/cb0bc61bd9f64aa97c14531fb6feb7f7/transformed/rules/lib/META-INF/proguard/androidx-annotations.pro
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/452b2004ee01f5ee8d1c34da4e29dc45/transformed/rules/lib/META-INF/proguard/okhttp3.pro
# JSR 305 annotations are for embedding nullability information.
-dontwarn javax.annotation.**

# A resource is loaded with a relative path so the package of this class must be preserved.
-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase

# Animal Sniffer compileOnly dependency to ensure APIs are compatible with older versions of Java.
-dontwarn org.codehaus.mojo.animal_sniffer.*

# OkHttp platform used only on JVM and when Conscrypt and other security providers are available.
-dontwarn okhttp3.internal.platform.**
-dontwarn org.conscrypt.**
-dontwarn org.bouncycastle.**
-dontwarn org.openjsse.**

# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/452b2004ee01f5ee8d1c34da4e29dc45/transformed/rules/lib/META-INF/proguard/okhttp3.pro
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/af3042c10dedf257122d2ceee015ed51/transformed/rules/lib/META-INF/proguard/ktor.pro
# Most of volatile fields are updated with AtomicFU and should not be mangled/removed
-keepclassmembers class io.ktor.** {
    volatile <fields>;
}

-keepclassmembernames class io.ktor.** {
    volatile <fields>;
}

# client engines are loaded using ServiceLoader so we need to keep them
-keep class io.ktor.client.engine.** implements io.ktor.client.HttpClientEngineContainer


# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/af3042c10dedf257122d2ceee015ed51/transformed/rules/lib/META-INF/proguard/ktor.pro
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/d2fa16a9288ab1ad76507dc77a76bcac/transformed/rules/lib/META-INF/com.android.tools/r8-from-1.6.0/coroutines.pro
# Allow R8 to optimize away the FastServiceLoader.
# Together with ServiceLoader optimization in R8
# this results in direct instantiation when loading Dispatchers.Main
-assumenosideeffects class kotlinx.coroutines.internal.MainDispatcherLoader {
    boolean FAST_SERVICE_LOADER_ENABLED return false;
}

-assumenosideeffects class kotlinx.coroutines.internal.FastServiceLoaderKt {
    boolean ANDROID_DETECTED return true;
}

# Disable support for "Missing Main Dispatcher", since we always have Android main dispatcher
-assumenosideeffects class kotlinx.coroutines.internal.MainDispatchersKt {
    boolean SUPPORT_MISSING return false;
}

# Statically turn off all debugging facilities and assertions
-assumenosideeffects class kotlinx.coroutines.DebugKt {
    boolean getASSERTIONS_ENABLED() return false;
    boolean getDEBUG() return false;
    boolean getRECOVER_STACK_TRACES() return false;
}

# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/d2fa16a9288ab1ad76507dc77a76bcac/transformed/rules/lib/META-INF/com.android.tools/r8-from-1.6.0/coroutines.pro
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/a9e9d435336b586d865514e2f4f93d06/transformed/rules/lib/META-INF/com.android.tools/r8/coroutines.pro
# When editing this file, update the following files as well:
# - META-INF/proguard/coroutines.pro
# - META-INF/com.android.tools/proguard/coroutines.pro

# Most of volatile fields are updated with AFU and should not be mangled
-keepclassmembers class kotlinx.coroutines.** {
    volatile <fields>;
}

# Same story for the standard library's SafeContinuation that also uses AtomicReferenceFieldUpdater
-keepclassmembers class kotlin.coroutines.SafeContinuation {
    volatile <fields>;
}

# These classes are only required by kotlinx.coroutines.debug.AgentPremain, which is only loaded when
# kotlinx-coroutines-core is used as a Java agent, so these are not needed in contexts where ProGuard is used.
-dontwarn java.lang.instrument.ClassFileTransformer
-dontwarn sun.misc.SignalHandler
-dontwarn java.lang.instrument.Instrumentation
-dontwarn sun.misc.Signal

# Only used in `kotlinx.coroutines.internal.ExceptionsConstructor`.
# The case when it is not available is hidden in a `try`-`catch`, as well as a check for Android.
-dontwarn java.lang.ClassValue

# An annotation used for build tooling, won't be directly accessed.
-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement
# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/a9e9d435336b586d865514e2f4f93d06/transformed/rules/lib/META-INF/com.android.tools/r8/coroutines.pro
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/3db2b68db4d1d705cc7b956f15311328/transformed/rules/lib/META-INF/com.android.tools/r8/kotlinx-serialization-common.pro
# Keep `Companion` object fields of serializable classes.
# This avoids serializer lookup through `getDeclaredClasses` as done for named companion objects.
-if @kotlinx.serialization.Serializable class **
-keepclassmembers class <1> {
    static <1>$Companion Companion;
}

# Keep `serializer()` on companion objects (both default and named) of serializable classes.
-if @kotlinx.serialization.Serializable class ** {
    static **$* *;
}
-keepclassmembers class <2>$<3> {
    kotlinx.serialization.KSerializer serializer(...);
}

# Keep `INSTANCE.serializer()` of serializable objects.
-if @kotlinx.serialization.Serializable class ** {
    public static ** INSTANCE;
}
-keepclassmembers class <1> {
    public static <1> INSTANCE;
    kotlinx.serialization.KSerializer serializer(...);
}

# @Serializable and @Polymorphic are used at runtime for polymorphic serialization.
-keepattributes RuntimeVisibleAnnotations,AnnotationDefault

# Don't print notes about potential mistakes or omissions in the configuration for kotlinx-serialization classes
# See also https://github.com/Kotlin/kotlinx.serialization/issues/1900
-dontnote kotlinx.serialization.**

# Serialization core uses `java.lang.ClassValue` for caching inside these specified classes.
# If there is no `java.lang.ClassValue` (for example, in Android), then R8/ProGuard will print a warning.
# However, since in this case they will not be used, we can disable these warnings
-dontwarn kotlinx.serialization.internal.ClassValueReferences

# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/3db2b68db4d1d705cc7b956f15311328/transformed/rules/lib/META-INF/com.android.tools/r8/kotlinx-serialization-common.pro
# The proguard configuration file for the following section is /Users/fernandorauber/.gradle/caches/transforms-4/3db2b68db4d1d705cc7b956f15311328/transformed/rules/lib/META-INF/com.android.tools/r8/kotlinx-serialization-r8.pro
# Rule to save runtime annotations on serializable class.
# If the R8 full mode is used, annotations are removed from classes-files.
#
# For the annotation serializer, it is necessary to read the `Serializable` annotation inside the serializer<T>() function - if it is present,
# then `SealedClassSerializer` is used, if absent, then `PolymorphicSerializer'.
#
# When using R8 full mode, all interfaces will be serialized using `PolymorphicSerializer`.
#
# see https://github.com/Kotlin/kotlinx.serialization/issues/2050

 -if @kotlinx.serialization.Serializable class **
 -keep, allowshrinking, allowoptimization, allowobfuscation, allowaccessmodification class <1>

# End of content from /Users/fernandorauber/.gradle/caches/transforms-4/3db2b68db4d1d705cc7b956f15311328/transformed/rules/lib/META-INF/com.android.tools/r8/kotlinx-serialization-r8.pro
# The proguard configuration file for the following section is /Users/fernandorauber/StudioProjects/iProov KMP/sdk/build/intermediates/aapt_proguard_file/release/generateReleaseLibraryProguardRules/aapt_rules.txt
# Generated by the gradle plugin
-keep class androidx.startup.InitializationProvider { <init>(...); }

# End of content from /Users/fernandorauber/StudioProjects/iProov KMP/sdk/build/intermediates/aapt_proguard_file/release/generateReleaseLibraryProguardRules/aapt_rules.txt
# The proguard configuration file for the following section is <unknown>
-keep class **.R
-keep class **.R$* {*;}
# End of content from <unknown>